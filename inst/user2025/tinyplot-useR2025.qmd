---
title: tinyplot
subtitle: Lightweight extension of the base R graphics system
format: clean-revealjs
  # clean-revealjs:
  #   logo: img/logo.svg
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
execute:
  echo: true
author:
  - name: Grant McDermott
    orcid: 0000-0001-7883-8573
    email: gmcd@mazon.com
    affiliations: Amazon.com | University of Oregon
date: 2025-08-09 
bibliography: refs.bib
---

## Disclaimer

All views expressed during this talk are my own, and do not necessarily reflect the views of my employer.

# Motivating example

Everyone's favourite penguins...

## `base::plot`

### Simple scatter plot

```{r}
plot(bill_dep ~ bill_len, data = penguins)
```

## `base::plot`

### Let's add some grouping?

```{r}
plot(bill_dep ~ bill_len, data = penguins, col = species)
```

Important: `col = species` works here because `species` is a factor.

## `base::plot`

### Add a legend

```{r}
plot(bill_dep ~ bill_len, data = penguins, col = species)
legend("topright", legend = unique(penguins$species), col = 1:3, pch = 1)
```

Did we cover over any points? Maybe check that later...

## `base::plot`

### How about a different plot type?

```{r}
plot(bill_dep ~ bill_len, data = penguins, col = species, type = 'b')
```

Ugh... our grouped coloring logic doesn't work for line components.

## `base::plot`

### Maybe a density plot?

```{r}
# with(penguins, plot(density(bill_len), col = species)) # need to omit NAs
with(na.omit(penguins), plot(density(bill_len), col = species))
```

Nope. Grouping is ignored. (We can't use a formula either...)

## `base::plot`

### Actually, even our "working" scatterplot contains an error

```{r}
plot(bill_dep ~ bill_len, data = penguins, col = species)
legend("topright", legend = unique(penguins$species), col = 1:3, pch = 1)
```

::: {.fragment}
**Q:** Can you spot the error?
:::

## `base::plot`

### Actually, even our "working" scatterplot contains an error

```{r}
plot(bill_dep ~ bill_len, data = penguins, col = species)
legend("topright", legend = levels(penguins$species), col = 1:3, pch = 1)
```

 **A:** We should have used `levels(species)`, not `unique(species)`.

## `base::plot`

### Problems and pitfalls of our base plot approach

- How do we automate the legend mapping and avoid manual error?
- What if we want to place the legend outside of the plot region?
- How do we group by additional parameters (e.g., `pch`)?
- What if we want groups with a different plot type (e.g, lines)?
- What if we need to group by a continuous variable?
- What if we need to facet by another variable?
- What if we want to add a summary function, e.g. regression fit?
- The plots are kind of ugly. Can we make them look better?
- ...

# Enter tinyplot

![](img/logo.svg){height=250}

## tinyplot

### Get it

Homepage: [grantmcdermott.com/tinyplot](https://grantmcdermott.com/tinyplot){preview-link="true"}

Install:

```r
install.packages("tinyplot") # cran
# install.packages("tinyplot", repos = "https://grantmcdermott.r-universe.dev") # dev
```

Load:

```{r}
library("tinyplot")
```

\

::: {.callout-tip .fragment}
In the plots that follow, `plt(...)` is a shorthand alias for `tinyplot(...)`.
:::

## `tinyplot::plt`

### Simplest case: drop-in replacement for `base::plot`

```{r}
plt(bill_dep ~ bill_len, data = penguins)
```



::: {.fragment}
But we can do a lot more than that...
:::

## `tinyplot::plt`

### How do we automate the legend mapping?

```{r}
#| output-location: fragment

plt(bill_dep ~ bill_len | species, data = penguins)
```

## `tinyplot::plt`

### How do we group by additional parameters

::: {.panel-tabset}

### pch

```{r}
#| output-location: fragment

plt(bill_dep ~ bill_len | species, data = penguins, pch = "by")
```

### Interaction

```{r}
plt(bill_dep ~ bill_len | sex + species, data = penguins, pch = "by")
```

:::

## `tinyplot::plt`

###  What if we want groups with a different plot type?

::: {.panel-tabset}

### lines

```{r}
#| output-location: fragment

plt(bill_dep ~ bill_len | species, data = penguins, type = "b")
```

### density

```{r}
plt(~ bill_len | species, data = penguins, type = "density", fill = 0.3)
```

:::

## `tinyplot::plt`

### What if we need to group by a continuous variable?

```{r}
#| output-location: fragment

plt(bill_dep ~ bill_len | body_mass, data = penguins)
```

## `tinyplot::plt`

### What if we need to facet by another variable?

::: {.panel-tabset}

### one-sided

```{r}
#| output-location: fragment

plt(bill_dep ~ bill_len | species, data = penguins, facet = ~island)
```

### two-sided

```{r}
plt(bill_dep ~ bill_len | species, data = penguins, facet = sex ~ island)
```

:::


## `tinyplot::plt`

### What if we want to add a summary function, e.g. regression fit?

```{r}
#| output-location: fragment
#| fragment-index: 1

plt(bill_dep ~ bill_len | species, data = penguins, facet = ~island)
plt_add(type = "lm")
```

## `tinyplot::plt`

### The plots are kind of ugly. Can we make them look better?

```{r}
#| out-width: "75%"
#| output-location: fragment
#| fragment-index: 1

tinytheme("clean") # or "clean2", "minimal", "ipsum", "dark", "tufte", ...
plt(bill_dep ~ bill_len | species, data = penguins, facet = ~island)
plt_add(type = "lm")
```

:::{.fragment fragment-index=2}
**NB:** Themes are persistent; subsequent (tiny)plots will inherit this aesthetic.
:::


# Background

## Origin story ðŸ“¦

### Package development

As a developer, I was frustrated by the trade-offs for supporting basic visualization methods for my packages.

- "I just need a simple errorbar here. Do I really have to finagle with `segments` in base plotting to make this work?"
- "How do I automate a legend (but ensure that nothing gets overplotted)?"
- Sure, I can import **ggplot2**... but that brings in a total of 24 extra/non-base deps.^[`setdiff(tools::package_dependencies("ggplot2",Â recursiveÂ =Â TRUE)[[1]],Â rownames(installed.packages(priority = "base")))`]

## Origin story ðŸŽ“

### Teaching

As a lecturer, I was frustrated that I had to trade off teaching simple visualization approaches versus scalability down the road.

- Base plotting is great for simple plots... but quickly loses its appeal/intuitiveness for more complex plots.
- Do you start with base and switch to **ggplot2** (or **lattice**) down the road?
- Or, do you just dive straight into a more complex API... which, don't get me wrong, is amazing but requires non-trivial upfront investment?  

## **grid** vs **graphics**

### R's has two low-level graphics systems

::: {.r-stack}
![](/img/rgraphics.png)

![](/img/rgraphics2.png){.fragment}
:::

Note: Adapted from @murrell2023updates.

## Base graphics in R

### Very flexible... but tricksy


::::: {.columns}

:::: {.column width="60%"}

You can do amazing things with base **graphics**.

:::{.fragment fragment-index=1}
- `plot()` is just an (opinionated) wrapper around lower-level functions. [@koncevicius2020baseplottingwrappers]
:::

:::{.fragment fragment-index=2}
- This is very powerful in expert hands. [@mayakonda2022basegraphics]
:::

::::

:::: {.column width="40%"}
::: {.r-stack}
![](img/karolis.png){.fragment fragment-index=1}

![](img/poisonalien.png){.fragment fragment-index=2}
:::
::::

:::::

:::{.fragment fragment-index=3}
But going beyond the defaults is often (much) more work that I want to do.
:::


## Advantages of tinyplot

### The sales pitch

- Concise
- Consistent
- Fast
- Extensive
- Lightweight

## Concise

### The formula API gives bang for buck

![](/img/briggs.png)

::: {.fragment}
_P.S. Thanks to Ryan for letting me use this screenshot._
:::

## Concise

### The formula API gives bang for buck

Just focusing on the core plot components...

:::: {.columns}

::: {.column width="50%"}

```r
ggplot(
  simres,
  aes(
    x = true_effect, y = mean_loo_err,
    color = factor(asym)
    )
  ) +
  geom_point() +
  geom_line() +
  facet_wrap(~ exclude_ns)
```

:::

::: {.column width="50%"}

```r
plt(
  mean_loo_err ~ true_effect | factor(asym),
  data = simres,
  type = "o",
  facet = ~exlude_ns
)
```

:::

::::

::: {.fragment}
_(That's about 1/3 fewer characters.)_
:::

## Concise

### Concision is even starker vs. vanilla base plot

:::: {.columns}

::: {.column width="48%"}

![](img/wolfgang1.png)

:::

::: {.column width="4%"}
vs
:::

::: {.column width="48%"}

![](img/wolfgang2.png)

::: {.fragment}
Adapted from @viechtbauer2025tinyplot.
:::

:::

::::


## Disadvantages of tinyplot

### What are the caveats

- Layering gotches
- Custom layout
- Missing features
- Saving plot instructions

## Layering gotchas

### Scaling is fixed by the first layer

```{r}
plt(body_mass ~ bill_len | species, penguins)
plt_add(type = "lm")
```

::: {.fragment}
This is a limitation of **graphics** ðŸ“¦'s "canvas" logic. (Change layer order or use `x/ylim` to fix.)
::: 

## Layering gotchas

### Can't combine `file` with `plt_add` (yet)

This doesn't work:

```r
plt(..., file = "myplot.png")
plt_add(type = ...)
```

::: {.fragment}
I'm hoping to provide a native solution in the future, but workarounds for now:

- Use `plt(..., file = "myplot.png", draw = ...)`
- Open/close the appropriate graphics device manually, e.g. `png("myplot.png"); plt(...); plt_add(...); dev.off() `
::: 

## Thanks

### tinyplot would not be where it is today without...

The R Core team:

- Especially Paul Murrell, who has almost single-handedly built and maintained R's graphics foundations for everyone to enjoy.

My wonderful **tinyplot** co-maintainers:

- Vincent Arel-Bundock
- Achim Zeileis

Many other contributors, feedback providers, and a sources of inspiration.

- etiennebacher, etc.
- the ggplot2 team (Hadley, Thomas, Teun, etc.)

## References
