[
  {
    "objectID": "NEWS.html",
    "href": "NEWS.html",
    "title": "News",
    "section": "",
    "text": "If you are viewing this file on CRAN, please check the latest NEWS on our website where the formatting is also better.\n\n\n\n\n\nImproved horizontal legend spacing, as well as multicolumn legend support. A new example in the “Tips & tricks” vignettes demonstrates the latter. (#446 @grantmcdermott)\nUnivariate boxplots (without grouping variable) are now handled in tinyplot.default(), so that tinyplot(x, type = \"boxplot\") and tinyplot(~ x, type = \"boxplot\") essentially produce the same output as boxplot(x). (#454 @zeileis)\n\n\n\n\n\nMove altdoc from Suggests to Config/Needs/website. Thanks to @etiennebacher for the suggestion and to @eddelbuettel for help with the CI implementation.\n\n\n\n\n\n\n\n\ntype_text() gains xpd and srt arguments for controlling text clipping and rotation, respectively. (#428 @grantmcdermott)\nAdd xlevels (in addition to ylevels) in type_spineplot() for spine plots with categorical x variable. (#431 @zeileis)\n\n\n\n\n\nFixed a long-standing issue whereby resizing the plot window would cause secondary plot layers, e.g. from plt_add(), to become misaligned in faceted plots (#313). This also resolves a related alignment + layering issue specific to the Positron IDE (positron#7316). As an aside, tinyplot should now be fully compatible with Positron. (#438 @grantmcdermott)\nFixed a bug that resulted in y-axis labels being coerced to numeric for \"p\"-alike plot types (including \"jitter\") if y is a factor or character.\nSafer handling of pre-plot hooks. Resolves an issue affecting how tinyplot behaves inside loops, particularly for themed plots where only the final plot was being drawn in Quarto/RMarkdown contexts. Special thanks to @hadley and @cderv for helping us debug. (#425 @vincentarelbundock)\nThe xlevels argument of type_barplot() could not handle numeric indexes correctly. (#431 @zeileis)\nAddressed several shortcomings of the straight line family of types (type_hline, type_vline, type_abline) through better recycling logic. For example, these types now work correctly across non-by facets. Simultaneously, users can also call them in a base plot layer, relaxing the requirement that they must be called as part of a subsequent plot layer via tinyplot_add(). (#422 @grantmcdermott)\n\n\n\n\n\n\n\n\nFix a narrow tinytheme(\"ridge\") regression that was accidentally introduced in v0.4.0, which was causing a palette mismatch for gradient legends. (#415 @grantmcdermott)\n\n\n\n\n\nRevert minimum compatible R version to 4.0.0 (#416 @grantmcdermott)\n\n\n\n\n\n\n\n\n\n\n\"barplot\" / type_barplot() for bar plots. This closes out one of the last remaining canonical base plot types that we wanted to provide a native tinyplot equivalent for. (#305 and #360 @zeileis and @grantmcdermott)\n\"violin\" / type_violin() for violin plots. (#354 @grantmcdermott)\n\n\n\n\n\ntinyplot(..., file = \"*.pdf\") will now default to using cairo_pdf() if cairo graphics are supported on the user’s machine. This should help to ensure better fidelity of (non-standard) fonts in PDFs. (#311 @grantmcdermott)\nThe palette argument now accepts a vector or list of manual colours, e.g. tinyplot(..., palette = c(\"cyan4\", \"hotpink, \"purple4\")), or tinytheme(\"clean\", palette = c(\"cyan4\", \"hotpink, \"purple4\")) (#325 @grantmcdermott)\nTwo new sets of top-level arguments allow for greater axis customization:\n\nxaxb/yaxb control the manual break points of the axis tick marks. (#400 @grantmcdermott)\nxaxl/yaxl apply a formatting function to change the appearance of the axis tick labels. (#363, #391 @grantmcdermott)\n\nThese x/yaxb and x/yaxl arguments can be used in complementary fashion; see the new (lower-level) tinylabel function documentation. For example:\ntinyplot((0:10)/10, yaxb = c(.17, .33, .5, .67, .83), yaxl = \"%\")\nThe x/ymin and x/ymax arguments can now be specified directly via the tinyplot.formula() method thanks to better NSE processing. For example, instead of having to write\nwith(dat, tinyplot(x = x, y = y, by = by ymin = lwr, ymax = upr))\nusers can now do\ntinyplot(y ~ x | by, dat, ymin = lwr, ymax = upr)\nUnderneath the hood, this works by processing these NSE arguments as part of formula model.frame() and reference against the provided dataset. We plan to extend the same logic to other top-level formula arguments such as weights and subset in a future version of tinyplot.\n\n\n\n\n\n\nThe tinyplot(..., cex = &lt;cex&gt;) argument should be respected when using type = \"b\". Thanks to @rjknell for report #307 and @vincentarelbundock for the fix.\nThe tinyplot(..., lwd = &lt;lwd&gt;) argument is now correctly passed down to pt.lwd for type \"p\", which sets proper line weight for the border of pch symbols in legend. Report in #319 and fix in #320 by @kscott-1.\nPassing x and/or y as character variables now triggers the same default plot type behaviour as factors, e.g. boxplots. (#323 @grantmcdermott)\nScatter plots (type_points()/\"p\") now work even if x or y is a factor or character variable. (#323 @grantmcdermott)\nThe tinyplot(..., col = &lt;col&gt;) argument now accepts a numeric index. (#330 @grantmcdermott)\ntype_text() now accepts non-character labels. (#336 @grantmcdermott)\nThe tinyplot(..., pch = &lt;pch&gt;) argument now accepts character literals, e.g. pch = \".\". (#338 @grantmcdermott)\nLine plots (type_lines()/\"l\") now pass on the bg argument to the drawing function. Thanks to @wviechtb for report in #355 @zeileis).\nFixed dynamic y-axis margin spacing for flipped \"boxplot\" and \"jitter\" types. Thanks to @eddelbuettel for the report in #357 @grantmcdermott).\nFixed dynamic x-axis margin spacing for perpendicular (vertical) label text, i.e. cases where las = 2 or las = 3. (#369 @grantmcdermott)\nBetter integration with the Positron IDE graphics pane. Thanks to @thomasp85 for the report and helpful suggestions. (#377, #394 @grantmcdermott)\n\nThe one remaining Positron issue at present is calling plt_add() on a faceted plot, but this appears to be an upstream limitation/bug positron#7316.\n\nFixed a bug that resulted in y-axis labels being coerced to numeric for \"p\"-alike plot types (including \"jitter\") if y is a factor or character. (#387 @grantmcdermott)\nFix a colour recycling regression introduced in v0.3.0. Coincidentally, we have improved the consistency across palette and col arguments, particularly with respect to recycling behaviour. Thanks to @eddelbuettel for the report (#352) and @grantmcdermott for the fix (#410).\n\n\n\n\n\nImproved column spacing of Arguments in the References section of the website. (#328 thanks to @etiennebacher’s upstream altdoc fix)\nAdded a new “Ticks & tips” vignette for non-standard workarounds. (#381 @vincentarelbundock)\nImproved website theme and navigation layout, especially on mobile. (#395, #411, #413 @zeileis and @retostauffer)\n\n\n\n\n\nThe order of the nested loop for drawing interior plot elements has been switched. We now loop over facets first (outer loop) before looping over groups second (inner loop), rather than vice versa. The old/inverted nesting logic was mostly an artifact of development inertia and this new nesting logic should simplify the creation of certain plot types. (#331 @grantmcdermott)\n\n\n\n\n\n\n\ntinyplot v0.3.0 is a big release with many new features, both internal and user-facing. Related updates are grouped below for easier navigation.\n\n\n(Primary PR and author: #222 @vincentarelbundock)\n\nIn addition to the standard character labels (\"p\", \"density\", etc.), the type argument now supports functional equivalents (type_points(), type_density(), etc.). These new functional types all take the form type_*().\nThe character and functional types are interchangeable. For example,\ntinyplot(Nile, type = \"hist\")\nand\ntinyplot(Nile, type = type_hist())\nproduce exactly the same result.\nThe main advantage of the functional type_*() variants is that they offer much more flexibility and control beyond the default case(s). Users can pass appropriate arguments to existing types for customization and can even define their own type_&lt;typename&gt;() functions. More information is available in the dedicated help page for each type (e.g., ?type_hist, ?type_lm, etc.)\nOn the development side, overhauling the type system has also allowed us to introduce a number of new plot types and features (see list below). We have also simplified our internal codebase, since explicit argument passing requires less guesswork on our end. Speaking of which, we now recommended that users explicitly pass ancillary type-specific arguments as part of the relevant type_*() call. For example,\ntinyplot(Nile, type = type_hist(breaks = 30))\nis preferable to\ntinyplot(Nile, type = \"hist\", breaks = 30)\nWhile the latter option will still work, we cannot guarantee that argument passing will work in every situation. (Reason: Passing ancillary type-specific arguments at the top level of the plot call only works if these do not conflict with the main arguments of the tinyplot() function itself; see #267.)\nSome minor breaking changes were unavoidable; see further below.\nFor more details on the new type system, please see the dedicated Plot types vignette on the website.\n\n\n\n\n\nVisualizations:\n\ntype_spineplot() (shortcut: \"spineplot\") spine plots and spinograms. These are modified versions of a histogram or mosaic plot, and are particularly useful for visualizing factor variables. (#233 @zeileis with contributions from @grantmcdermott)\ntype_qq() (shortcut: “qq”) for quantile-quantile plots. (#251 @vincentarelbundock)\ntype_ridge() (shortcut: \"ridge\") for ridge plots aka Joy plots. (#252 @vincentarelbundock, @zeileis, and @grantmcdermott)\ntype_rug() (shortcut: \"rug\") adds a rug to an existing plot. (#276 @grantmcdermott)\ntype_text() (shortcut: \"text\") adds text annotations. @vincentarelbundock)\n\nModels:\n\ntype_glm() (shortcut: \"glm\") @vincentarelbundock)\ntype_lm() (shortcut: \"lm\") @vincentarelbundock)\ntype_loess() (shortcut: \"loess\") @vincentarelbundock)\ntype_spline() (shortcut: \"spline\") (#241 @grantmcdermott)\n\nFunctions:\n\ntype_abline(): line(s) with intercept and slope (#249 @vincentarelbundock)\ntype_hline(): horizontal line(s) (#249 @vincentarelbundock)\ntype_vline(): vertical line(s) (#249 @vincentarelbundock)\ntype_function(): arbitrary function. (#250 @vincentarelbundock)\ntype_summary(): summarize values of y along unique values of x (#274 @grantmcdermott)\n\n\n\n\n\n(Primary PR and authors: #258 @vincentarelbundock and @grantmcdermott)\n\nThe new tinytheme() function provides a convenient mechanism for styling plots according to a variety of pre-defined themes, e.g. tinytheme(\"clean\").\nUsers can also add their own custom themes or tweak an existing theme.\nThemes are persistent and will affect all subsequent plots until they are explicitly reset, e.g. by calling tinytheme() (with no argument) to restore the default plot aesthetic.\nBehind the scenes, tinytheme() sets a hook for a group graphical parameters by passing them through tpar(). Users can still use tpar() to style their plots manually by setting individual graphical parameters. But going forward we expect that most tinyplot users will prefer the convenience of going through tinytheme().\nMore details are provided in the dedicated Themes vignette on the website.\n\n\n\n\n\nNew tinyplot() arguments:\n\nflip &lt;logical&gt; allows for easily flipping (swapping) the orientation of the x and y axes. This should work regardless of plot type, e.g. tinyplot(~Sepal.Length | Species, data = iris, type = \"density\", flip = TRUE). (#216 @grantmcdermott)\ndraw = &lt;draw_funcs&gt; allows users to pass arbitrary drawing functions that are evaluated as-is, before the main plotting elements. A core use case is drawing common annotations across every facet of a faceted plot, e.g. text or threshold lines. (#245 @grantmcdermott)\nfacet.args gains a free = &lt;logical&gt; sub-argument for independently scaling the axes limits of individual facets. (#253 @grantmcdermott)\n\ntpar() gains additional grid.col, grid.lty, and grid.lwd arguments for fine-grained control over the appearance of the default panel grid when tinyplot(..., grid = TRUE) is called. (#237 @grantmcdermott)\nThe new tinyplot_add() (alias: plt_add()) convenience function allows easy layering of plots without having to specify repeat arguments. (#246 @vincentarelbundock)\n\n\n\n\n\n\nThere are a few breaking changes to grouped density plots.\n\nThe joint smoothing bandwidth is now computed using an observation-weighted mean (as opposed to a simple mean). Users can customize this joint bandwidth by invoking the new type_density(joint.bw = &lt;option&gt;) argument. See the function documentation for details. (#291 @grantmcdermott and @zeileis)\nGrouped and/or faceted plots are no longer possible on density objects (i.e., via the tinyplot.density() method). Instead, please rather call tinyplot(..., type = \"density\") or tinyplot(..., type = type_density()) on the raw data and pass grouping or facet arguments as needed. (#284 @grantmcdermott)\n\nThe ribbon.alpha argument in tinyplot() has been deprecated. Use the alpha argument in type_ribbon() (and equivalents) instead: e.g., tinyplot(..., type = type_ribbon(alpha = 0.5)).\n\nAside: Please note that this is not equivalent to using tinyplot(..., type = \"ribbon\", alpha = 0.5) because the latter matches the top-level alpha argument of tinyplot() itself (and thus modifies the entire palette, rather than just the ribbon). See our warning about passing ancillary type-specific arguments above.\n\n\n\n\n\n\nBetter preserve facet attributes, thus avoiding misarrangement of facet grids for density and histogram types. (#209 @zeileis)\nPlots of the form plt(numeric ~ character) now work correctly, with the character variable automatically being coerced to a factor. (#219 @zeileis)\nRespect xlim and ylim when explicitly supplied by the user. (Thanks to @mclements for code submission #221)\nAxis titles for flipped (horizontal) boxplots are appropriately swapped too. (#223 @grantmcdermott)\nRibbon plots without ymin or ymax args, now inherit these values from y (#224 @grantmcdermott)\nPlots where y is a factor now work automatically, dispatching to the new type_spineplot() type. Thanks to @zeileis for the original suggestion all the way back in #2 and the eventual solution in #233.\nFree axis scaling now works properly for faceted histograms. The new type_histogram(free.breaks = &lt;logical&gt;, drop.zeros = &lt;logical&gt;) arguments enable fine-grained control over this behaviour. (#228 @eleuven and @grantmcdermott)\n\n\n\n\n\nContinued modularization/abstraction of the code logic. (#214 @vincentarelbundock)\nMajor internal refactor of the type drawing and data processing. (#222 @vincentarelbundock)\nDocumentation improvements, e.g. explicit guidance on how to specify multiple grouping variables (thanks to @strengjacke for reporting #213).\n\nThe new functional type processing system also means that each type now has its own help page (e.g. ?type_hist, type_ridge, etc.)\n\n\n\n\n\n\nNew Features:\n\nThe axes argument of tinyplot()/plt() gains extra options for fine-grained control of the plot axes. In addition to the existing logical (TRUE/FALSE) option, users can now specify one of the following character keywords (or, just their first letters as a convenient shorthand):\n\n\"standard\" (with axis, ticks, and labels; equivalent to TRUE),\n\"none\" (no axes; equivalent to FALSE),\n\"ticks\" (only ticks and labels without axis line),\n\"labels\" (only labels without ticks and axis line),\n\"axis\" (only axis line and labels but no ticks).\n\nSimultaneously, the main plotting functions also gain the xaxt and yaxt for separately controlling the two axes using the same keyword options. For example, plt(0:10, xaxt = \"l\", yaxt = \"t\") will yield a plot where the x-axis only contains labels and the y-axis contains both labels and ticks, but no axis line. (#190 @zeileis)\nSupport additional boxplot arguments like varwidth, notch, etc. Note that tinyplot(..., type = \"boxplot\", boxwidth = &lt;num&gt;) is equivalent to the boxplot(..., width = &lt;num&gt;); we just use the “box(width)” prefix to avoid conflicting with the existing tinyplot(..., width) argument. (#196 @grantmcdermott)\n\nBug fixes:\n\nFix duplicate plots produced with type = \"density\", which was a regression accidentally introduced in v0.2.0 (#187 @grantmcdermott)\nEnsure correct boxplot positioning if x == by, or these two are functionally identical. (#196 @grantmcdermott)\nxlab and ylab arguments not respected in some plots. Thanks to @lbelzile for reporting Issue #203.\nAvoid triggering an inadvertent legend when a function transformation of x is plotted against x itself, tinyplot(log(x) ~ x). (#197 @zeileis)\nFacets with interactions and/or multivariate formulas (e.g., complex grid arrangements like tinyplot(mpg ~ wt, data = mtcars, facet = am + vs ~ gear)) now plot all panels correctly, even if some combinations are missing. (#197 @grantmcdermott)\nFix alignment of facet titles when axes are logged. (#207 @grantmcdermott)\nConsistent decimals for gradient legends (#277 @grantmcdermott)\n\nInternals:\n\nContinued modularization of the main code logic. (#192 & #198 @vincentarelbundock)\nRevamped formula processing that allows for better sanity checking and edge-case logic. (#197 @zeileis)\n\n\n\n\nNew features:\n\nSupport for additional plot types:\n\ntype = \"n\", i.e. empty plot. Since type = \"n\" implicitly assumes points, which limits the type of legend that can be drawn alongside the empty plot, we have also added a companion empty argument that can be used alongside any plot type. (#157, #167 @grantmcdermott)\ntype = \"boxplot\". Simultaneously enables plt(numeric ~ factor) support, first raised in #2, so that a boxplot is automatically plotted if a numeric is plotted against a factor. (#154 @grantmcdermott)\ntype = \"polypath\". (#159 @grantmcdermott)\ntype = \"rect\". (#161 @grantmcdermott)\ntype = \"segments\". (#163 @grantmcdermott)\ntype = \"histogram\" (alias type = \"hist\"). (#164 @grantmcdermott)\ntype = \"jitter\" (alias type = \"j\"). (#170 @grantmcdermott)\n\n\nInternals:\n\nThe main codebase has been significantly refactored (modularized), which should simplify future maintenance and enable better user-level error messages (#171, #173 @vincentarelbundock)\n\nMisc:\n\nVarious documentation improvements.\n\n\n\n\nOur first CRAN submission! This v0.1.0 release includes the following new features and updates:\nLicense:\n\nFormally switch to Apache 2.0 license. (#141 @grantmcdermott)\n\nBreaking changes:\n\nTo ensure consistent “dot.case” style for all tinyplot() function arguments, the following two arguments have been renamed (old =&gt; new):\n\npar_restore =&gt; restore.par (note the change in word order too!)\nribbon_alpha =&gt; ribbon.alpha\n\nWe don’t believe that these two arguments are much used in practice. So hopefully it will only have a negligible effect on existing tinyplot code in the wild, even though it is a breaking change. (#149 @grantmcdermott)\n\nNew features:\n\nGradient legends are now supported if a continuous variable is passed to by. Thanks to @zeileis for detailed feedback and advice around the default palette choice (a restricted version of the “viridis” palette), as well as StackOverflow user mnel, whose answer here provided the inspiration for the final implementation. (#122 @grantmcdermott)\nOrdered factors now inherit a discrete sequential color palette (“viridis”) by default. Thanks to @zeileis for the suggestion. (#130 @grantmcdermott)\nSupport user-supplied polygons. (#127 @grantmcdermott)\nSupport for the lwd argument for adjusting line widths. Similar to pch, lty, etc. this arguments also accepts a “by” convenience keyword to automatically vary line widths by group. (#134 @grantmcdermott)\ntpar() now accepts standard par() arguments in addition to the tinyplot-specific ones. This allows users to set or query graphical parameters via a single convenience function, instead having to invoke tpar and par separately. (#140 @grantmcdermott)\n\nAs an aside, tpar() has gained some additional parameters for fine-grained control of global plot defaults, including grid, ribbon.alpha, and various file.* parameters (see next bullet point).\n\nUsers can write plots directly to disk using the new file argument, alongside corresponding width and height arguments for output customization (both of which are defined in inches). For example, tinyplot(..., file = \"~/myplot.png\", width = 8, height = 5). This implementation relies on a simple internal wrapper around the traditional R external graphics devices like png(), pdf(), etc. But it may prove more convenient, since the current global graphics parameters held in (t)par() are carried over to the external device too and don’t need to be reset. Note that the appropriate device type is determined automatically by the file extension, which must be one of “.png”, “.jpg” (“.jpeg”), “.pdf”, or “.svg”. (#143 @grantmcdermott)\nWe have a shiny new tinyplot logo. (#148 @grantmcdermott)\nThe new get_saved_par() function can be used to retrieve the par settings from immediately before or immediately after the preceding tinyplot call. This function replaces some older (non-exported) internal functions that tinyplot was using to restore and control par environments. But it could also prove help to end users who are looking for additional ways to restore par settings after the fact. See ?get_saved_par for some examples. (#152 @grantmcdermott)\ntinyplot/plt gaina a new alpha = &lt;numeric[0,1]&gt; convenience argument for adding transparency to plot elements and colours. Example use: plt(rnorm(1e3), pch = 19, alpha = 0.3). (#129 @grantmcdermott)\nSimilar to the preceding news item, transparency can be added to (grouped) background fill by passing bg (or its alias, fill) a numeric in the range [0,1]. This feature has the same effect as bg = \"by\" except for the added transparency. Example use: tinyplot(lat ~ long | depth, data = quakes, pch = 21, cex = 2, bg = 0.2). (#129 @grantmcdermott)\n\nBug fixes:\n\nFixed bug that prevented tpar(facet.x = ...) args from being passed forward and set correctly. (#137 @grantmcdermott)\nFixed bug where custom legends weren’t working with type = \"density\". (#147 @grantmcdermott)\n\nInternals:\n\nWe no longer ship the vignette(s) with the built package. This helps to reduce the size of the installation tarball and also avoids some redundancy with the actual help documentation (since many of the examples are the same). Note that the vignettes are all still rendered and available online at the tinyplot website. (#135 @grantmcdermott)\nSimilarly, we anticipate skipping tests on CRAN since the large suite of test snapshots (images) held in inst/tinytest is pushing the install tarball over CRAN’s recommended 5 MB limit. Please note that local testing of the package requires adding the NOT_CRAN=TRUE environment variable to your .Renviron file (or, exporting it in your .bashrc/.zshrc/etc. dotfile if you prefer that approach). (#145 @vincentarelbundock & @grantmcdermott)\nUpdate some test snapshots to match slight changes in the way that R 4.4.0 calculates density grid coords. (#150 @grantmcdermott)\n\n\n\n\nIMPORTANT BREAKING CHANGE:\nThe package has been renamed to tinyplot. (#22 @grantmcdermott)\nThis package renaming also incorporates the following function changes:\n\nplot2() is replaced by tinyplot() (or its shorthand alias plt()).\npar2() is replaced by tpar().\n\nSo, where you used to write…\nlibrary(plot2)\nplot2(Sepal.Length ~ Petal.Length | Species, iris)\n… you should now write:\nlibrary(tinyplot)\ntinyplot(Sepal.Length ~ Petal.Length | Species, iris)\n\n# Or, use the equivalent shorthand `plt` alias\nplt(Sepal.Length ~ Petal.Length | Species, iris)\nThe package URLs have been updated accordingly:\n\nGitHub: https://github.com/grantmcdermott/tinyplot\nWebsite: https://grantmcdermott.com/tinyplot\nR-universe: https://grantmcdermott.r-universe.dev/tinyplot\n\nMany thanks to everyone who provided thoughtful feedback about this prospective name change, especially @zeileis and @vincentarelbundock for kicking off the discussion, as well as the 100+ participants who voted in the social media poll.\nFor more details about the rational underlying this renaming decision, please see the following GitHub comment, as well as the discussion that preceded it: https://github.com/grantmcdermott/plot2/issues/22#issuecomment-1928472754\n\n\n\nWebsite:\nWe now have a dedicated website! (#80 @vincentarelbundock)\nNew features:\n\nSupport for cex and bg (alias fill) arguments. The latter also permit the “by” convenience keyword similar to lty and pch. This is useful for plotting filled point characters (e.g., pch = 21), where you want a different colour for the fill and border. (#50, #75 @grantmcdermott)\nSupport for filled density plots. (#58 @grantmcdermott)\nThe new add argument allows new plot2 objects to be added to / on top of the existing plot window. (#60 @grantmcdermott)\nSupport for one-sided formulas, e.g. plot2(~ Temp | Month, airquality). (#62 @grantmcdermott and @zeileis)\nSupport for plot2(x, type = \"density\") as an alternative to plot2(density(x)). Works for both the atomic and one-sided formula methods. (#66 @grantmcdermott)\nSupport for “area” type plots as a special case of ribbon plots. (#68 @grantmcdermott)\nPartial matching for palette keywords. (#74 @grantmcdermott)\nplot2 gains a new facet argument for drawing faceted plots. Users can override the default square arrangement by passing the desired number of facet rows or columns to the companion facet.args helper function. Facets can be combined with by grouping, or used on their own. (#83, #91, #94, #96, #101, #103 @grantmcdermott)\nUsers can now control plot2-specific graphical parameters globally via the new par2() function (which is modeled on the base par() function). At the moment only a subset of global parameters, mostly related to legend and facet behaviour, are exposed in par2. But users can expect that more will be added in future releases. (#33, #94 @grantmcdermott)\n\nBug fixes:\n\nY-label correctly prints if a function was used for the atomic plot method, e.g. plot2(rnorm(100). (#52 etiennebacher)\nRibbon plot types are now automatically ordered by the x variable. (#54 @grantmcdermott)\nInterval plots like ribbons, errorbars, and pointranges are now correctly plotted even if a y variable isn’t specified. (#54 @grantmcdermott)\nCorrectly label date-time axes. (#77 @grantmcdermott and @zeileis)\nImproved consistency of legend and facet margins across different plot types and placement, via the new lmar and fmar arguments of par2(). The default legend margin is par2(lmar = c(1,0, 0.1), which means that there is 1.0 line of padding between the legend and the plot region (inside margin) and 0.1 line of padding between the legend and edge of the graphics device (outer margin). Similarly, the default facet padding is par2(fmar = c(1,1,1,1), which means that there is a single line of padding around each side of the individual facets. Users can override these defaults by passing numeric vectors of the appropriate length to par2(). For example, par2(lmar = c(0,0.1) would shrink the inner gap between the legend and plot region to zero, but leave the small outer gap to outside of the graphics device unchanged. (#94 @grantmcdermott)\nFix bug where grid wasn’t auto-expanding correctly for area plots. (#92 @grantmcdermott)\n\n\n\n\nBreaking changes:\n\nColour palettes are now controlled via a single palette argument that unifies the old palette and (deprecated) palette.args arguments. In addition, the default palette for small groups has been changed from “Okabe-Ito” to “R4”. (#31 and #32 @grantmcdermott)\nLegends are now controlled via a single legend argument that unifies the previous (deprecated) legend.position and legend.args arguments. This change also enables several enhancements over the old legend behaviour; see below. (#34 @grantmcdermott)\n\nNew features:\n\nAdd support for the argument log. (#15 @etiennebacher)\nAdd support for grouped density plots. (#18 @grantmcdermott)\nAdd support for (both grouped and non-grouped) “c”, “h”, “s”, and “S” types. (#26 @grantmcdermott)\nBoth the pch and lty arguments now accept a “by” convenience keyword for automatically adjusting plot characters and line types by groups. (#28 @grantmcdermott)\nAdd outside (“!”) placement support for remaining legend keywords, e.g. “top!”, “left!”, “topright!”, etc. Users also gain finer control over many other aspects of the legend via the new unified legend argument, including changing labels, turning of the legend title, and so on. (#34 @grantmcdermott)\nAdd support for \"pointrange\", \"errobar\", and \"ribbon\" plot types. (#35 @vincentarelbundock, #40 and #46 @grantmcdermott)\nSupport grid = TRUE as an alternative to grid = grid(). (#43 @grantmcdermott)\n\nBug fixes:\n\nSetting par(pch=X) globally is now respected. (#20 @grantmcdermott)\nFix x-axis scale/index when y is NULL. (#24 @grantmcdermott)\nSetting a global palette, e.g. palette(\"ggplot2\") is now respected. (#44 @grantmcdermott)\n\n\n\n\nBreaking changes:\n\nLegend defaults have been changed. The default position is now “right!” and drawn without a border, i.e. bty = “n” (#14 by @grantmcdermott).\n\nNew features:\n\nAllow users to specify different pch, lty, and col types per group (#5 and #11 by @vincentarelbundock).\n\nBug fixes:\n\nAdding further elements to plot2 now works (#13 by @grantmcdermott, thanks @karoliskoncevicius for reporting).\n\nInternals:\n\nBetter formula parsing for plot2.formula (#8 by @zeileis).\nUnit testing scaffolding based on tinysnaphot (#11 by @vincent).\n\nProject:\n\n@vincentarelbundock and @zeileis have joined the project as core contributors. 🎉\n\n\n\n\n\nInitial release on GitHub."
  },
  {
    "objectID": "NEWS.html#development",
    "href": "NEWS.html#development",
    "title": "News",
    "section": "",
    "text": "Improved horizontal legend spacing, as well as multicolumn legend support. A new example in the “Tips & tricks” vignettes demonstrates the latter. (#446 @grantmcdermott)\nUnivariate boxplots (without grouping variable) are now handled in tinyplot.default(), so that tinyplot(x, type = \"boxplot\") and tinyplot(~ x, type = \"boxplot\") essentially produce the same output as boxplot(x). (#454 @zeileis)\n\n\n\n\n\nMove altdoc from Suggests to Config/Needs/website. Thanks to @etiennebacher for the suggestion and to @eddelbuettel for help with the CI implementation."
  },
  {
    "objectID": "NEWS.html#section",
    "href": "NEWS.html#section",
    "title": "News",
    "section": "",
    "text": "type_text() gains xpd and srt arguments for controlling text clipping and rotation, respectively. (#428 @grantmcdermott)\nAdd xlevels (in addition to ylevels) in type_spineplot() for spine plots with categorical x variable. (#431 @zeileis)\n\n\n\n\n\nFixed a long-standing issue whereby resizing the plot window would cause secondary plot layers, e.g. from plt_add(), to become misaligned in faceted plots (#313). This also resolves a related alignment + layering issue specific to the Positron IDE (positron#7316). As an aside, tinyplot should now be fully compatible with Positron. (#438 @grantmcdermott)\nFixed a bug that resulted in y-axis labels being coerced to numeric for \"p\"-alike plot types (including \"jitter\") if y is a factor or character.\nSafer handling of pre-plot hooks. Resolves an issue affecting how tinyplot behaves inside loops, particularly for themed plots where only the final plot was being drawn in Quarto/RMarkdown contexts. Special thanks to @hadley and @cderv for helping us debug. (#425 @vincentarelbundock)\nThe xlevels argument of type_barplot() could not handle numeric indexes correctly. (#431 @zeileis)\nAddressed several shortcomings of the straight line family of types (type_hline, type_vline, type_abline) through better recycling logic. For example, these types now work correctly across non-by facets. Simultaneously, users can also call them in a base plot layer, relaxing the requirement that they must be called as part of a subsequent plot layer via tinyplot_add(). (#422 @grantmcdermott)"
  },
  {
    "objectID": "NEWS.html#section-1",
    "href": "NEWS.html#section-1",
    "title": "News",
    "section": "",
    "text": "Fix a narrow tinytheme(\"ridge\") regression that was accidentally introduced in v0.4.0, which was causing a palette mismatch for gradient legends. (#415 @grantmcdermott)\n\n\n\n\n\nRevert minimum compatible R version to 4.0.0 (#416 @grantmcdermott)"
  },
  {
    "objectID": "NEWS.html#section-2",
    "href": "NEWS.html#section-2",
    "title": "News",
    "section": "",
    "text": "\"barplot\" / type_barplot() for bar plots. This closes out one of the last remaining canonical base plot types that we wanted to provide a native tinyplot equivalent for. (#305 and #360 @zeileis and @grantmcdermott)\n\"violin\" / type_violin() for violin plots. (#354 @grantmcdermott)\n\n\n\n\n\ntinyplot(..., file = \"*.pdf\") will now default to using cairo_pdf() if cairo graphics are supported on the user’s machine. This should help to ensure better fidelity of (non-standard) fonts in PDFs. (#311 @grantmcdermott)\nThe palette argument now accepts a vector or list of manual colours, e.g. tinyplot(..., palette = c(\"cyan4\", \"hotpink, \"purple4\")), or tinytheme(\"clean\", palette = c(\"cyan4\", \"hotpink, \"purple4\")) (#325 @grantmcdermott)\nTwo new sets of top-level arguments allow for greater axis customization:\n\nxaxb/yaxb control the manual break points of the axis tick marks. (#400 @grantmcdermott)\nxaxl/yaxl apply a formatting function to change the appearance of the axis tick labels. (#363, #391 @grantmcdermott)\n\nThese x/yaxb and x/yaxl arguments can be used in complementary fashion; see the new (lower-level) tinylabel function documentation. For example:\ntinyplot((0:10)/10, yaxb = c(.17, .33, .5, .67, .83), yaxl = \"%\")\nThe x/ymin and x/ymax arguments can now be specified directly via the tinyplot.formula() method thanks to better NSE processing. For example, instead of having to write\nwith(dat, tinyplot(x = x, y = y, by = by ymin = lwr, ymax = upr))\nusers can now do\ntinyplot(y ~ x | by, dat, ymin = lwr, ymax = upr)\nUnderneath the hood, this works by processing these NSE arguments as part of formula model.frame() and reference against the provided dataset. We plan to extend the same logic to other top-level formula arguments such as weights and subset in a future version of tinyplot.\n\n\n\n\n\n\nThe tinyplot(..., cex = &lt;cex&gt;) argument should be respected when using type = \"b\". Thanks to @rjknell for report #307 and @vincentarelbundock for the fix.\nThe tinyplot(..., lwd = &lt;lwd&gt;) argument is now correctly passed down to pt.lwd for type \"p\", which sets proper line weight for the border of pch symbols in legend. Report in #319 and fix in #320 by @kscott-1.\nPassing x and/or y as character variables now triggers the same default plot type behaviour as factors, e.g. boxplots. (#323 @grantmcdermott)\nScatter plots (type_points()/\"p\") now work even if x or y is a factor or character variable. (#323 @grantmcdermott)\nThe tinyplot(..., col = &lt;col&gt;) argument now accepts a numeric index. (#330 @grantmcdermott)\ntype_text() now accepts non-character labels. (#336 @grantmcdermott)\nThe tinyplot(..., pch = &lt;pch&gt;) argument now accepts character literals, e.g. pch = \".\". (#338 @grantmcdermott)\nLine plots (type_lines()/\"l\") now pass on the bg argument to the drawing function. Thanks to @wviechtb for report in #355 @zeileis).\nFixed dynamic y-axis margin spacing for flipped \"boxplot\" and \"jitter\" types. Thanks to @eddelbuettel for the report in #357 @grantmcdermott).\nFixed dynamic x-axis margin spacing for perpendicular (vertical) label text, i.e. cases where las = 2 or las = 3. (#369 @grantmcdermott)\nBetter integration with the Positron IDE graphics pane. Thanks to @thomasp85 for the report and helpful suggestions. (#377, #394 @grantmcdermott)\n\nThe one remaining Positron issue at present is calling plt_add() on a faceted plot, but this appears to be an upstream limitation/bug positron#7316.\n\nFixed a bug that resulted in y-axis labels being coerced to numeric for \"p\"-alike plot types (including \"jitter\") if y is a factor or character. (#387 @grantmcdermott)\nFix a colour recycling regression introduced in v0.3.0. Coincidentally, we have improved the consistency across palette and col arguments, particularly with respect to recycling behaviour. Thanks to @eddelbuettel for the report (#352) and @grantmcdermott for the fix (#410).\n\n\n\n\n\nImproved column spacing of Arguments in the References section of the website. (#328 thanks to @etiennebacher’s upstream altdoc fix)\nAdded a new “Ticks & tips” vignette for non-standard workarounds. (#381 @vincentarelbundock)\nImproved website theme and navigation layout, especially on mobile. (#395, #411, #413 @zeileis and @retostauffer)\n\n\n\n\n\nThe order of the nested loop for drawing interior plot elements has been switched. We now loop over facets first (outer loop) before looping over groups second (inner loop), rather than vice versa. The old/inverted nesting logic was mostly an artifact of development inertia and this new nesting logic should simplify the creation of certain plot types. (#331 @grantmcdermott)"
  },
  {
    "objectID": "NEWS.html#section-3",
    "href": "NEWS.html#section-3",
    "title": "News",
    "section": "",
    "text": "tinyplot v0.3.0 is a big release with many new features, both internal and user-facing. Related updates are grouped below for easier navigation.\n\n\n(Primary PR and author: #222 @vincentarelbundock)\n\nIn addition to the standard character labels (\"p\", \"density\", etc.), the type argument now supports functional equivalents (type_points(), type_density(), etc.). These new functional types all take the form type_*().\nThe character and functional types are interchangeable. For example,\ntinyplot(Nile, type = \"hist\")\nand\ntinyplot(Nile, type = type_hist())\nproduce exactly the same result.\nThe main advantage of the functional type_*() variants is that they offer much more flexibility and control beyond the default case(s). Users can pass appropriate arguments to existing types for customization and can even define their own type_&lt;typename&gt;() functions. More information is available in the dedicated help page for each type (e.g., ?type_hist, ?type_lm, etc.)\nOn the development side, overhauling the type system has also allowed us to introduce a number of new plot types and features (see list below). We have also simplified our internal codebase, since explicit argument passing requires less guesswork on our end. Speaking of which, we now recommended that users explicitly pass ancillary type-specific arguments as part of the relevant type_*() call. For example,\ntinyplot(Nile, type = type_hist(breaks = 30))\nis preferable to\ntinyplot(Nile, type = \"hist\", breaks = 30)\nWhile the latter option will still work, we cannot guarantee that argument passing will work in every situation. (Reason: Passing ancillary type-specific arguments at the top level of the plot call only works if these do not conflict with the main arguments of the tinyplot() function itself; see #267.)\nSome minor breaking changes were unavoidable; see further below.\nFor more details on the new type system, please see the dedicated Plot types vignette on the website.\n\n\n\n\n\nVisualizations:\n\ntype_spineplot() (shortcut: \"spineplot\") spine plots and spinograms. These are modified versions of a histogram or mosaic plot, and are particularly useful for visualizing factor variables. (#233 @zeileis with contributions from @grantmcdermott)\ntype_qq() (shortcut: “qq”) for quantile-quantile plots. (#251 @vincentarelbundock)\ntype_ridge() (shortcut: \"ridge\") for ridge plots aka Joy plots. (#252 @vincentarelbundock, @zeileis, and @grantmcdermott)\ntype_rug() (shortcut: \"rug\") adds a rug to an existing plot. (#276 @grantmcdermott)\ntype_text() (shortcut: \"text\") adds text annotations. @vincentarelbundock)\n\nModels:\n\ntype_glm() (shortcut: \"glm\") @vincentarelbundock)\ntype_lm() (shortcut: \"lm\") @vincentarelbundock)\ntype_loess() (shortcut: \"loess\") @vincentarelbundock)\ntype_spline() (shortcut: \"spline\") (#241 @grantmcdermott)\n\nFunctions:\n\ntype_abline(): line(s) with intercept and slope (#249 @vincentarelbundock)\ntype_hline(): horizontal line(s) (#249 @vincentarelbundock)\ntype_vline(): vertical line(s) (#249 @vincentarelbundock)\ntype_function(): arbitrary function. (#250 @vincentarelbundock)\ntype_summary(): summarize values of y along unique values of x (#274 @grantmcdermott)\n\n\n\n\n\n(Primary PR and authors: #258 @vincentarelbundock and @grantmcdermott)\n\nThe new tinytheme() function provides a convenient mechanism for styling plots according to a variety of pre-defined themes, e.g. tinytheme(\"clean\").\nUsers can also add their own custom themes or tweak an existing theme.\nThemes are persistent and will affect all subsequent plots until they are explicitly reset, e.g. by calling tinytheme() (with no argument) to restore the default plot aesthetic.\nBehind the scenes, tinytheme() sets a hook for a group graphical parameters by passing them through tpar(). Users can still use tpar() to style their plots manually by setting individual graphical parameters. But going forward we expect that most tinyplot users will prefer the convenience of going through tinytheme().\nMore details are provided in the dedicated Themes vignette on the website.\n\n\n\n\n\nNew tinyplot() arguments:\n\nflip &lt;logical&gt; allows for easily flipping (swapping) the orientation of the x and y axes. This should work regardless of plot type, e.g. tinyplot(~Sepal.Length | Species, data = iris, type = \"density\", flip = TRUE). (#216 @grantmcdermott)\ndraw = &lt;draw_funcs&gt; allows users to pass arbitrary drawing functions that are evaluated as-is, before the main plotting elements. A core use case is drawing common annotations across every facet of a faceted plot, e.g. text or threshold lines. (#245 @grantmcdermott)\nfacet.args gains a free = &lt;logical&gt; sub-argument for independently scaling the axes limits of individual facets. (#253 @grantmcdermott)\n\ntpar() gains additional grid.col, grid.lty, and grid.lwd arguments for fine-grained control over the appearance of the default panel grid when tinyplot(..., grid = TRUE) is called. (#237 @grantmcdermott)\nThe new tinyplot_add() (alias: plt_add()) convenience function allows easy layering of plots without having to specify repeat arguments. (#246 @vincentarelbundock)\n\n\n\n\n\n\nThere are a few breaking changes to grouped density plots.\n\nThe joint smoothing bandwidth is now computed using an observation-weighted mean (as opposed to a simple mean). Users can customize this joint bandwidth by invoking the new type_density(joint.bw = &lt;option&gt;) argument. See the function documentation for details. (#291 @grantmcdermott and @zeileis)\nGrouped and/or faceted plots are no longer possible on density objects (i.e., via the tinyplot.density() method). Instead, please rather call tinyplot(..., type = \"density\") or tinyplot(..., type = type_density()) on the raw data and pass grouping or facet arguments as needed. (#284 @grantmcdermott)\n\nThe ribbon.alpha argument in tinyplot() has been deprecated. Use the alpha argument in type_ribbon() (and equivalents) instead: e.g., tinyplot(..., type = type_ribbon(alpha = 0.5)).\n\nAside: Please note that this is not equivalent to using tinyplot(..., type = \"ribbon\", alpha = 0.5) because the latter matches the top-level alpha argument of tinyplot() itself (and thus modifies the entire palette, rather than just the ribbon). See our warning about passing ancillary type-specific arguments above.\n\n\n\n\n\n\nBetter preserve facet attributes, thus avoiding misarrangement of facet grids for density and histogram types. (#209 @zeileis)\nPlots of the form plt(numeric ~ character) now work correctly, with the character variable automatically being coerced to a factor. (#219 @zeileis)\nRespect xlim and ylim when explicitly supplied by the user. (Thanks to @mclements for code submission #221)\nAxis titles for flipped (horizontal) boxplots are appropriately swapped too. (#223 @grantmcdermott)\nRibbon plots without ymin or ymax args, now inherit these values from y (#224 @grantmcdermott)\nPlots where y is a factor now work automatically, dispatching to the new type_spineplot() type. Thanks to @zeileis for the original suggestion all the way back in #2 and the eventual solution in #233.\nFree axis scaling now works properly for faceted histograms. The new type_histogram(free.breaks = &lt;logical&gt;, drop.zeros = &lt;logical&gt;) arguments enable fine-grained control over this behaviour. (#228 @eleuven and @grantmcdermott)\n\n\n\n\n\nContinued modularization/abstraction of the code logic. (#214 @vincentarelbundock)\nMajor internal refactor of the type drawing and data processing. (#222 @vincentarelbundock)\nDocumentation improvements, e.g. explicit guidance on how to specify multiple grouping variables (thanks to @strengjacke for reporting #213).\n\nThe new functional type processing system also means that each type now has its own help page (e.g. ?type_hist, type_ridge, etc.)"
  },
  {
    "objectID": "NEWS.html#section-4",
    "href": "NEWS.html#section-4",
    "title": "News",
    "section": "",
    "text": "New Features:\n\nThe axes argument of tinyplot()/plt() gains extra options for fine-grained control of the plot axes. In addition to the existing logical (TRUE/FALSE) option, users can now specify one of the following character keywords (or, just their first letters as a convenient shorthand):\n\n\"standard\" (with axis, ticks, and labels; equivalent to TRUE),\n\"none\" (no axes; equivalent to FALSE),\n\"ticks\" (only ticks and labels without axis line),\n\"labels\" (only labels without ticks and axis line),\n\"axis\" (only axis line and labels but no ticks).\n\nSimultaneously, the main plotting functions also gain the xaxt and yaxt for separately controlling the two axes using the same keyword options. For example, plt(0:10, xaxt = \"l\", yaxt = \"t\") will yield a plot where the x-axis only contains labels and the y-axis contains both labels and ticks, but no axis line. (#190 @zeileis)\nSupport additional boxplot arguments like varwidth, notch, etc. Note that tinyplot(..., type = \"boxplot\", boxwidth = &lt;num&gt;) is equivalent to the boxplot(..., width = &lt;num&gt;); we just use the “box(width)” prefix to avoid conflicting with the existing tinyplot(..., width) argument. (#196 @grantmcdermott)\n\nBug fixes:\n\nFix duplicate plots produced with type = \"density\", which was a regression accidentally introduced in v0.2.0 (#187 @grantmcdermott)\nEnsure correct boxplot positioning if x == by, or these two are functionally identical. (#196 @grantmcdermott)\nxlab and ylab arguments not respected in some plots. Thanks to @lbelzile for reporting Issue #203.\nAvoid triggering an inadvertent legend when a function transformation of x is plotted against x itself, tinyplot(log(x) ~ x). (#197 @zeileis)\nFacets with interactions and/or multivariate formulas (e.g., complex grid arrangements like tinyplot(mpg ~ wt, data = mtcars, facet = am + vs ~ gear)) now plot all panels correctly, even if some combinations are missing. (#197 @grantmcdermott)\nFix alignment of facet titles when axes are logged. (#207 @grantmcdermott)\nConsistent decimals for gradient legends (#277 @grantmcdermott)\n\nInternals:\n\nContinued modularization of the main code logic. (#192 & #198 @vincentarelbundock)\nRevamped formula processing that allows for better sanity checking and edge-case logic. (#197 @zeileis)"
  },
  {
    "objectID": "NEWS.html#section-5",
    "href": "NEWS.html#section-5",
    "title": "News",
    "section": "",
    "text": "New features:\n\nSupport for additional plot types:\n\ntype = \"n\", i.e. empty plot. Since type = \"n\" implicitly assumes points, which limits the type of legend that can be drawn alongside the empty plot, we have also added a companion empty argument that can be used alongside any plot type. (#157, #167 @grantmcdermott)\ntype = \"boxplot\". Simultaneously enables plt(numeric ~ factor) support, first raised in #2, so that a boxplot is automatically plotted if a numeric is plotted against a factor. (#154 @grantmcdermott)\ntype = \"polypath\". (#159 @grantmcdermott)\ntype = \"rect\". (#161 @grantmcdermott)\ntype = \"segments\". (#163 @grantmcdermott)\ntype = \"histogram\" (alias type = \"hist\"). (#164 @grantmcdermott)\ntype = \"jitter\" (alias type = \"j\"). (#170 @grantmcdermott)\n\n\nInternals:\n\nThe main codebase has been significantly refactored (modularized), which should simplify future maintenance and enable better user-level error messages (#171, #173 @vincentarelbundock)\n\nMisc:\n\nVarious documentation improvements."
  },
  {
    "objectID": "NEWS.html#section-6",
    "href": "NEWS.html#section-6",
    "title": "News",
    "section": "",
    "text": "Our first CRAN submission! This v0.1.0 release includes the following new features and updates:\nLicense:\n\nFormally switch to Apache 2.0 license. (#141 @grantmcdermott)\n\nBreaking changes:\n\nTo ensure consistent “dot.case” style for all tinyplot() function arguments, the following two arguments have been renamed (old =&gt; new):\n\npar_restore =&gt; restore.par (note the change in word order too!)\nribbon_alpha =&gt; ribbon.alpha\n\nWe don’t believe that these two arguments are much used in practice. So hopefully it will only have a negligible effect on existing tinyplot code in the wild, even though it is a breaking change. (#149 @grantmcdermott)\n\nNew features:\n\nGradient legends are now supported if a continuous variable is passed to by. Thanks to @zeileis for detailed feedback and advice around the default palette choice (a restricted version of the “viridis” palette), as well as StackOverflow user mnel, whose answer here provided the inspiration for the final implementation. (#122 @grantmcdermott)\nOrdered factors now inherit a discrete sequential color palette (“viridis”) by default. Thanks to @zeileis for the suggestion. (#130 @grantmcdermott)\nSupport user-supplied polygons. (#127 @grantmcdermott)\nSupport for the lwd argument for adjusting line widths. Similar to pch, lty, etc. this arguments also accepts a “by” convenience keyword to automatically vary line widths by group. (#134 @grantmcdermott)\ntpar() now accepts standard par() arguments in addition to the tinyplot-specific ones. This allows users to set or query graphical parameters via a single convenience function, instead having to invoke tpar and par separately. (#140 @grantmcdermott)\n\nAs an aside, tpar() has gained some additional parameters for fine-grained control of global plot defaults, including grid, ribbon.alpha, and various file.* parameters (see next bullet point).\n\nUsers can write plots directly to disk using the new file argument, alongside corresponding width and height arguments for output customization (both of which are defined in inches). For example, tinyplot(..., file = \"~/myplot.png\", width = 8, height = 5). This implementation relies on a simple internal wrapper around the traditional R external graphics devices like png(), pdf(), etc. But it may prove more convenient, since the current global graphics parameters held in (t)par() are carried over to the external device too and don’t need to be reset. Note that the appropriate device type is determined automatically by the file extension, which must be one of “.png”, “.jpg” (“.jpeg”), “.pdf”, or “.svg”. (#143 @grantmcdermott)\nWe have a shiny new tinyplot logo. (#148 @grantmcdermott)\nThe new get_saved_par() function can be used to retrieve the par settings from immediately before or immediately after the preceding tinyplot call. This function replaces some older (non-exported) internal functions that tinyplot was using to restore and control par environments. But it could also prove help to end users who are looking for additional ways to restore par settings after the fact. See ?get_saved_par for some examples. (#152 @grantmcdermott)\ntinyplot/plt gaina a new alpha = &lt;numeric[0,1]&gt; convenience argument for adding transparency to plot elements and colours. Example use: plt(rnorm(1e3), pch = 19, alpha = 0.3). (#129 @grantmcdermott)\nSimilar to the preceding news item, transparency can be added to (grouped) background fill by passing bg (or its alias, fill) a numeric in the range [0,1]. This feature has the same effect as bg = \"by\" except for the added transparency. Example use: tinyplot(lat ~ long | depth, data = quakes, pch = 21, cex = 2, bg = 0.2). (#129 @grantmcdermott)\n\nBug fixes:\n\nFixed bug that prevented tpar(facet.x = ...) args from being passed forward and set correctly. (#137 @grantmcdermott)\nFixed bug where custom legends weren’t working with type = \"density\". (#147 @grantmcdermott)\n\nInternals:\n\nWe no longer ship the vignette(s) with the built package. This helps to reduce the size of the installation tarball and also avoids some redundancy with the actual help documentation (since many of the examples are the same). Note that the vignettes are all still rendered and available online at the tinyplot website. (#135 @grantmcdermott)\nSimilarly, we anticipate skipping tests on CRAN since the large suite of test snapshots (images) held in inst/tinytest is pushing the install tarball over CRAN’s recommended 5 MB limit. Please note that local testing of the package requires adding the NOT_CRAN=TRUE environment variable to your .Renviron file (or, exporting it in your .bashrc/.zshrc/etc. dotfile if you prefer that approach). (#145 @vincentarelbundock & @grantmcdermott)\nUpdate some test snapshots to match slight changes in the way that R 4.4.0 calculates density grid coords. (#150 @grantmcdermott)"
  },
  {
    "objectID": "NEWS.html#section-7",
    "href": "NEWS.html#section-7",
    "title": "News",
    "section": "",
    "text": "IMPORTANT BREAKING CHANGE:\nThe package has been renamed to tinyplot. (#22 @grantmcdermott)\nThis package renaming also incorporates the following function changes:\n\nplot2() is replaced by tinyplot() (or its shorthand alias plt()).\npar2() is replaced by tpar().\n\nSo, where you used to write…\nlibrary(plot2)\nplot2(Sepal.Length ~ Petal.Length | Species, iris)\n… you should now write:\nlibrary(tinyplot)\ntinyplot(Sepal.Length ~ Petal.Length | Species, iris)\n\n# Or, use the equivalent shorthand `plt` alias\nplt(Sepal.Length ~ Petal.Length | Species, iris)\nThe package URLs have been updated accordingly:\n\nGitHub: https://github.com/grantmcdermott/tinyplot\nWebsite: https://grantmcdermott.com/tinyplot\nR-universe: https://grantmcdermott.r-universe.dev/tinyplot\n\nMany thanks to everyone who provided thoughtful feedback about this prospective name change, especially @zeileis and @vincentarelbundock for kicking off the discussion, as well as the 100+ participants who voted in the social media poll.\nFor more details about the rational underlying this renaming decision, please see the following GitHub comment, as well as the discussion that preceded it: https://github.com/grantmcdermott/plot2/issues/22#issuecomment-1928472754"
  },
  {
    "objectID": "NEWS.html#section-8",
    "href": "NEWS.html#section-8",
    "title": "News",
    "section": "",
    "text": "Website:\nWe now have a dedicated website! (#80 @vincentarelbundock)\nNew features:\n\nSupport for cex and bg (alias fill) arguments. The latter also permit the “by” convenience keyword similar to lty and pch. This is useful for plotting filled point characters (e.g., pch = 21), where you want a different colour for the fill and border. (#50, #75 @grantmcdermott)\nSupport for filled density plots. (#58 @grantmcdermott)\nThe new add argument allows new plot2 objects to be added to / on top of the existing plot window. (#60 @grantmcdermott)\nSupport for one-sided formulas, e.g. plot2(~ Temp | Month, airquality). (#62 @grantmcdermott and @zeileis)\nSupport for plot2(x, type = \"density\") as an alternative to plot2(density(x)). Works for both the atomic and one-sided formula methods. (#66 @grantmcdermott)\nSupport for “area” type plots as a special case of ribbon plots. (#68 @grantmcdermott)\nPartial matching for palette keywords. (#74 @grantmcdermott)\nplot2 gains a new facet argument for drawing faceted plots. Users can override the default square arrangement by passing the desired number of facet rows or columns to the companion facet.args helper function. Facets can be combined with by grouping, or used on their own. (#83, #91, #94, #96, #101, #103 @grantmcdermott)\nUsers can now control plot2-specific graphical parameters globally via the new par2() function (which is modeled on the base par() function). At the moment only a subset of global parameters, mostly related to legend and facet behaviour, are exposed in par2. But users can expect that more will be added in future releases. (#33, #94 @grantmcdermott)\n\nBug fixes:\n\nY-label correctly prints if a function was used for the atomic plot method, e.g. plot2(rnorm(100). (#52 etiennebacher)\nRibbon plot types are now automatically ordered by the x variable. (#54 @grantmcdermott)\nInterval plots like ribbons, errorbars, and pointranges are now correctly plotted even if a y variable isn’t specified. (#54 @grantmcdermott)\nCorrectly label date-time axes. (#77 @grantmcdermott and @zeileis)\nImproved consistency of legend and facet margins across different plot types and placement, via the new lmar and fmar arguments of par2(). The default legend margin is par2(lmar = c(1,0, 0.1), which means that there is 1.0 line of padding between the legend and the plot region (inside margin) and 0.1 line of padding between the legend and edge of the graphics device (outer margin). Similarly, the default facet padding is par2(fmar = c(1,1,1,1), which means that there is a single line of padding around each side of the individual facets. Users can override these defaults by passing numeric vectors of the appropriate length to par2(). For example, par2(lmar = c(0,0.1) would shrink the inner gap between the legend and plot region to zero, but leave the small outer gap to outside of the graphics device unchanged. (#94 @grantmcdermott)\nFix bug where grid wasn’t auto-expanding correctly for area plots. (#92 @grantmcdermott)"
  },
  {
    "objectID": "NEWS.html#section-9",
    "href": "NEWS.html#section-9",
    "title": "News",
    "section": "",
    "text": "Breaking changes:\n\nColour palettes are now controlled via a single palette argument that unifies the old palette and (deprecated) palette.args arguments. In addition, the default palette for small groups has been changed from “Okabe-Ito” to “R4”. (#31 and #32 @grantmcdermott)\nLegends are now controlled via a single legend argument that unifies the previous (deprecated) legend.position and legend.args arguments. This change also enables several enhancements over the old legend behaviour; see below. (#34 @grantmcdermott)\n\nNew features:\n\nAdd support for the argument log. (#15 @etiennebacher)\nAdd support for grouped density plots. (#18 @grantmcdermott)\nAdd support for (both grouped and non-grouped) “c”, “h”, “s”, and “S” types. (#26 @grantmcdermott)\nBoth the pch and lty arguments now accept a “by” convenience keyword for automatically adjusting plot characters and line types by groups. (#28 @grantmcdermott)\nAdd outside (“!”) placement support for remaining legend keywords, e.g. “top!”, “left!”, “topright!”, etc. Users also gain finer control over many other aspects of the legend via the new unified legend argument, including changing labels, turning of the legend title, and so on. (#34 @grantmcdermott)\nAdd support for \"pointrange\", \"errobar\", and \"ribbon\" plot types. (#35 @vincentarelbundock, #40 and #46 @grantmcdermott)\nSupport grid = TRUE as an alternative to grid = grid(). (#43 @grantmcdermott)\n\nBug fixes:\n\nSetting par(pch=X) globally is now respected. (#20 @grantmcdermott)\nFix x-axis scale/index when y is NULL. (#24 @grantmcdermott)\nSetting a global palette, e.g. palette(\"ggplot2\") is now respected. (#44 @grantmcdermott)"
  },
  {
    "objectID": "NEWS.html#section-10",
    "href": "NEWS.html#section-10",
    "title": "News",
    "section": "",
    "text": "Breaking changes:\n\nLegend defaults have been changed. The default position is now “right!” and drawn without a border, i.e. bty = “n” (#14 by @grantmcdermott).\n\nNew features:\n\nAllow users to specify different pch, lty, and col types per group (#5 and #11 by @vincentarelbundock).\n\nBug fixes:\n\nAdding further elements to plot2 now works (#13 by @grantmcdermott, thanks @karoliskoncevicius for reporting).\n\nInternals:\n\nBetter formula parsing for plot2.formula (#8 by @zeileis).\nUnit testing scaffolding based on tinysnaphot (#11 by @vincent).\n\nProject:\n\n@vincentarelbundock and @zeileis have joined the project as core contributors. 🎉"
  },
  {
    "objectID": "NEWS.html#section-11",
    "href": "NEWS.html#section-11",
    "title": "News",
    "section": "",
    "text": "Initial release on GitHub."
  },
  {
    "objectID": "man/type_glm.html",
    "href": "man/type_glm.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting a generalized model fit. Arguments are passed to glm.\n\n\n\ntype_glm(family = \"gaussian\", se = TRUE, level = 0.95, type = \"response\")\n\n\n\n\n\n\n\nfamily\n\n\na description of the error distribution and link function to be used in the model. For glm this can be a character string naming a family function, a family function or the result of a call to a family function. For glm.fit only the third option is supported. (See family for details of family functions.)\n\n\n\n\nse\n\n\nlogical. If TRUE, confidence intervals are drawn.\n\n\n\n\nlevel\n\n\nthe confidence level required.\n\n\n\n\ntype\n\n\ncharacter, partial matching allowed. Type of weights to extract from the fitted model object. Can be abbreviated.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"glm\" type convenience string\ntinyplot(am ~ mpg, data = mtcars, type = \"glm\")\n\n\n\n\n\n\n\n# Use `type_glm()` to pass extra arguments for customization\ntinyplot(am ~ mpg, data = mtcars, type = type_glm(family = \"binomial\"))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Models",
      "type_glm"
    ]
  },
  {
    "objectID": "man/type_glm.html#generalized-linear-model-plot-type",
    "href": "man/type_glm.html#generalized-linear-model-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting a generalized model fit. Arguments are passed to glm.\n\n\n\ntype_glm(family = \"gaussian\", se = TRUE, level = 0.95, type = \"response\")\n\n\n\n\n\n\n\nfamily\n\n\na description of the error distribution and link function to be used in the model. For glm this can be a character string naming a family function, a family function or the result of a call to a family function. For glm.fit only the third option is supported. (See family for details of family functions.)\n\n\n\n\nse\n\n\nlogical. If TRUE, confidence intervals are drawn.\n\n\n\n\nlevel\n\n\nthe confidence level required.\n\n\n\n\ntype\n\n\ncharacter, partial matching allowed. Type of weights to extract from the fitted model object. Can be abbreviated.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"glm\" type convenience string\ntinyplot(am ~ mpg, data = mtcars, type = \"glm\")\n\n\n\n\n\n\n\n# Use `type_glm()` to pass extra arguments for customization\ntinyplot(am ~ mpg, data = mtcars, type = type_glm(family = \"binomial\"))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Models",
      "type_glm"
    ]
  },
  {
    "objectID": "man/type_ribbon.html",
    "href": "man/type_ribbon.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type constructor functions for producing polygon ribbons, which define a y interval (usually spanning from ymin to ymax) for each x value. Area plots are a special case of ribbon plot where ymin is set to 0 and ymax is set to y.\n\n\n\ntype_area(alpha = NULL)\n\ntype_ribbon(alpha = NULL)\n\n\n\n\n\n\n\nalpha\n\n\nnumeric value between 0 and 1 specifying the opacity of ribbon shading If no alpha value is provided, then will default to tpar(“ribbon.alpha”) (i.e., probably 0.2 unless this has been overridden by the user in their global settings.)\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\nx = 1:100/10\ny = sin(x)\n\n#\n## Ribbon plots\n\n# \"ribbon\" convenience string\ntinyplot(x = x, ymin = y-1, ymax = y+1, type = \"ribbon\")\n\n\n\n\n\n\n\n# Same result with type_ribbon()\ntinyplot(x = x, ymin = y-1, ymax = y+1, type = type_ribbon())\n\n# y will be added as a line if it is specified\ntinyplot(x = x, y = y, ymin = y-1, ymax = y+1, type = \"ribbon\")\n\n\n\n\n\n\n\n#\n## Area plots\n  \n# \"area\" type convenience string\ntinyplot(x, y, type = \"area\")\n\n\n\n\n\n\n\n# Same result with type_area()\ntinyplot(x, y, type = type_area())\n\n# Area plots are often used for time series charts\ntinyplot(AirPassengers, type = \"area\")",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_area"
    ]
  },
  {
    "objectID": "man/type_ribbon.html#ribbon-and-area-plot-types",
    "href": "man/type_ribbon.html#ribbon-and-area-plot-types",
    "title": "tinyplot",
    "section": "",
    "text": "Type constructor functions for producing polygon ribbons, which define a y interval (usually spanning from ymin to ymax) for each x value. Area plots are a special case of ribbon plot where ymin is set to 0 and ymax is set to y.\n\n\n\ntype_area(alpha = NULL)\n\ntype_ribbon(alpha = NULL)\n\n\n\n\n\n\n\nalpha\n\n\nnumeric value between 0 and 1 specifying the opacity of ribbon shading If no alpha value is provided, then will default to tpar(“ribbon.alpha”) (i.e., probably 0.2 unless this has been overridden by the user in their global settings.)\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\nx = 1:100/10\ny = sin(x)\n\n#\n## Ribbon plots\n\n# \"ribbon\" convenience string\ntinyplot(x = x, ymin = y-1, ymax = y+1, type = \"ribbon\")\n\n\n\n\n\n\n\n# Same result with type_ribbon()\ntinyplot(x = x, ymin = y-1, ymax = y+1, type = type_ribbon())\n\n# y will be added as a line if it is specified\ntinyplot(x = x, y = y, ymin = y-1, ymax = y+1, type = \"ribbon\")\n\n\n\n\n\n\n\n#\n## Area plots\n  \n# \"area\" type convenience string\ntinyplot(x, y, type = \"area\")\n\n\n\n\n\n\n\n# Same result with type_area()\ntinyplot(x, y, type = type_area())\n\n# Area plots are often used for time series charts\ntinyplot(AirPassengers, type = \"area\")",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_area"
    ]
  },
  {
    "objectID": "man/type_histogram.html",
    "href": "man/type_histogram.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for histogram plots. type_hist is an alias for type_histogram.\n\n\n\ntype_histogram(\n  breaks = \"Sturges\",\n  freq = NULL,\n  right = TRUE,\n  free.breaks = FALSE,\n  drop.zeros = TRUE\n)\n\ntype_hist(\n  breaks = \"Sturges\",\n  freq = NULL,\n  right = TRUE,\n  free.breaks = FALSE,\n  drop.zeros = TRUE\n)\n\n\n\n\n\n\n\nbreaks\n\n\nPassed to hist. One of:\n\n\na vector giving the breakpoints between histogram cells,\n\n\na function to compute the vector of breakpoints,\n\n\na single number giving the number of cells for the histogram,\n\n\na character string naming an algorithm to compute the number of cells (see ‘Details’ of hist),\n\n\na function to compute the number of cells. In the last three cases the number is a suggestion only; as the breakpoints will be set to pretty values, the number is limited to 1e6 (with a warning if it was larger). If breaks is a function, the x vector is supplied to it as the only argument (and the number of breaks is only limited by the amount of available memory).\n\n\n\n\n\n\nfreq\n\n\nlogical; if TRUE, the histogram graphic is a representation of frequencies, the counts component of the result; if FALSE, probability densities, component density, are plotted (so that the histogram has a total area of one). Defaults to TRUE if and only if breaks are equidistant (and probability is not specified).\n\n\n\n\nright\n\n\nlogical; if TRUE, the histogram cells are right-closed (left open) intervals.\n\n\n\n\nfree.breaks\n\n\nLogical indicating whether the breakpoints should be computed separately for each group or facet? Default is FALSE, meaning that the breakpoints are computed from the full dataset; thus ensuring common bin widths across each group/facet. Can also use free as an acceptable argument alias. Ignored if there are no groups and/or facets.\n\n\n\n\ndrop.zeros\n\n\nLogical indicating whether bins with zero counts should be dropped before plotting. Default is TRUE. Note that switching to FALSE may interfere with faceted plot behaviour if facet.args = list(free), since the x variable is effectively recorded over the full range of the x-axis (even if it does not extend over this range for every group).\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"histogram\"/\"hist\" type convenience string(s)\ntinyplot(Nile, type = \"histogram\")\n\n\n\n\n\n\n\n# Use `type_histogram()` to pass extra arguments for customization\ntinyplot(Nile, type = type_histogram(breaks = 30))\n\n\n\n\n\n\n\ntinyplot(Nile, type = type_histogram(breaks = 30, freq = FALSE))\n\n\n\n\n\n\n\n# etc.\n\n# Grouped histogram example\ntinyplot(\n    ~Petal.Width | Species,\n    type = \"histogram\",\n    data = iris\n)\n\n\n\n\n\n\n\n# Faceted version\ntinyplot(\n    ~Petal.Width, facet = ~Species,\n    type = \"histogram\",\n    data = iris\n)\n\n\n\n\n\n\n\n# For visualizing faceted histograms across varying scales, you may also wish\n# to impose free histogram breaks too (i.e., calculate breaks separately for\n# each group). Compare:\n\n# free facet scales + shared histogram breaks, versus...\ntinyplot(\n    ~Petal.Width, facet = ~Species,\n    facet.args = list(free = TRUE),\n    type = type_histogram(),\n    data = iris\n)\n\n\n\n\n\n\n\n# ... free facet scales + free histogram breaks\ntinyplot(\n    ~Petal.Width, facet = ~Species,\n    facet.args = list(free = TRUE),\n    type = type_histogram(free = TRUE),\n    data = iris\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_histogram"
    ]
  },
  {
    "objectID": "man/type_histogram.html#histogram-plot-type",
    "href": "man/type_histogram.html#histogram-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for histogram plots. type_hist is an alias for type_histogram.\n\n\n\ntype_histogram(\n  breaks = \"Sturges\",\n  freq = NULL,\n  right = TRUE,\n  free.breaks = FALSE,\n  drop.zeros = TRUE\n)\n\ntype_hist(\n  breaks = \"Sturges\",\n  freq = NULL,\n  right = TRUE,\n  free.breaks = FALSE,\n  drop.zeros = TRUE\n)\n\n\n\n\n\n\n\nbreaks\n\n\nPassed to hist. One of:\n\n\na vector giving the breakpoints between histogram cells,\n\n\na function to compute the vector of breakpoints,\n\n\na single number giving the number of cells for the histogram,\n\n\na character string naming an algorithm to compute the number of cells (see ‘Details’ of hist),\n\n\na function to compute the number of cells. In the last three cases the number is a suggestion only; as the breakpoints will be set to pretty values, the number is limited to 1e6 (with a warning if it was larger). If breaks is a function, the x vector is supplied to it as the only argument (and the number of breaks is only limited by the amount of available memory).\n\n\n\n\n\n\nfreq\n\n\nlogical; if TRUE, the histogram graphic is a representation of frequencies, the counts component of the result; if FALSE, probability densities, component density, are plotted (so that the histogram has a total area of one). Defaults to TRUE if and only if breaks are equidistant (and probability is not specified).\n\n\n\n\nright\n\n\nlogical; if TRUE, the histogram cells are right-closed (left open) intervals.\n\n\n\n\nfree.breaks\n\n\nLogical indicating whether the breakpoints should be computed separately for each group or facet? Default is FALSE, meaning that the breakpoints are computed from the full dataset; thus ensuring common bin widths across each group/facet. Can also use free as an acceptable argument alias. Ignored if there are no groups and/or facets.\n\n\n\n\ndrop.zeros\n\n\nLogical indicating whether bins with zero counts should be dropped before plotting. Default is TRUE. Note that switching to FALSE may interfere with faceted plot behaviour if facet.args = list(free), since the x variable is effectively recorded over the full range of the x-axis (even if it does not extend over this range for every group).\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"histogram\"/\"hist\" type convenience string(s)\ntinyplot(Nile, type = \"histogram\")\n\n\n\n\n\n\n\n# Use `type_histogram()` to pass extra arguments for customization\ntinyplot(Nile, type = type_histogram(breaks = 30))\n\n\n\n\n\n\n\ntinyplot(Nile, type = type_histogram(breaks = 30, freq = FALSE))\n\n\n\n\n\n\n\n# etc.\n\n# Grouped histogram example\ntinyplot(\n    ~Petal.Width | Species,\n    type = \"histogram\",\n    data = iris\n)\n\n\n\n\n\n\n\n# Faceted version\ntinyplot(\n    ~Petal.Width, facet = ~Species,\n    type = \"histogram\",\n    data = iris\n)\n\n\n\n\n\n\n\n# For visualizing faceted histograms across varying scales, you may also wish\n# to impose free histogram breaks too (i.e., calculate breaks separately for\n# each group). Compare:\n\n# free facet scales + shared histogram breaks, versus...\ntinyplot(\n    ~Petal.Width, facet = ~Species,\n    facet.args = list(free = TRUE),\n    type = type_histogram(),\n    data = iris\n)\n\n\n\n\n\n\n\n# ... free facet scales + free histogram breaks\ntinyplot(\n    ~Petal.Width, facet = ~Species,\n    facet.args = list(free = TRUE),\n    type = type_histogram(free = TRUE),\n    data = iris\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_histogram"
    ]
  },
  {
    "objectID": "man/type_function.html",
    "href": "man/type_function.html",
    "title": "tinyplot",
    "section": "",
    "text": "Plot a function\n\n\n\ntype_function(fun = dnorm, args = list(), n = 101, ...)\n\n\n\n\n\n\n\nfun\n\n\nFunction of x to plot. Defaults to dnorm.\n\n\n\n\nargs\n\n\nList of additional arguments to be passed to fun.\n\n\n\n\nn\n\n\nNumber of points to interpolate on the x axis.\n\n\n\n\n…\n\n\nAdditional arguments are passed to the lines() function, ex: type=“p”, col=“pink”.\n\n\n\n\n\n\nWhen using type_function() in a tinyplot() call, the x value indicates the range of values to plot on the x-axis.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# Plot the normal density (default function)\ntinyplot(x = -4:4, type = \"function\")\n\n\n\n\n\n\n\n# tinyplot(x = -4:4, type = type_function()) # same\n\n# Customize by passing explicit arguments to your function\ntinyplot(x = -1:10, type = type_function(\n  fun = dnorm, args = list(mean = 3)\n))\n\n\n\n\n\n\n\n# Additional arguments are passed to the `lines()` function.\ntinyplot(x = -4:4, type = type_function(\n  fun = dnorm,\n  col = \"pink\", type = \"p\", pch = 3\n))\n\n\n\n\n\n\n\n# Custom function example\n## (Here using `function(x)`, but you could also use the shorter `\\(x)`\n## anonymous function syntax introduced in R 4.1.0)\ntinyplot(x = -4:4, type = type_function(fun = function(x) 0.5 * exp(-abs(x))))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Functions",
      "type_function"
    ]
  },
  {
    "objectID": "man/type_function.html#plot-a-function",
    "href": "man/type_function.html#plot-a-function",
    "title": "tinyplot",
    "section": "",
    "text": "Plot a function\n\n\n\ntype_function(fun = dnorm, args = list(), n = 101, ...)\n\n\n\n\n\n\n\nfun\n\n\nFunction of x to plot. Defaults to dnorm.\n\n\n\n\nargs\n\n\nList of additional arguments to be passed to fun.\n\n\n\n\nn\n\n\nNumber of points to interpolate on the x axis.\n\n\n\n\n…\n\n\nAdditional arguments are passed to the lines() function, ex: type=“p”, col=“pink”.\n\n\n\n\n\n\nWhen using type_function() in a tinyplot() call, the x value indicates the range of values to plot on the x-axis.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# Plot the normal density (default function)\ntinyplot(x = -4:4, type = \"function\")\n\n\n\n\n\n\n\n# tinyplot(x = -4:4, type = type_function()) # same\n\n# Customize by passing explicit arguments to your function\ntinyplot(x = -1:10, type = type_function(\n  fun = dnorm, args = list(mean = 3)\n))\n\n\n\n\n\n\n\n# Additional arguments are passed to the `lines()` function.\ntinyplot(x = -4:4, type = type_function(\n  fun = dnorm,\n  col = \"pink\", type = \"p\", pch = 3\n))\n\n\n\n\n\n\n\n# Custom function example\n## (Here using `function(x)`, but you could also use the shorter `\\(x)`\n## anonymous function syntax introduced in R 4.1.0)\ntinyplot(x = -4:4, type = type_function(fun = function(x) 0.5 * exp(-abs(x))))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Functions",
      "type_function"
    ]
  },
  {
    "objectID": "man/type_errorbar.html",
    "href": "man/type_errorbar.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function(s) for producing error bar and pointrange plots.\n\n\n\ntype_errorbar(length = 0.05)\n\ntype_pointrange()\n\n\n\n\n\n\n\nlength\n\n\nlength of the edges of the arrow head (in inches).\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\nmod = lm(mpg ~ wt * factor(am), mtcars)\ncoefs = data.frame(names(coef(mod)), coef(mod), confint(mod))\ncolnames(coefs) = c(\"term\", \"est\", \"lwr\", \"upr\")\n\nop = tpar(pch = 19)\n \n# \"errorbar\" and \"pointrange\" type convenience strings\ntinyplot(est ~ term, ymin = lwr, ymax = upr, data = coefs, type = \"errorbar\")\n\n\n\n\n\n\n\ntinyplot(est ~ term, ymin = lwr, ymax = upr, data = coefs, type = \"pointrange\")\n\n\n\n\n\n\n\n# Use `type_errorbar()` to pass extra arguments for customization\ntinyplot(est ~ term, ymin = lwr, ymax = upr, data = coefs, type = type_errorbar(length = 0.2))\n\n\n\n\n\n\n\ntpar(op)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_errorbar"
    ]
  },
  {
    "objectID": "man/type_errorbar.html#error-bar-and-pointrange-plot-types",
    "href": "man/type_errorbar.html#error-bar-and-pointrange-plot-types",
    "title": "tinyplot",
    "section": "",
    "text": "Type function(s) for producing error bar and pointrange plots.\n\n\n\ntype_errorbar(length = 0.05)\n\ntype_pointrange()\n\n\n\n\n\n\n\nlength\n\n\nlength of the edges of the arrow head (in inches).\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\nmod = lm(mpg ~ wt * factor(am), mtcars)\ncoefs = data.frame(names(coef(mod)), coef(mod), confint(mod))\ncolnames(coefs) = c(\"term\", \"est\", \"lwr\", \"upr\")\n\nop = tpar(pch = 19)\n \n# \"errorbar\" and \"pointrange\" type convenience strings\ntinyplot(est ~ term, ymin = lwr, ymax = upr, data = coefs, type = \"errorbar\")\n\n\n\n\n\n\n\ntinyplot(est ~ term, ymin = lwr, ymax = upr, data = coefs, type = \"pointrange\")\n\n\n\n\n\n\n\n# Use `type_errorbar()` to pass extra arguments for customization\ntinyplot(est ~ term, ymin = lwr, ymax = upr, data = coefs, type = type_errorbar(length = 0.2))\n\n\n\n\n\n\n\ntpar(op)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_errorbar"
    ]
  },
  {
    "objectID": "man/type_segments.html",
    "href": "man/type_segments.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting line segments.\n\n\n\ntype_segments()\n\n\n\n\nContrary to base segments, line segments in tinyplot must be specified using the xmin, ymin,xmax, and ymax arguments.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"segments\" type convenience character string\ntinyplot(\n  xmin = c(0,.1), ymin = c(.2,1), xmax = c(1,.9), ymax = c(.75,0),\n  type = \"segments\"\n)\n\n\n\n\n\n\n\n# Same result with type_segments()\ntinyplot(\n  xmin = c(0,.1), ymin = c(.2,1), xmax = c(1,.9), ymax = c(.75,0),\n  type = type_segments()\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_segments"
    ]
  },
  {
    "objectID": "man/type_segments.html#line-segments-plot-type",
    "href": "man/type_segments.html#line-segments-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting line segments.\n\n\n\ntype_segments()\n\n\n\n\nContrary to base segments, line segments in tinyplot must be specified using the xmin, ymin,xmax, and ymax arguments.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"segments\" type convenience character string\ntinyplot(\n  xmin = c(0,.1), ymin = c(.2,1), xmax = c(1,.9), ymax = c(.75,0),\n  type = \"segments\"\n)\n\n\n\n\n\n\n\n# Same result with type_segments()\ntinyplot(\n  xmin = c(0,.1), ymin = c(.2,1), xmax = c(1,.9), ymax = c(.75,0),\n  type = type_segments()\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_segments"
    ]
  },
  {
    "objectID": "man/type_spline.html",
    "href": "man/type_spline.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting a cubic (or Hermite) spline interpolation. Arguments are passed to spline; see this latter function for default argument values.\n\n\n\ntype_spline(\n  n = NULL,\n  method = \"fmm\",\n  xmin = NULL,\n  xmax = NULL,\n  xout = NULL,\n  ties = mean\n)\n\n\n\n\n\n\n\nn\n\n\nif xout is left unspecified, interpolation takes place at n equally spaced points spanning the interval [xmin, xmax].\n\n\n\n\nmethod\n\n\nspecifies the type of spline to be used. Possible values are “fmm”, “natural”, “periodic”, “monoH.FC” and “hyman”. Can be abbreviated.\n\n\n\n\nxmin, xmax\n\n\nleft-hand and right-hand endpoint of the interpolation interval (when xout is unspecified).\n\n\n\n\nxout\n\n\nan optional set of values specifying where interpolation is to take place.\n\n\n\n\nties\n\n\nhandling of tied x values. The string “ordered” or a function (or the name of a function) taking a single vector argument and returning a single number or a length-2 list of both, see approx and its ‘Details’ section, and the example below.\n\n\n\n\n\n\nThe inputs can contain missing values which are deleted, so at least one complete (x, y) pair is required. If method = “fmm”, the spline used is that of Forsythe, Malcolm and Moler (an exact cubic is fitted through the four points at each end of the data, and this is used to determine the end conditions). Natural splines are used when method = “natural”, and periodic splines when method = “periodic”.\nThe method “monoH.FC” computes a monotone Hermite spline according to the method of Fritsch and Carlson. It does so by determining slopes such that the Hermite spline, determined by \\((x_i,y_i,m_i)\\), is monotone (increasing or decreasing) iff the data are.\nMethod “hyman” computes a monotone cubic spline using Hyman filtering of an method = “fmm” fit for strictly monotonic inputs.\nThese interpolation splines can also be used for extrapolation, that is prediction at points outside the range of x. Extrapolation makes little sense for method = “fmm”; for natural splines it is linear using the slope of the interpolating curve at the nearest data point.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"spline\" type convenience string\ntinyplot(dist ~ speed, data = cars, type = \"spline\")\n\n# Use `type_spline()` to pass extra arguments for customization\ntinyplot(dist ~ speed, data = cars, type = type_spline(method = \"natural\", n = 25),\n    add = TRUE, lty = 2)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Models",
      "type_spline"
    ]
  },
  {
    "objectID": "man/type_spline.html#spline-plot-type",
    "href": "man/type_spline.html#spline-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting a cubic (or Hermite) spline interpolation. Arguments are passed to spline; see this latter function for default argument values.\n\n\n\ntype_spline(\n  n = NULL,\n  method = \"fmm\",\n  xmin = NULL,\n  xmax = NULL,\n  xout = NULL,\n  ties = mean\n)\n\n\n\n\n\n\n\nn\n\n\nif xout is left unspecified, interpolation takes place at n equally spaced points spanning the interval [xmin, xmax].\n\n\n\n\nmethod\n\n\nspecifies the type of spline to be used. Possible values are “fmm”, “natural”, “periodic”, “monoH.FC” and “hyman”. Can be abbreviated.\n\n\n\n\nxmin, xmax\n\n\nleft-hand and right-hand endpoint of the interpolation interval (when xout is unspecified).\n\n\n\n\nxout\n\n\nan optional set of values specifying where interpolation is to take place.\n\n\n\n\nties\n\n\nhandling of tied x values. The string “ordered” or a function (or the name of a function) taking a single vector argument and returning a single number or a length-2 list of both, see approx and its ‘Details’ section, and the example below.\n\n\n\n\n\n\nThe inputs can contain missing values which are deleted, so at least one complete (x, y) pair is required. If method = “fmm”, the spline used is that of Forsythe, Malcolm and Moler (an exact cubic is fitted through the four points at each end of the data, and this is used to determine the end conditions). Natural splines are used when method = “natural”, and periodic splines when method = “periodic”.\nThe method “monoH.FC” computes a monotone Hermite spline according to the method of Fritsch and Carlson. It does so by determining slopes such that the Hermite spline, determined by \\((x_i,y_i,m_i)\\), is monotone (increasing or decreasing) iff the data are.\nMethod “hyman” computes a monotone cubic spline using Hyman filtering of an method = “fmm” fit for strictly monotonic inputs.\nThese interpolation splines can also be used for extrapolation, that is prediction at points outside the range of x. Extrapolation makes little sense for method = “fmm”; for natural splines it is linear using the slope of the interpolating curve at the nearest data point.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"spline\" type convenience string\ntinyplot(dist ~ speed, data = cars, type = \"spline\")\n\n# Use `type_spline()` to pass extra arguments for customization\ntinyplot(dist ~ speed, data = cars, type = type_spline(method = \"natural\", n = 25),\n    add = TRUE, lty = 2)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Models",
      "type_spline"
    ]
  },
  {
    "objectID": "man/type_jitter.html",
    "href": "man/type_jitter.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting jittered points. Arguments are passed to jitter.\n\n\n\ntype_jitter(factor = 1, amount = NULL)\n\n\n\n\n\n\n\nfactor\n\n\nnumeric.\n\n\n\n\namount\n\n\nnumeric; if positive, used as amount (see below), otherwise, if = 0 the default is factor * z/50.\nDefault (NULL): factor * d/5 where d is about the smallest difference between x values.\n\n\n\n\n\n\nThe result, say r, is r &lt;- x + runif(n, -a, a) where n &lt;- length(x) and a is the amount argument (if specified).\nLet z &lt;- max(x) - min(x) (assuming the usual case). The amount a to be added is either provided as positive argument amount or otherwise computed from z, as follows:\nIf amount == 0, we set a &lt;- factor * z/50 (same as S).\nIf amount is NULL (default), we set a &lt;- factor * d/5 where d is the smallest difference between adjacent unique (apart from fuzz) x values.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"jitter\" type convenience string\ntinyplot(Sepal.Length ~ Species, data = iris, type = \"jitter\")\n\n\n\n\n\n\n\n# Use `type_jitter()` to pass extra arguments for customization\ntinyplot(Sepal.Length ~ Species, data = iris, type = type_jitter(factor = 0.5))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_jitter"
    ]
  },
  {
    "objectID": "man/type_jitter.html#jittered-points-plot-type",
    "href": "man/type_jitter.html#jittered-points-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting jittered points. Arguments are passed to jitter.\n\n\n\ntype_jitter(factor = 1, amount = NULL)\n\n\n\n\n\n\n\nfactor\n\n\nnumeric.\n\n\n\n\namount\n\n\nnumeric; if positive, used as amount (see below), otherwise, if = 0 the default is factor * z/50.\nDefault (NULL): factor * d/5 where d is about the smallest difference between x values.\n\n\n\n\n\n\nThe result, say r, is r &lt;- x + runif(n, -a, a) where n &lt;- length(x) and a is the amount argument (if specified).\nLet z &lt;- max(x) - min(x) (assuming the usual case). The amount a to be added is either provided as positive argument amount or otherwise computed from z, as follows:\nIf amount == 0, we set a &lt;- factor * z/50 (same as S).\nIf amount is NULL (default), we set a &lt;- factor * d/5 where d is the smallest difference between adjacent unique (apart from fuzz) x values.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"jitter\" type convenience string\ntinyplot(Sepal.Length ~ Species, data = iris, type = \"jitter\")\n\n\n\n\n\n\n\n# Use `type_jitter()` to pass extra arguments for customization\ntinyplot(Sepal.Length ~ Species, data = iris, type = type_jitter(factor = 0.5))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_jitter"
    ]
  },
  {
    "objectID": "man/draw_legend.html",
    "href": "man/draw_legend.html",
    "title": "tinyplot",
    "section": "",
    "text": "Function used to calculate the placement of (including outside the plotting area) and drawing of legend.\n\n\n\ndraw_legend(\n  legend = NULL,\n  legend_args = NULL,\n  by_dep = NULL,\n  lgnd_labs = NULL,\n  type = NULL,\n  pch = NULL,\n  lty = NULL,\n  lwd = NULL,\n  col = NULL,\n  bg = NULL,\n  cex = NULL,\n  gradient = FALSE,\n  lmar = NULL,\n  has_sub = FALSE,\n  new_plot = TRUE,\n  draw = TRUE\n)\n\n\n\n\n\n\n\nlegend\n\n\nLegend placement keyword or list, passed down from tinyplot.\n\n\n\n\nlegend_args\n\n\nAdditional legend arguments to be passed to legend.\n\n\n\n\nby_dep\n\n\nThe (deparsed) \"by\" grouping variable name.\n\n\n\n\nlgnd_labs\n\n\nThe labels passed to legend(legend = …).\n\n\n\n\ntype\n\n\nPlotting type(s), passed down from tinyplot.\n\n\n\n\npch\n\n\nPlotting character(s), passed down from tinyplot.\n\n\n\n\nlty\n\n\nPlotting linetype(s), passed down from tinyplot.\n\n\n\n\nlwd\n\n\nPlotting line width(s), passed down from tinyplot.\n\n\n\n\ncol\n\n\nPlotting colour(s), passed down from tinyplot.\n\n\n\n\nbg\n\n\nPlotting character background fill colour(s), passed down from tinyplot.\n\n\n\n\ncex\n\n\nPlotting character expansion(s), passed down from tinyplot.\n\n\n\n\ngradient\n\n\nLogical indicating whether a continuous gradient swatch should be used to represent the colors.\n\n\n\n\nlmar\n\n\nLegend margins (in lines). Should be a numeric vector of the form c(inner, outer), where the first number represents the \"inner\" margin between the legend and the plot, and the second number represents the \"outer\" margin between the legend and edge of the graphics device. If no explicit value is provided by the user, then reverts back to tpar(“lmar”) for which the default values are c(1.0, 0.1).\n\n\n\n\nhas_sub\n\n\nLogical. Does the plot have a sub-caption. Only used if keyword position is \"bottom!\", in which case we need to bump the legend margin a bit further.\n\n\n\n\nnew_plot\n\n\nLogical. Should we be calling plot.new internally?\n\n\n\n\ndraw\n\n\nLogical. If FALSE, no legend is drawn but the sizes are returned. Note that a new (blank) plot frame will still need to be started in order to perform the calculations.\n\n\n\n\n\n\nNo return value, called for side effect of producing a(n empty) plot with a legend in the margin.\n\n\n\n\nlibrary(\"tinyplot\")\n\noldmar = par(\"mar\")\n\ndraw_legend(\n  legend = \"right!\", ## default (other options incl, \"left(!)\", \"\"bottom(!)\", etc.)\n  legend_args = list(title = \"Key\", bty = \"o\"),\n  lgnd_labs = c(\"foo\", \"bar\"),\n  type = \"p\",\n  pch = 21:22,\n  col = 1:2\n)\n\n# The legend is placed in the outer margin...\nbox(\"figure\", col = \"cyan\", lty = 4)\n# ... and the plot is proportionally adjusted against the edge of this\n# margin.\nbox(\"plot\")\n# You can add regular plot objects per normal now\nplot.window(xlim = c(1,10), ylim = c(1,10))\npoints(1:10)\npoints(10:1, pch = 22, col = \"red\")\naxis(1); axis(2)\n\n\n\n\n\n\n\n# etc.\n\n# Important: A side effect of draw_legend is that the inner margins have been\n# adjusted. (Here: The right margin, since we called \"right!\" above.)\npar(\"mar\")\n\n[1] 5.1 4.1 4.1 0.0\n\n# To reset you should call `dev.off()` or just reset manually.\npar(mar = oldmar)\n\n# Note that the inner and outer margin of the legend itself can be set via\n# the `lmar` argument. (This can also be set globally via\n# `tpar(lmar = c(inner, outer))`.)\ndraw_legend(\n  legend_args = list(title = \"Key\", bty = \"o\"),\n  lgnd_labs = c(\"foo\", \"bar\"),\n  type = \"p\",\n  pch = 21:22,\n  col = 1:2,\n  lmar = c(0, 0.1) ## set inner margin to zero\n)\nbox(\"figure\", col = \"cyan\", lty = 4)\n\n\n\n\n\n\n\npar(mar = oldmar)\n\n# Continuous (gradient) legends are also supported\ndraw_legend(\n  legend = \"right!\",\n  legend_args = list(title = \"Key\"),\n  lgnd_labs = LETTERS[1:5],\n  col = hcl.colors(5),\n  gradient = TRUE ## enable gradient legend\n)\n\n\n\n\n\n\n\npar(mar = oldmar)",
    "crumbs": [
      "Reference",
      "Internals",
      "draw_legend"
    ]
  },
  {
    "objectID": "man/draw_legend.html#calculate-placement-of-legend-and-draw-it",
    "href": "man/draw_legend.html#calculate-placement-of-legend-and-draw-it",
    "title": "tinyplot",
    "section": "",
    "text": "Function used to calculate the placement of (including outside the plotting area) and drawing of legend.\n\n\n\ndraw_legend(\n  legend = NULL,\n  legend_args = NULL,\n  by_dep = NULL,\n  lgnd_labs = NULL,\n  type = NULL,\n  pch = NULL,\n  lty = NULL,\n  lwd = NULL,\n  col = NULL,\n  bg = NULL,\n  cex = NULL,\n  gradient = FALSE,\n  lmar = NULL,\n  has_sub = FALSE,\n  new_plot = TRUE,\n  draw = TRUE\n)\n\n\n\n\n\n\n\nlegend\n\n\nLegend placement keyword or list, passed down from tinyplot.\n\n\n\n\nlegend_args\n\n\nAdditional legend arguments to be passed to legend.\n\n\n\n\nby_dep\n\n\nThe (deparsed) \"by\" grouping variable name.\n\n\n\n\nlgnd_labs\n\n\nThe labels passed to legend(legend = …).\n\n\n\n\ntype\n\n\nPlotting type(s), passed down from tinyplot.\n\n\n\n\npch\n\n\nPlotting character(s), passed down from tinyplot.\n\n\n\n\nlty\n\n\nPlotting linetype(s), passed down from tinyplot.\n\n\n\n\nlwd\n\n\nPlotting line width(s), passed down from tinyplot.\n\n\n\n\ncol\n\n\nPlotting colour(s), passed down from tinyplot.\n\n\n\n\nbg\n\n\nPlotting character background fill colour(s), passed down from tinyplot.\n\n\n\n\ncex\n\n\nPlotting character expansion(s), passed down from tinyplot.\n\n\n\n\ngradient\n\n\nLogical indicating whether a continuous gradient swatch should be used to represent the colors.\n\n\n\n\nlmar\n\n\nLegend margins (in lines). Should be a numeric vector of the form c(inner, outer), where the first number represents the \"inner\" margin between the legend and the plot, and the second number represents the \"outer\" margin between the legend and edge of the graphics device. If no explicit value is provided by the user, then reverts back to tpar(“lmar”) for which the default values are c(1.0, 0.1).\n\n\n\n\nhas_sub\n\n\nLogical. Does the plot have a sub-caption. Only used if keyword position is \"bottom!\", in which case we need to bump the legend margin a bit further.\n\n\n\n\nnew_plot\n\n\nLogical. Should we be calling plot.new internally?\n\n\n\n\ndraw\n\n\nLogical. If FALSE, no legend is drawn but the sizes are returned. Note that a new (blank) plot frame will still need to be started in order to perform the calculations.\n\n\n\n\n\n\nNo return value, called for side effect of producing a(n empty) plot with a legend in the margin.\n\n\n\n\nlibrary(\"tinyplot\")\n\noldmar = par(\"mar\")\n\ndraw_legend(\n  legend = \"right!\", ## default (other options incl, \"left(!)\", \"\"bottom(!)\", etc.)\n  legend_args = list(title = \"Key\", bty = \"o\"),\n  lgnd_labs = c(\"foo\", \"bar\"),\n  type = \"p\",\n  pch = 21:22,\n  col = 1:2\n)\n\n# The legend is placed in the outer margin...\nbox(\"figure\", col = \"cyan\", lty = 4)\n# ... and the plot is proportionally adjusted against the edge of this\n# margin.\nbox(\"plot\")\n# You can add regular plot objects per normal now\nplot.window(xlim = c(1,10), ylim = c(1,10))\npoints(1:10)\npoints(10:1, pch = 22, col = \"red\")\naxis(1); axis(2)\n\n\n\n\n\n\n\n# etc.\n\n# Important: A side effect of draw_legend is that the inner margins have been\n# adjusted. (Here: The right margin, since we called \"right!\" above.)\npar(\"mar\")\n\n[1] 5.1 4.1 4.1 0.0\n\n# To reset you should call `dev.off()` or just reset manually.\npar(mar = oldmar)\n\n# Note that the inner and outer margin of the legend itself can be set via\n# the `lmar` argument. (This can also be set globally via\n# `tpar(lmar = c(inner, outer))`.)\ndraw_legend(\n  legend_args = list(title = \"Key\", bty = \"o\"),\n  lgnd_labs = c(\"foo\", \"bar\"),\n  type = \"p\",\n  pch = 21:22,\n  col = 1:2,\n  lmar = c(0, 0.1) ## set inner margin to zero\n)\nbox(\"figure\", col = \"cyan\", lty = 4)\n\n\n\n\n\n\n\npar(mar = oldmar)\n\n# Continuous (gradient) legends are also supported\ndraw_legend(\n  legend = \"right!\",\n  legend_args = list(title = \"Key\"),\n  lgnd_labs = LETTERS[1:5],\n  col = hcl.colors(5),\n  gradient = TRUE ## enable gradient legend\n)\n\n\n\n\n\n\n\npar(mar = oldmar)",
    "crumbs": [
      "Reference",
      "Internals",
      "draw_legend"
    ]
  },
  {
    "objectID": "man/tinyplot_add.html",
    "href": "man/tinyplot_add.html",
    "title": "tinyplot",
    "section": "",
    "text": "This convenience function grabs the preceding tinyplot call and updates it with any new arguments that have been explicitly provided by the user. It then injects add=TRUE and evaluates the updated call, thereby drawing a new layer on top of the existing plot. plt_add() is a shorthand alias for tinyplot_add().\n\n\n\ntinyplot_add(...)\n\nplt_add(...)\n\n\n\n\n\n\n\n…\n\n\nAll named arguments override arguments from the previous calls. Arguments not supplied to tinyplot_add remain unchanged from the previous call.\n\n\n\n\n\n\nNo return value, called for side effect of producing a plot.\n\n\n\n\n\ntinyplot_add() works reliably only when adding to a plot originally created using the tinyplot.formula method with a valid data argument. We cannot guarantee correct behavior if the original plot was created with the atomic tinyplot.default method, due to potential environment mismatches. (An exception is when the original plot arguments—x, y, etc.—are located in the global environment.)\n\n\nAutomatic legends for the added elements will be turned off.\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\ntinyplot(Sepal.Width ~ Sepal.Length | Species,\n  facet = ~Species,\n  data = iris)\n\ntinyplot_add(type = \"lm\") ## or : plt_add(type = \"lm\")\n\n\n\n\n\n\n\n## Note: the previous function is equivalent to (but much more convenient\n## than) re-writing the full call with the new type and `add=TRUE`:\n\n# tinyplot(Sepal.Width ~ Sepal.Length | Species,\n#          facet = ~Species,\n#          data = iris,\n#          type = \"lm\",\n#          add = TRUE)",
    "crumbs": [
      "Reference",
      "Main functions",
      "tinyplot_add"
    ]
  },
  {
    "objectID": "man/tinyplot_add.html#add-new-elements-to-the-current-tinyplot",
    "href": "man/tinyplot_add.html#add-new-elements-to-the-current-tinyplot",
    "title": "tinyplot",
    "section": "",
    "text": "This convenience function grabs the preceding tinyplot call and updates it with any new arguments that have been explicitly provided by the user. It then injects add=TRUE and evaluates the updated call, thereby drawing a new layer on top of the existing plot. plt_add() is a shorthand alias for tinyplot_add().\n\n\n\ntinyplot_add(...)\n\nplt_add(...)\n\n\n\n\n\n\n\n…\n\n\nAll named arguments override arguments from the previous calls. Arguments not supplied to tinyplot_add remain unchanged from the previous call.\n\n\n\n\n\n\nNo return value, called for side effect of producing a plot.\n\n\n\n\n\ntinyplot_add() works reliably only when adding to a plot originally created using the tinyplot.formula method with a valid data argument. We cannot guarantee correct behavior if the original plot was created with the atomic tinyplot.default method, due to potential environment mismatches. (An exception is when the original plot arguments—x, y, etc.—are located in the global environment.)\n\n\nAutomatic legends for the added elements will be turned off.\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\ntinyplot(Sepal.Width ~ Sepal.Length | Species,\n  facet = ~Species,\n  data = iris)\n\ntinyplot_add(type = \"lm\") ## or : plt_add(type = \"lm\")\n\n\n\n\n\n\n\n## Note: the previous function is equivalent to (but much more convenient\n## than) re-writing the full call with the new type and `add=TRUE`:\n\n# tinyplot(Sepal.Width ~ Sepal.Length | Species,\n#          facet = ~Species,\n#          data = iris,\n#          type = \"lm\",\n#          add = TRUE)",
    "crumbs": [
      "Reference",
      "Main functions",
      "tinyplot_add"
    ]
  },
  {
    "objectID": "man/type_polygon.html",
    "href": "man/type_polygon.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting polygons. Arguments are passed to polygon.\n\n\n\ntype_polygon(density = NULL, angle = 45)\n\n\n\n\n\n\n\ndensity\n\n\nthe density of shading lines, in lines per inch. The default value of NULL means that no shading lines are drawn. A zero value of density means no shading nor filling whereas negative values and NA suppress shading (and so allow color filling).\n\n\n\n\nangle\n\n\nthe slope of shading lines, given as an angle in degrees (counter-clockwise).\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"polygon\" type convenience character string\ntinyplot(1:9, c(2,1,2,1,NA,2,1,2,1), type = \"polygon\")\n\n\n\n\n\n\n\n# Use `type_polygon()` to pass extra arguments for customization\ntinyplot(1:9, c(2,1,2,1,NA,2,1,2,1), type = type_polygon(density = c(10, 20)))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_polygon"
    ]
  },
  {
    "objectID": "man/type_polygon.html#polygon-plot-type",
    "href": "man/type_polygon.html#polygon-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting polygons. Arguments are passed to polygon.\n\n\n\ntype_polygon(density = NULL, angle = 45)\n\n\n\n\n\n\n\ndensity\n\n\nthe density of shading lines, in lines per inch. The default value of NULL means that no shading lines are drawn. A zero value of density means no shading nor filling whereas negative values and NA suppress shading (and so allow color filling).\n\n\n\n\nangle\n\n\nthe slope of shading lines, given as an angle in degrees (counter-clockwise).\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"polygon\" type convenience character string\ntinyplot(1:9, c(2,1,2,1,NA,2,1,2,1), type = \"polygon\")\n\n\n\n\n\n\n\n# Use `type_polygon()` to pass extra arguments for customization\ntinyplot(1:9, c(2,1,2,1,NA,2,1,2,1), type = type_polygon(density = c(10, 20)))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_polygon"
    ]
  },
  {
    "objectID": "man/type_abline.html",
    "href": "man/type_abline.html",
    "title": "tinyplot",
    "section": "",
    "text": "These functions add straight line(s) through the current plot.\n\n\n\ntype_abline(a = 0, b = 1)\n\ntype_hline(h = 0)\n\ntype_vline(v = 0)\n\n\n\n\n\n\n\na, b\n\n\nthe intercept (default: a = 0) and slope (default: b = 1) terms. Numerics of length 1, or equal to the number of groups or number of facets (or the product thereof).\n\n\n\n\nh\n\n\ny-value(s) for horizontal line(s). Numeric of length 1, or equal to the number of groups or number of facets (or the product thereof).\n\n\n\n\nv\n\n\nx-value(s) for vertical line(s). Numeric of length 1, or equal to the number of groups or number of facets (or the product thereof).\n\n\n\n\n\n\nWhile type_abline, type_hline, and type_vline can be called in a base plot layer, we expect that they will typically be called as subsequent layers via tinyplot_add.\n\n\n\nThe recycling behaviour of the line parameters (i.e., a, b, h, or v) is adaptive, depending on whether by or facet grouping is detected. While this leads to different recycling scenarios, the underlying code logic follows sensible heuristics designed to match user expectations.\nParameter lengths must equal one of four options:\n\n\nSingle value (i.e., length = 1), i.e. simplest case where the same line is applied uniformly across all groups and facets. Uses the default user colour (e.g. “black”, or tpar(“palette.qualitative”)[1] if a theme is set).\n\n\nNumber of by groups, i.e. one parameter per group. For example, tinyplot(mpg ~ wt | factor(cyl), data = mtcars, type = type_hline(h = 21:23)) will give three horizontal lines, with colours matching the user’s qualitative palette.\n\n\nNumber of facet groups, i.e. one parameter per facet panel. For example: tinyplot(mpg ~ wt, facet = ~am, data = mtcars, type = type_hline(h = c(20,30))) would give separate horizontal lines per facet, but both using the same default color.\n\n\nProduct of by and facet groups, i.e. one parameter for each unique by-facet combination. Orders over facets first and then, within that, by group. For example: tinyplot(mpg ~ wt | factor(cyl), facet = ~am, data = mtcars, type = type_hline(h = 21:26)) will give six separate lines, with the first three (21:23) coloured by group in the first facet, and second three (24:26) coloured by by group in the second facet.\n\n\nAlongside these general rules, we also try to accomodate special cases when other aesthetic parameters like lwd or lty are invoked by the user. See Examples.\n\n\n\n\nlibrary(\"tinyplot\")\n\n#\n## abline\n\ntinyplot(x = -10:10, y = rnorm(21) + -10:10, grid = TRUE)\ntinyplot_add(type = \"abline\")\n# same as...\n# tinyplot_add(type = type_abline(a = 0, b = 1))\n\n# customize by passing bespoke intercept and slope values\ntinyplot_add(type = type_abline(a = -1, b = -0.5))\n\n\n\n\n\n\n\n# note that calling as abline & co. as a base plot layer will still lead to\n# axes limits that respect the range of the data\ntinyplot(x = -10:10, y = -10:10, grid = TRUE, type = \"abline\")\n\n\n\n\n\n\n\n#\n## hline and vline\n\n# Base plot layer\ntinyplot(mpg ~ hp | cyl, facet = \"by\", data = mtcars, ylim = c(0, 40))\n\n# Add horizontal lines at the (default) 0 y-intercept\ntinyplot_add(type = \"hline\", col = \"grey\")\n\n# Note that group+facet aesthetics will be inherited. We can use this to\n# add customized lines (here: the mean `mpg` for each `cyl` group)  \ntinyplot_add(type = type_hline(with(mtcars, tapply(mpg, cyl, mean))), lty = 2)\n\n# Similar idea for vline\ntinyplot_add(type = type_vline(with(mtcars, tapply(hp, cyl, mean))), lty = 2)\n\n\n\n\n\n\n\n#\n## Recycling logic\n\n# length(h) == no. of groups\ntinyplot(mpg ~ wt | factor(cyl), data = mtcars, type = type_hline(h = 21:23))\n\n\n\n\n\n\n\n# length(h) == no. of facets\ntinyplot(mpg ~ wt, facet = ~am, data = mtcars, type = type_hline(h = c(20, 30)))\n\n\n\n\n\n\n\n# length(h) == no. of groups x no. of facets\ntinyplot(mpg ~ wt | factor(cyl), facet = ~am, data = mtcars,\n   type = type_hline(h = 21:26))\n\n\n\n\n\n\n\n# special adjustment case (here: lwd by group)\ntinyplot(mpg ~ wt | factor(cyl), facet = ~am, data = mtcars,\n   type = type_hline(c(20, 30)), lwd = c(21, 14, 7))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Functions",
      "type_abline"
    ]
  },
  {
    "objectID": "man/type_abline.html#add-straight-lines-to-a-plot",
    "href": "man/type_abline.html#add-straight-lines-to-a-plot",
    "title": "tinyplot",
    "section": "",
    "text": "These functions add straight line(s) through the current plot.\n\n\n\ntype_abline(a = 0, b = 1)\n\ntype_hline(h = 0)\n\ntype_vline(v = 0)\n\n\n\n\n\n\n\na, b\n\n\nthe intercept (default: a = 0) and slope (default: b = 1) terms. Numerics of length 1, or equal to the number of groups or number of facets (or the product thereof).\n\n\n\n\nh\n\n\ny-value(s) for horizontal line(s). Numeric of length 1, or equal to the number of groups or number of facets (or the product thereof).\n\n\n\n\nv\n\n\nx-value(s) for vertical line(s). Numeric of length 1, or equal to the number of groups or number of facets (or the product thereof).\n\n\n\n\n\n\nWhile type_abline, type_hline, and type_vline can be called in a base plot layer, we expect that they will typically be called as subsequent layers via tinyplot_add.\n\n\n\nThe recycling behaviour of the line parameters (i.e., a, b, h, or v) is adaptive, depending on whether by or facet grouping is detected. While this leads to different recycling scenarios, the underlying code logic follows sensible heuristics designed to match user expectations.\nParameter lengths must equal one of four options:\n\n\nSingle value (i.e., length = 1), i.e. simplest case where the same line is applied uniformly across all groups and facets. Uses the default user colour (e.g. “black”, or tpar(“palette.qualitative”)[1] if a theme is set).\n\n\nNumber of by groups, i.e. one parameter per group. For example, tinyplot(mpg ~ wt | factor(cyl), data = mtcars, type = type_hline(h = 21:23)) will give three horizontal lines, with colours matching the user’s qualitative palette.\n\n\nNumber of facet groups, i.e. one parameter per facet panel. For example: tinyplot(mpg ~ wt, facet = ~am, data = mtcars, type = type_hline(h = c(20,30))) would give separate horizontal lines per facet, but both using the same default color.\n\n\nProduct of by and facet groups, i.e. one parameter for each unique by-facet combination. Orders over facets first and then, within that, by group. For example: tinyplot(mpg ~ wt | factor(cyl), facet = ~am, data = mtcars, type = type_hline(h = 21:26)) will give six separate lines, with the first three (21:23) coloured by group in the first facet, and second three (24:26) coloured by by group in the second facet.\n\n\nAlongside these general rules, we also try to accomodate special cases when other aesthetic parameters like lwd or lty are invoked by the user. See Examples.\n\n\n\n\nlibrary(\"tinyplot\")\n\n#\n## abline\n\ntinyplot(x = -10:10, y = rnorm(21) + -10:10, grid = TRUE)\ntinyplot_add(type = \"abline\")\n# same as...\n# tinyplot_add(type = type_abline(a = 0, b = 1))\n\n# customize by passing bespoke intercept and slope values\ntinyplot_add(type = type_abline(a = -1, b = -0.5))\n\n\n\n\n\n\n\n# note that calling as abline & co. as a base plot layer will still lead to\n# axes limits that respect the range of the data\ntinyplot(x = -10:10, y = -10:10, grid = TRUE, type = \"abline\")\n\n\n\n\n\n\n\n#\n## hline and vline\n\n# Base plot layer\ntinyplot(mpg ~ hp | cyl, facet = \"by\", data = mtcars, ylim = c(0, 40))\n\n# Add horizontal lines at the (default) 0 y-intercept\ntinyplot_add(type = \"hline\", col = \"grey\")\n\n# Note that group+facet aesthetics will be inherited. We can use this to\n# add customized lines (here: the mean `mpg` for each `cyl` group)  \ntinyplot_add(type = type_hline(with(mtcars, tapply(mpg, cyl, mean))), lty = 2)\n\n# Similar idea for vline\ntinyplot_add(type = type_vline(with(mtcars, tapply(hp, cyl, mean))), lty = 2)\n\n\n\n\n\n\n\n#\n## Recycling logic\n\n# length(h) == no. of groups\ntinyplot(mpg ~ wt | factor(cyl), data = mtcars, type = type_hline(h = 21:23))\n\n\n\n\n\n\n\n# length(h) == no. of facets\ntinyplot(mpg ~ wt, facet = ~am, data = mtcars, type = type_hline(h = c(20, 30)))\n\n\n\n\n\n\n\n# length(h) == no. of groups x no. of facets\ntinyplot(mpg ~ wt | factor(cyl), facet = ~am, data = mtcars,\n   type = type_hline(h = 21:26))\n\n\n\n\n\n\n\n# special adjustment case (here: lwd by group)\ntinyplot(mpg ~ wt | factor(cyl), facet = ~am, data = mtcars,\n   type = type_hline(c(20, 30)), lwd = c(21, 14, 7))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Functions",
      "type_abline"
    ]
  },
  {
    "objectID": "man/get_saved_par.html",
    "href": "man/get_saved_par.html",
    "title": "tinyplot",
    "section": "",
    "text": "Convenience function for retrieving the graphical parameters (i.e., the full list of tag = value pairs held in par) from either immediately before or immediately after the most recent tinyplot call.\n\n\n\nget_saved_par(when = c(\"before\", \"after\", \"first\"))\n\n\n\n\n\n\n\nwhen\n\n\ncharacter. From when should the saved parameters be retrieved? Either \"before\" (the default) or \"after\" the preceding tinyplot call.\n\n\n\n\n\n\nA potential side-effect of tinyplot is that it can change a user’s par settings. For example, it may adjust the inner and outer plot margins to make space for an automatic legend; see draw_legend. While it is possible to immediately restore the original par settings upon exit via the tinyplot(…, restore.par = TRUE) argument, this is not the default behaviour. The reason being that we need to preserve the adjusted parameter settings in case users want to add further graphical annotations to their plot (e.g., abline, text, etc.) Nevertheless, it may still prove desirable to recall and reset these original graphical parameters after the fact (e.g., once all these extra annotations have been added). That is the purpose of this get_saved_par function.\nOf course, users may prefer to manually capture and reset graphical parameters, as per the standard method described in the par documentation. For example:\n\nop = par(no.readonly = TRUE)  # save current par settings \n# &lt;do lots of (tiny)plotting&gt;\npar(op)                       # reset original pars\n\n\nThis standard manual approach may be safer than get_saved_par because it offers more precise control. Specifically, the value of get_saved_par itself will be reset after ever new tinyplot call; i.e. it may inherit an already-changed set of parameters. Users should bear these trade-offs in mind when deciding which approach to use. As a general rule, get_saved_par offers the convenience of resetting the original par settings even if a user forgot to save them beforehand. But one should avoid invoking it after a series of consecutive tinyplot calls.\nFinally, note that users can always call dev.off to reset all par settings to their defaults.\n\n\n\nA list of par settings.\n\n\n\n\nlibrary(\"tinyplot\")\n\n#\n# Contrived example where we draw a grouped scatterplot with a legend and\n# manually add corresponding best fit lines for each group...\n#\n\n# First draw the grouped scatterplot\ntinyplot(Sepal.Length ~ Petal.Length | Species, iris)\n\n# Preserving adjusted par settings is good for adding elements to our plot\nfor (s in levels(iris$Species)) {\n  abline(\n    lm(Sepal.Length ~ Petal.Length, iris, subset = Species==s),\n    col = which(levels(iris$Species)==s)\n  )\n}\n\n\n\n\n\n\n\n# Get saved par from before the preceding tinyplot call (but don't use yet)\nsp = get_saved_par(\"before\")\n\n# Note the changed margins will affect regular plots too, which is probably\n# not desirable\nplot(1:10)\n\n\n\n\n\n\n\n# Reset the original parameters (could use `par(sp)` here)\ntpar(sp)\n# Redraw our simple plot with our corrected right margin\nplot(1:10)\n\n#\n# Quick example going the other way, \"correcting\" for par.restore = TRUE...\n#\n\ntinyplot(Sepal.Length ~ Petal.Length | Species, iris, restore.par = TRUE)\n# Our added best lines will be wrong b/c of misaligned par\nfor (s in levels(iris$Species)) {\n  abline(\n    lm(Sepal.Length ~ Petal.Length, iris, subset = Species==s),\n    col = which(levels(iris$Species)==s), lty = 2\n  )\n}\n# grab the par settings from the _end_ of the preceding tinyplot call to fix\ntpar(get_saved_par(\"after\"))\n# now the best lines are correct\nfor (s in levels(iris$Species)) {\n  abline(\n    lm(Sepal.Length ~ Petal.Length, iris, subset = Species==s),\n    col = which(levels(iris$Species)==s)\n  )\n}\n\n\n\n\n\n\n\n# reset again to original saved par settings before exit\ntpar(sp)",
    "crumbs": [
      "Reference",
      "Options",
      "get_saved_par"
    ]
  },
  {
    "objectID": "man/get_saved_par.html#retrieve-the-saved-graphical-parameters",
    "href": "man/get_saved_par.html#retrieve-the-saved-graphical-parameters",
    "title": "tinyplot",
    "section": "",
    "text": "Convenience function for retrieving the graphical parameters (i.e., the full list of tag = value pairs held in par) from either immediately before or immediately after the most recent tinyplot call.\n\n\n\nget_saved_par(when = c(\"before\", \"after\", \"first\"))\n\n\n\n\n\n\n\nwhen\n\n\ncharacter. From when should the saved parameters be retrieved? Either \"before\" (the default) or \"after\" the preceding tinyplot call.\n\n\n\n\n\n\nA potential side-effect of tinyplot is that it can change a user’s par settings. For example, it may adjust the inner and outer plot margins to make space for an automatic legend; see draw_legend. While it is possible to immediately restore the original par settings upon exit via the tinyplot(…, restore.par = TRUE) argument, this is not the default behaviour. The reason being that we need to preserve the adjusted parameter settings in case users want to add further graphical annotations to their plot (e.g., abline, text, etc.) Nevertheless, it may still prove desirable to recall and reset these original graphical parameters after the fact (e.g., once all these extra annotations have been added). That is the purpose of this get_saved_par function.\nOf course, users may prefer to manually capture and reset graphical parameters, as per the standard method described in the par documentation. For example:\n\nop = par(no.readonly = TRUE)  # save current par settings \n# &lt;do lots of (tiny)plotting&gt;\npar(op)                       # reset original pars\n\n\nThis standard manual approach may be safer than get_saved_par because it offers more precise control. Specifically, the value of get_saved_par itself will be reset after ever new tinyplot call; i.e. it may inherit an already-changed set of parameters. Users should bear these trade-offs in mind when deciding which approach to use. As a general rule, get_saved_par offers the convenience of resetting the original par settings even if a user forgot to save them beforehand. But one should avoid invoking it after a series of consecutive tinyplot calls.\nFinally, note that users can always call dev.off to reset all par settings to their defaults.\n\n\n\nA list of par settings.\n\n\n\n\nlibrary(\"tinyplot\")\n\n#\n# Contrived example where we draw a grouped scatterplot with a legend and\n# manually add corresponding best fit lines for each group...\n#\n\n# First draw the grouped scatterplot\ntinyplot(Sepal.Length ~ Petal.Length | Species, iris)\n\n# Preserving adjusted par settings is good for adding elements to our plot\nfor (s in levels(iris$Species)) {\n  abline(\n    lm(Sepal.Length ~ Petal.Length, iris, subset = Species==s),\n    col = which(levels(iris$Species)==s)\n  )\n}\n\n\n\n\n\n\n\n# Get saved par from before the preceding tinyplot call (but don't use yet)\nsp = get_saved_par(\"before\")\n\n# Note the changed margins will affect regular plots too, which is probably\n# not desirable\nplot(1:10)\n\n\n\n\n\n\n\n# Reset the original parameters (could use `par(sp)` here)\ntpar(sp)\n# Redraw our simple plot with our corrected right margin\nplot(1:10)\n\n#\n# Quick example going the other way, \"correcting\" for par.restore = TRUE...\n#\n\ntinyplot(Sepal.Length ~ Petal.Length | Species, iris, restore.par = TRUE)\n# Our added best lines will be wrong b/c of misaligned par\nfor (s in levels(iris$Species)) {\n  abline(\n    lm(Sepal.Length ~ Petal.Length, iris, subset = Species==s),\n    col = which(levels(iris$Species)==s), lty = 2\n  )\n}\n# grab the par settings from the _end_ of the preceding tinyplot call to fix\ntpar(get_saved_par(\"after\"))\n# now the best lines are correct\nfor (s in levels(iris$Species)) {\n  abline(\n    lm(Sepal.Length ~ Petal.Length, iris, subset = Species==s),\n    col = which(levels(iris$Species)==s)\n  )\n}\n\n\n\n\n\n\n\n# reset again to original saved par settings before exit\ntpar(sp)",
    "crumbs": [
      "Reference",
      "Options",
      "get_saved_par"
    ]
  },
  {
    "objectID": "man/tinylabel.html",
    "href": "man/tinylabel.html",
    "title": "tinyplot",
    "section": "",
    "text": "Function for formatting label appearance, e.g. axis ticks labels. This is what the top-level xaxl and yaxl arguments from tinyplot ultimately get passed to.\n\n\n\ntinylabel(x, labeller = NULL)\n\n\n\n\n\n\n\nx\n\n\na numeric or character vector\n\n\n\n\nlabeller\n\n\na formatting function to be applied to x, e.g. format, toupper, abs, or other custom function (including from the popular scales package). Can also be one of the following convenience strings (symbols), for which common formatting transformations are provided: “percent” (“%”), “comma” (“,”), “log” (“l”), “dollar” (“$”), “euro” (“€”), or “sterling” (“£”).\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\nx = 1e4\ntinylabel(x, \"comma\")\n\n[1] \"10,000\"\n\ntinylabel(x, \",\") # same\n\n[1] \"10,000\"\n\ntinylabel(x, \"$\") # or \"dollar\"\n\n[1] \"$10,000\"\n\n# pass to xaxl/yaxl for adjusting axes tick labels in a tinyplot call\ntinyplot(I(mpg/hp) ~ hp, data = mtcars, yaxl = \"%\")\n\n\n\n\n\n\n\n# log example (combined with axis scaling)\ntinyplot(x = 10^c(10:0), y = 0:10, type = \"b\", log = \"x\", xaxl = \"log\")\n\n\n\n\n\n\n\n# combine with `x/yaxb` to adjust the actual tick marks (\"break points\")\n# at the same time\ntinyplot(x = 10^c(10:0), y = 0:10, type = \"b\", log = \"x\", xaxl = \"log\",\n         xaxb = 10^c(1,3,5,7,9))\n\n\n\n\n\n\n\n#\n## custom function examples\n\n## example I: date formatting\n\ndat = data.frame(\n  date = seq(as.Date(\"2000/1/1\"), by = \"month\", length.out = 12),\n  trend = 1:12 + rnorm(12, sd = 1)\n)\n\ntinyplot(trend ~ date, data = dat, xaxl = function(x) format(x, \"%b, %Y\"))\n\n\n\n\n\n\n\n## example II: string wrapping \n\n# create a \"vectorised\" version of `base::strwrap` that breaks long\n# strings into new lines every 18 characters\nstrwrap18 = function(x) sapply(\n  strwrap(x, width = 18, simplify = FALSE),\n  paste,\n  collapse = \"\\n\"\n)\n\n# now demonstrate on a dataset with long y-tick labels\ndat2 = data.frame(\n  x = rep(rnorm(100), 3),\n  y = c(\n    \"tinyplot is a lightweight extension of the base R graphics system.\",\n    \"R is a language for statistical computing.\",\n    \"Data visualization is an essential skill.\"\n  )\n)\n\ntinytheme(\"bw\")\ntinyplot(y ~ x, data = dat2, type = \"j\", yaxl = strwrap18)\n\n\n\n\n\n\n\ntinytheme()",
    "crumbs": [
      "Reference",
      "Internals",
      "tinylabel"
    ]
  },
  {
    "objectID": "man/tinylabel.html#format-labels",
    "href": "man/tinylabel.html#format-labels",
    "title": "tinyplot",
    "section": "",
    "text": "Function for formatting label appearance, e.g. axis ticks labels. This is what the top-level xaxl and yaxl arguments from tinyplot ultimately get passed to.\n\n\n\ntinylabel(x, labeller = NULL)\n\n\n\n\n\n\n\nx\n\n\na numeric or character vector\n\n\n\n\nlabeller\n\n\na formatting function to be applied to x, e.g. format, toupper, abs, or other custom function (including from the popular scales package). Can also be one of the following convenience strings (symbols), for which common formatting transformations are provided: “percent” (“%”), “comma” (“,”), “log” (“l”), “dollar” (“$”), “euro” (“€”), or “sterling” (“£”).\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\nx = 1e4\ntinylabel(x, \"comma\")\n\n[1] \"10,000\"\n\ntinylabel(x, \",\") # same\n\n[1] \"10,000\"\n\ntinylabel(x, \"$\") # or \"dollar\"\n\n[1] \"$10,000\"\n\n# pass to xaxl/yaxl for adjusting axes tick labels in a tinyplot call\ntinyplot(I(mpg/hp) ~ hp, data = mtcars, yaxl = \"%\")\n\n\n\n\n\n\n\n# log example (combined with axis scaling)\ntinyplot(x = 10^c(10:0), y = 0:10, type = \"b\", log = \"x\", xaxl = \"log\")\n\n\n\n\n\n\n\n# combine with `x/yaxb` to adjust the actual tick marks (\"break points\")\n# at the same time\ntinyplot(x = 10^c(10:0), y = 0:10, type = \"b\", log = \"x\", xaxl = \"log\",\n         xaxb = 10^c(1,3,5,7,9))\n\n\n\n\n\n\n\n#\n## custom function examples\n\n## example I: date formatting\n\ndat = data.frame(\n  date = seq(as.Date(\"2000/1/1\"), by = \"month\", length.out = 12),\n  trend = 1:12 + rnorm(12, sd = 1)\n)\n\ntinyplot(trend ~ date, data = dat, xaxl = function(x) format(x, \"%b, %Y\"))\n\n\n\n\n\n\n\n## example II: string wrapping \n\n# create a \"vectorised\" version of `base::strwrap` that breaks long\n# strings into new lines every 18 characters\nstrwrap18 = function(x) sapply(\n  strwrap(x, width = 18, simplify = FALSE),\n  paste,\n  collapse = \"\\n\"\n)\n\n# now demonstrate on a dataset with long y-tick labels\ndat2 = data.frame(\n  x = rep(rnorm(100), 3),\n  y = c(\n    \"tinyplot is a lightweight extension of the base R graphics system.\",\n    \"R is a language for statistical computing.\",\n    \"Data visualization is an essential skill.\"\n  )\n)\n\ntinytheme(\"bw\")\ntinyplot(y ~ x, data = dat2, type = \"j\", yaxl = strwrap18)\n\n\n\n\n\n\n\ntinytheme()",
    "crumbs": [
      "Reference",
      "Internals",
      "tinylabel"
    ]
  },
  {
    "objectID": "man/type_loess.html",
    "href": "man/type_loess.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting a LOESS (LOcal regrESSion) fit. Arguments are passed to loess.\n\n\n\ntype_loess(\n  span = 0.75,\n  degree = 2,\n  family = \"gaussian\",\n  control = loess.control(),\n  se = TRUE,\n  level = 0.95\n)\n\n\n\n\n\n\n\nspan\n\n\nthe parameter \\(\\alpha\\) which controls the degree of smoothing.\n\n\n\n\ndegree\n\n\nthe degree of the polynomials to be used, normally 1 or 2. (Degree 0 is also allowed, but see the ‘Note’.)\n\n\n\n\nfamily\n\n\nif “gaussian” fitting is by least-squares, and if “symmetric” a re-descending M estimator is used with Tukey’s biweight function. Can be abbreviated.\n\n\n\n\ncontrol\n\n\ncontrol parameters: see loess.control.\n\n\n\n\nse\n\n\nlogical. If TRUE (the default), confidence intervals are drawn.\n\n\n\n\nlevel\n\n\nthe confidence level required if se = TRUE. Default is 0.95.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"loess\" type convenience string\ntinyplot(dist ~ speed, data = cars, type = \"loess\")\n\n\n\n\n\n\n\n# Use `type_loess()` to pass extra arguments for customization\ntinyplot(dist ~ speed, data = cars, type = type_loess(span = 0.5, degree = 1))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Models",
      "type_loess"
    ]
  },
  {
    "objectID": "man/type_loess.html#local-polynomial-regression-plot-type",
    "href": "man/type_loess.html#local-polynomial-regression-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting a LOESS (LOcal regrESSion) fit. Arguments are passed to loess.\n\n\n\ntype_loess(\n  span = 0.75,\n  degree = 2,\n  family = \"gaussian\",\n  control = loess.control(),\n  se = TRUE,\n  level = 0.95\n)\n\n\n\n\n\n\n\nspan\n\n\nthe parameter \\(\\alpha\\) which controls the degree of smoothing.\n\n\n\n\ndegree\n\n\nthe degree of the polynomials to be used, normally 1 or 2. (Degree 0 is also allowed, but see the ‘Note’.)\n\n\n\n\nfamily\n\n\nif “gaussian” fitting is by least-squares, and if “symmetric” a re-descending M estimator is used with Tukey’s biweight function. Can be abbreviated.\n\n\n\n\ncontrol\n\n\ncontrol parameters: see loess.control.\n\n\n\n\nse\n\n\nlogical. If TRUE (the default), confidence intervals are drawn.\n\n\n\n\nlevel\n\n\nthe confidence level required if se = TRUE. Default is 0.95.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"loess\" type convenience string\ntinyplot(dist ~ speed, data = cars, type = \"loess\")\n\n\n\n\n\n\n\n# Use `type_loess()` to pass extra arguments for customization\ntinyplot(dist ~ speed, data = cars, type = type_loess(span = 0.5, degree = 1))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Models",
      "type_loess"
    ]
  },
  {
    "objectID": "man/type_barplot.html",
    "href": "man/type_barplot.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for producing barplots. For formulas of type ~ x (without left-hand side) the barplot visualizes the counts (absolute frequencies) of the levels of x. For formulas of type y ~ x the value of y within each level of x is visualized, if necessary aggregated using some function (default: mean).\n\n\n\ntype_barplot(\n  width = 5/6,\n  beside = FALSE,\n  center = FALSE,\n  FUN = NULL,\n  xlevels = NULL,\n  xaxlabels = NULL,\n  drop.zeros = FALSE\n)\n\n\n\n\n\n\n\nwidth\n\n\nnumeric, optional vector of bar widths. (The distance between the midpoints of the bars is always 1.)\n\n\n\n\nbeside\n\n\nlogical. In case of a by grouping variable, should bars be juxtaposed? Default is to use stacked bars instead.\n\n\n\n\ncenter\n\n\nlogical or numeric. In case of stacked barplots (beside = FALSE) should the bars be centered (or all start at zero, default)? If set to TRUE the center is at the mid-point of the middle category (in case of uneven number of categories) or between the two middle categories (in case of an even number). Additionally it is possible to set center = 2 or center = 2.5 to indicate that centering should be after the second category or the mid-way in the third category, respectively.\n\n\n\n\nFUN\n\n\na function to compute the summary statistic for y within each group of x in case of using a two-sided formula y ~ x (default: mean).\n\n\n\n\nxlevels\n\n\na character or numeric vector specifying the ordering of the levels of the x variable (if character) or the corresponding indexes (if numeric) for the plot.\n\n\n\n\nxaxlabels\n\n\na character vector with the axis labels for the x variable, defaulting to the levels of x.\n\n\n\n\ndrop.zeros\n\n\nlogical. Should bars with zero height be dropped? If set to FALSE (default) a zero height bar is still drawn for which the border lines will still be visible.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# Basic examples of frequency tables (without y variable)\ntinyplot(~ cyl, data = mtcars, type = \"barplot\")\n\n\n\n\n\n\n\ntinyplot(~ cyl | vs, data = mtcars, type = \"barplot\")\n\n\n\n\n\n\n\ntinyplot(~ cyl | vs, data = mtcars, type = \"barplot\", beside = TRUE)\n\n\n\n\n\n\n\ntinyplot(~ cyl | vs, data = mtcars, type = \"barplot\", beside = TRUE, fill = 0.2)\n\n\n\n\n\n\n\n# Reorder x variable categories either by their character levels or numeric indexes\ntinyplot(~ cyl, data = mtcars, type = \"barplot\", xlevels = c(\"8\", \"6\", \"4\"))\n\n\n\n\n\n\n\ntinyplot(~ cyl, data = mtcars, type = \"barplot\", xlevels = 3:1)\n\n# Note: Above we used automatic argument passing for `beside`. But this\n# wouldn't work for `width`, since it would conflict with the top-level\n# `tinyplot(..., width = &lt;width&gt;)` argument. It's safer to pass these args\n# through the `type_barplot()` functional equivalent.\ntinyplot(~ cyl | vs, data = mtcars, fill = 0.2,\n  type = type_barplot(beside = TRUE, drop.zeros = TRUE, width = 0.65))\n\n\n\n\n\n\n\ntinytheme(\"clean2\")\n\n# Example for numeric y aggregated by x (default: FUN = mean) + facets\ntinyplot(extra ~ ID | group, facet = \"by\", data = sleep,\n  type = \"barplot\", fill = 0.6)\n\n\n\n\n\n\n\n# Fancy frequency table:\ntinyplot(Freq ~ Sex | Survived, facet = ~ Class, data = as.data.frame(Titanic),\n  type = \"barplot\", facet.args = list(nrow = 1), flip = TRUE, fill = 0.6)\n\n\n\n\n\n\n\n# Centered barplot for conditional proportions of hair color (black/brown vs.\n# red/blond) given eye color and sex\ntinytheme(\"clean2\", palette.qualitative = c(\"black\", \"sienna\", \"indianred\", \"goldenrod\"))\nhec = as.data.frame(proportions(HairEyeColor, 2:3))\ntinyplot(Freq ~ Eye | Hair, facet = ~ Sex, data = hec, type = \"barplot\",\n  center = TRUE, flip = TRUE, facet.args = list(ncol = 1), yaxl = \"percent\")\n\n\n\n\n\n\n\ntinytheme()",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_barplot"
    ]
  },
  {
    "objectID": "man/type_barplot.html#barplot-type",
    "href": "man/type_barplot.html#barplot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for producing barplots. For formulas of type ~ x (without left-hand side) the barplot visualizes the counts (absolute frequencies) of the levels of x. For formulas of type y ~ x the value of y within each level of x is visualized, if necessary aggregated using some function (default: mean).\n\n\n\ntype_barplot(\n  width = 5/6,\n  beside = FALSE,\n  center = FALSE,\n  FUN = NULL,\n  xlevels = NULL,\n  xaxlabels = NULL,\n  drop.zeros = FALSE\n)\n\n\n\n\n\n\n\nwidth\n\n\nnumeric, optional vector of bar widths. (The distance between the midpoints of the bars is always 1.)\n\n\n\n\nbeside\n\n\nlogical. In case of a by grouping variable, should bars be juxtaposed? Default is to use stacked bars instead.\n\n\n\n\ncenter\n\n\nlogical or numeric. In case of stacked barplots (beside = FALSE) should the bars be centered (or all start at zero, default)? If set to TRUE the center is at the mid-point of the middle category (in case of uneven number of categories) or between the two middle categories (in case of an even number). Additionally it is possible to set center = 2 or center = 2.5 to indicate that centering should be after the second category or the mid-way in the third category, respectively.\n\n\n\n\nFUN\n\n\na function to compute the summary statistic for y within each group of x in case of using a two-sided formula y ~ x (default: mean).\n\n\n\n\nxlevels\n\n\na character or numeric vector specifying the ordering of the levels of the x variable (if character) or the corresponding indexes (if numeric) for the plot.\n\n\n\n\nxaxlabels\n\n\na character vector with the axis labels for the x variable, defaulting to the levels of x.\n\n\n\n\ndrop.zeros\n\n\nlogical. Should bars with zero height be dropped? If set to FALSE (default) a zero height bar is still drawn for which the border lines will still be visible.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# Basic examples of frequency tables (without y variable)\ntinyplot(~ cyl, data = mtcars, type = \"barplot\")\n\n\n\n\n\n\n\ntinyplot(~ cyl | vs, data = mtcars, type = \"barplot\")\n\n\n\n\n\n\n\ntinyplot(~ cyl | vs, data = mtcars, type = \"barplot\", beside = TRUE)\n\n\n\n\n\n\n\ntinyplot(~ cyl | vs, data = mtcars, type = \"barplot\", beside = TRUE, fill = 0.2)\n\n\n\n\n\n\n\n# Reorder x variable categories either by their character levels or numeric indexes\ntinyplot(~ cyl, data = mtcars, type = \"barplot\", xlevels = c(\"8\", \"6\", \"4\"))\n\n\n\n\n\n\n\ntinyplot(~ cyl, data = mtcars, type = \"barplot\", xlevels = 3:1)\n\n# Note: Above we used automatic argument passing for `beside`. But this\n# wouldn't work for `width`, since it would conflict with the top-level\n# `tinyplot(..., width = &lt;width&gt;)` argument. It's safer to pass these args\n# through the `type_barplot()` functional equivalent.\ntinyplot(~ cyl | vs, data = mtcars, fill = 0.2,\n  type = type_barplot(beside = TRUE, drop.zeros = TRUE, width = 0.65))\n\n\n\n\n\n\n\ntinytheme(\"clean2\")\n\n# Example for numeric y aggregated by x (default: FUN = mean) + facets\ntinyplot(extra ~ ID | group, facet = \"by\", data = sleep,\n  type = \"barplot\", fill = 0.6)\n\n\n\n\n\n\n\n# Fancy frequency table:\ntinyplot(Freq ~ Sex | Survived, facet = ~ Class, data = as.data.frame(Titanic),\n  type = \"barplot\", facet.args = list(nrow = 1), flip = TRUE, fill = 0.6)\n\n\n\n\n\n\n\n# Centered barplot for conditional proportions of hair color (black/brown vs.\n# red/blond) given eye color and sex\ntinytheme(\"clean2\", palette.qualitative = c(\"black\", \"sienna\", \"indianred\", \"goldenrod\"))\nhec = as.data.frame(proportions(HairEyeColor, 2:3))\ntinyplot(Freq ~ Eye | Hair, facet = ~ Sex, data = hec, type = \"barplot\",\n  center = TRUE, flip = TRUE, facet.args = list(ncol = 1), yaxl = \"percent\")\n\n\n\n\n\n\n\ntinytheme()",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_barplot"
    ]
  },
  {
    "objectID": "index.html#what",
    "href": "index.html#what",
    "title": "tinyplot",
    "section": "What",
    "text": "What\nA lightweight extension of the base R graphics system, with support for automatic grouping, legends, facets, themes, and various other enhancements.\nThe stable version of tinyplot is available on CRAN.\ninstall.packages(\"tinyplot\")\nOr, you can grab the latest development version from R-universe.\ninstall.packages(\"tinyplot\", repos = \"https://grantmcdermott.r-universe.dev\")"
  },
  {
    "objectID": "index.html#why",
    "href": "index.html#why",
    "title": "tinyplot",
    "section": "Why",
    "text": "Why\nR users are spoiled for choice when it comes to visualization frameworks. The options, of course, include ggplot2 and lattice; say nothing of the bewildering array of extensions built around, on top of, and in between these amazing packages.1\nGiven the wealth of options, it is perhaps understandable that even avid R users can overlook the base R graphics system. This is unfortunate, because base R offers very powerful and flexible plotting facilities.2 The downside of this power and flexibility is that base R plotting can require a lot of manual tinkering. A case in point is plotting grouped data with an appropriate legend. Doing so with the generic plot() function can require several function calls or a loop, fiddling with your plot regions, and then generating the legend manually.\nThe tinyplot package aims to remove this overhead. It provides a lightweight extension of the base R graphics system that preserves the same core logic and syntax, but with numerous convenience features to make base R plotting a more user-friendly experience. For example, the core tinyplot() function—or its shorthand alias plt()—makes it easy to plot grouped datasets and generate automatic legends in a single function call. Or, you can display groups in separate facets without having to worry about manually setting plot regions. While tinyplot offers these and various other enhancements, it tries as far as possible to be a drop-in replacement for the equivalent base plotting function. Users should generally be able to swap out a valid plot() call for tinyplot()/plt() without any changes to the expected output.\nIt is worth emphasizing that tinyplot requires only base R. It has zero recursive dependencies and we have been careful to keep its installation size down to a minimum. tinyplot should thus provide an attractive and lightweight option for package developers (or regular R users!) who would like to produce convenient and sophisticated plots, combined with a minimal footprint."
  },
  {
    "objectID": "index.html#quickstart",
    "href": "index.html#quickstart",
    "title": "tinyplot",
    "section": "Quickstart",
    "text": "Quickstart\nThe tinyplot website includes a detailed introductory tutorial, with numerous examples. But here are some quickstart examples of the package in action.\n\nlibrary(tinyplot)\n\nGrouped scatterplot with automatic legend:\n\n# with(iris, tinyplot(x = Petal.Length, y = Sepal.Length, by = Species)) # atomic\ntinyplot(Sepal.Length ~ Petal.Length | Species, data = iris)             # formula\n\n\n\n\n\n\n\n\nIf you would prefer to save on a few keystrokes, you can use the shorthand plt() alias instead of typing out tinyplot() in full. Here’s the same plot with this shorthand alias, plus a few aesthetic tweaks:\n\nplt(\n  Sepal.Length ~ Petal.Length | Species, \n  data = iris,\n  palette = \"dark\", pch = 16,\n  grid = TRUE, frame = FALSE\n)\n\n\n\n\n\n\n\n\nSpeaking of aesthetic tweaks, tinyplot also provides a set of built-in themes for convenient plot customization:\n\ntinytheme(\"clean2\")\n\nplt(Sepal.Length ~ Petal.Length | Species, data = iris)\n\n\n\n\n\n\n\n\nThemes are persistent and will be applied to subsequent plots. For example, here is a grouped density plot:\n\nplt(\n  ~ Petal.Length | Species,\n  data = iris,\n  type = \"density\",\n  fill = \"by\",\n  main = \"Distribution of petal lengths\",\n  sub = \"Grouped by species\"\n)\n\n\n\n\n\n\n\n\nGrouped scatterplot with (continuous) gradient legend, combined with facet layout:\n\nplt(\n  Sepal.Length ~ Petal.Length | Sepal.Length, data = iris,\n  facet = ~Species, pch = 19,\n  main = \"Faceted flowers\", sub = \"Brought to you by tinyplot\"\n)\n\n\n\n\n\n\n\n\n\n# reset the theme \ntinytheme()\n\nHopefully, these have been enough to pique your interest. Head over to the intro tutorial for many more examples, including model-based and custom plot types."
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "tinyplot",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou could make a strong case that ggplot2, in particular, is the most influential graphics library of the last two decades, across any programming language. Both ggplot2 and lattice are built on top of the lower-level grid package, which was incorporated into the base R distribution way back in R 2.0.0.↩︎\nJust type demo(graphics) or demo(persp) into your R console to get an idea. Or, take a look at these two excellent tutorials.↩︎"
  },
  {
    "objectID": "vignettes/introduction.html",
    "href": "vignettes/introduction.html",
    "title": "Introduction to tinyplot",
    "section": "",
    "text": "tinyplot is a lightweight extension of the base R graphics system, designed to simplify and enhance data visualization. This tutorial provides a gentle introduction to the package’s core features and syntax. We won’t cover everything, but you should come away with a solid understanding of how tinyplot works and how it can integrate with your own projects.\nWe start this tutorial by loading the package and a slightly modified version of the airquality dataset that comes bundled with base R.\nlibrary(tinyplot)\n\naq = transform(\n  airquality,\n  Month = factor(month.abb[Month], levels = month.abb[5:9]),\n  hot   = ifelse(Temp&gt;=75, \"hot\", \"cold\"),\n  windy = ifelse(Wind&gt;=15, \"windy\", \"calm\")\n)"
  },
  {
    "objectID": "vignettes/introduction.html#equivalence-with-plot",
    "href": "vignettes/introduction.html#equivalence-with-plot",
    "title": "Introduction to tinyplot",
    "section": "Equivalence with plot()",
    "text": "Equivalence with plot()\nAs far as possible, tinyplot tries to be a drop-in replacement for regular plot calls.\n\npar(mfrow = c(1, 2))\n\nplot(0:10, main = \"plot\")\ntinyplot(0:10, main = \"tinyplot\")\n\n\n\n\n\n\n\npar(mfrow = c(1, 1)) # reset layout\n\nSimilarly, we can plot elements from a data frame using either the atomic or formula methods. Here is a simple example using the aq dataset that we created earlier.\n\n# with(aq,  tinyplot(Day, Temp)) # atomic method (same as below)\ntinyplot(Temp ~ Day, data = aq)  # formula method\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip: plt() shorthand alias\n\n\n\nUse the plt() alias instead of tinyplot() to save yourself a few keystrokes. For example:\n\nplt(Temp ~ Day, data = aq)\n\nFeel free to try this shorthand with any of the plots that follow; tinyplot(&lt;args&gt;) and plt(&lt;args&gt;) should produce identical results."
  },
  {
    "objectID": "vignettes/introduction.html#grouped-data",
    "href": "vignettes/introduction.html#grouped-data",
    "title": "Introduction to tinyplot",
    "section": "Grouped data",
    "text": "Grouped data\nWhere tinyplot starts to diverge from its base counterpart is with respect to grouped data. In particular, tinyplot allows you to characterize groups using the by argument.1\n\n# tinyplot(aq$Day, aq$Temp, by = aq$Month) # same as below\nwith(aq, tinyplot(Day, Temp, by = Month))\n\n\n\n\n\n\n\n\nAn arguably more convenient approach is to use the equivalent formula syntax. Just place the “by” grouping variable after a vertical bar (i.e., |).\n\ntinyplot(Temp ~ Day | Month, data = aq)\n\n\n\n\n\n\n\n\nYou can use standard base plotting arguments to adjust features of your plot. For example, change pch (plot character) to get filled points and cex (character expansion) to change their size.\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  pch = 16,\n  cex = 2\n)\n\n\n\n\n\n\n\n\nSimilarly, converting to a grouped line plot is a simple matter of adjusting the type argument.\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  type = \"l\"\n)\n\n\n\n\n\n\n\n\nThe default behaviour of tinyplot is to represent groups through colour. However, note that we can automatically adjust pch and lty by groups too by passing the \"by\" convenience keyword. This can be used in conjunction with the default group colouring. Or, as a replacement for group colouring—an option that may be particularly useful for contexts where colour is expensive or prohibited (e.g., certain academic journals).\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  type = \"l\",\n  col = \"black\", # override automatic group colours\n  lty = \"by\"     # change line type by group instead\n)\n\n\n\n\n\n\n\n\nThe \"by\" convenience argument is also available for mapping group colours to background fill bg (alias fill). One use case is to override the grouped border colours for filled plot characters and instead pass them through the background fill.\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  pch = 21,      # use filled circles\n  col = \"black\", # override automatic group (border) colours of points\n  fill = \"by\"    # use background fill by group instead\n)"
  },
  {
    "objectID": "vignettes/introduction.html#colours",
    "href": "vignettes/introduction.html#colours",
    "title": "Introduction to tinyplot",
    "section": "Colours",
    "text": "Colours\nOn the subject of group colours, the default palette should adjust automatically depending on the class and cardinality of the grouping variable. For example, a sequential (“viridis”) palette will be used if an ordered factor is detected.\n\ntinyplot(\n  Temp ~ Day | ordered(Month), data = aq,\n  pch = 16\n)\n\n\n\n\n\n\n\n\nHowever, this behaviour is easily customized via the palette argument. The default set of discrete colours are inherited from the user’s current global palette. (Most likely the “R4” set of colors; see ?palette). However, all of the various palettes listed by palette.pals() and hcl.pals() are supported as convenience strings.2 Note that case-insensitive, partial matching for these convenience strings is allowed. For example:\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  type = \"l\",\n  palette = \"tableau\" # or \"ggplot\", \"okabe\", \"set2\", \"harmonic\", etc.\n)\n\n\n\n\n\n\n\n\nBeyond these convenience strings, users can also supply a valid palette-generating function for finer control and additional options.3 You can also use the alpha argument to adjust the (alpha) transparency of your colours.\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  pch = 19, cex = 2,\n  palette = \"tableau\",\n  alpha = 0.3\n)\n\n\n\n\n\n\n\n\nTo underscore what we said earlier, colours are inherited from the user’s current palette. So these can also be set globally, just as they can for the base plot function. The next code chunk will set a new default palette for the remainder of the plots that follow.\n\n# Set the default palette globally via the generic palette function\npalette(\"tableau\")"
  },
  {
    "objectID": "vignettes/introduction.html#legend",
    "href": "vignettes/introduction.html#legend",
    "title": "Introduction to tinyplot",
    "section": "Legend",
    "text": "Legend\nIn all of the preceding plots, you will have noticed that we get an automatic legend. The legend position and look can be customized with the legend argument. At a minimum, you can pass the familiar legend position keywords as a convenience string (\"topright\", \"bottom\", etc.). Moreover, a key feature of tinyplot is that we can easily and elegantly place the legend outside the plot area by adding a trailing “!” to these keywords. (As you may have realised, the default legend position is \"right!\".) Let’s demonstrate by moving the legend to the left of the plot.\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  type = \"l\",\n  legend = \"left!\"\n)\n\n\n\n\n\n\n\n\nBeyond the convenience of these positional keywords, the legend argument also permits additional customization in the form of a list of arguments, which will be passed on to the standard legend() function internally. So you can change or turn off the legend title, remove the bounding box, switch the direction of the legend text to horizontal, etc. Here is a grouped density plot example, where we also add some shading by specifying that the background colour should vary by groups too.\n\ntinyplot(\n  ~ Temp | Month,\n  data = aq,\n  type = \"density\",\n  fill = \"by\",                         # add fill by groups\n  grid = TRUE,                         # add background grid\n  legend = list(\"topright\", bty = \"o\") # change legend features\n)\n\n\n\n\n\n\n\n\nAll of the legend examples that we have seen thus far are representations of discrete groups. However, please note that tinyplot also supports grouping by continuous variables, which automatically yield gradient legends.\n\ntinyplot(Temp ~ Wind | Ozone, data = aq, pch = 19)\n\n\n\n\n\n\n\n\nGradient legends (and plots) can be customized in an identical manner to discrete legends by adjusting the keyword positioning, palette choice, alpha transparency, etc. Here is a quick adaptation of the previous plot to demonstrate.\n\ntinyplot(\n  Temp ~ Wind | Ozone, data = aq,\n  pch  = 21,      # use filled plot character\n  cex  = 2,\n  col  = \"black\", # override automatic (grouped) border colour of points\n  fill = 0.5,     # use background fill instead with added alpha transparency \n)\n\n\n\n\n\n\n\n\nAs an aside, note that we passed a numeric convenience argument to fill (alias bg) above. Specifically, when fill is given as a numeric in the range of [0,1] then it automatically inherits the grouped colour mappings, but with corresponding alpha transparency."
  },
  {
    "objectID": "vignettes/introduction.html#more-plot-types",
    "href": "vignettes/introduction.html#more-plot-types",
    "title": "Introduction to tinyplot",
    "section": "More plot types",
    "text": "More plot types\nWe’ve already seen several plot types, such as \"p\" (points), \"l\" (lines), and \"density\". In general, tinyplot supports all the primitive plot types and elements available in base R, along with a number of additional types that can be tedious to code manually. You can find the full list of in the dedicated Plot Types vignette. For the moment, we’ll content ourselves with a few illustrative examples.\nOne such example is the family of “interval” plots provided by the \"pointrange\",\"errorbar\", \"ribbon\", and related types. A canonical use-case is coefficient plots.\n\nmod = lm(Temp ~ 0 + Month / Day, data = aq)\n\n# grab coefs of interest\nmonthcoefs = data.frame(\n  gsub(\"Month\", \"\", names(coef(mod))),\n  coef(mod),\n  confint(mod)\n  ) |&gt;\n  setNames(c(\"term\", \"estimate\", \"ci_low\", \"ci_high\")) |&gt;\n  subset(!grepl(\"Day\", term))\n\n# plot\ntinyplot(\n  estimate ~ term,\n  ymin = ci_low, ymax = ci_high,\n  data = monthcoefs,\n  type = \"pointrange\", # or: \"errobar\", \"ribbon\"\n  pch = 19, col = \"dodgerblue\",\n  grid = TRUE,\n  main = \"Average Monthly Effect on Temperature\"\n)\n\n\n\n\n\n\n\n\nNote that tinyplot also supports special types to fit models and display their predictions, along with confidence intervals. Here is a somewhat silly example where we fit a linear model to predict temperature by day of month.4\n\ntinyplot(\n  Temp ~ Day | Month, aq,\n  type = \"lm\",\n  grid = TRUE,\n  main = \"Linear model\"\n)\n\n\n\n\n\n\n\n\nThe default behaviour of these model types can be adjusted by passing appropriate arguments to the equivalent functional version of the type in question. These functional types all follow a type_&lt;typename&gt; syntax, so that \"lm\" is paired with type_lm(), etc. Below we illustrate with an adapted generalised linear model, where we fit a logistic regression passing explicitly passing the binomial family argument.\n\ntinyplot(\n  I(Temp &gt; 75) ~ Wind, aq,\n  type = type_glm(family = binomial),\n  main = \"Logit model: Temps above 75 °F\"\n)\n\n\n\n\n\n\n\n\nWe will see examples of more plot types below, including other model prediction types. Again, please also take a look at the dedicated Plot Types vignette for explicit details about all of the different plot types that tinyplot supports, as well as how to create your own custom types. You can also request support for additional plot types, or see what’s on our roadmap, by heading over to this pinned issue on our GitHub repo."
  },
  {
    "objectID": "vignettes/introduction.html#facets",
    "href": "vignettes/introduction.html#facets",
    "title": "Introduction to tinyplot",
    "section": "Facets",
    "text": "Facets\nAlongside the standard “by” grouping approach that we have seen thus far, tinyplot also supports faceted plots. Mirroring the main tinyplot function, the facet argument accepts both atomic and formula methods. In general, however, we recommend the formula version as being safer since it does a better job of handling missing values.\n\ntinyplot(\n  Temp ~ Day, aq,\n  facet = ~Month, ## &lt;= facet, not by\n  type = \"lm\",\n  grid = TRUE,\n  main = \"Predicted air temperatures\"\n)\n\n\n\n\n\n\n\n\nFacets are easily combined with grouping. This can either be done separately (i.e., distinct arguments for by and facet), or along the same dimension. For the latter case, we provide a special facet = \"by\" convenience shorthand.\n\ntinyplot(\n  Temp ~ Day | Month, aq,\n  facet = \"by\", # facet along same dimension as groups\n  type = \"lm\",\n  grid = TRUE,\n  main = \"Predicted air temperatures\"\n)\n\n\n\n\n\n\n\n\nTo customize facets, simply pass a list of named arguments through the companion facet.args argument. Customization options include: override the default “square” facet window arrangement; allow free-scaled axes so that the limits of each individual facet are drawn independently; adjust the padding (margin) between individual facets; change the facet title text and background; etc. Here is a simple example where we (1) arrange the facets in a single row, (2) add some background fill to the facet text, and (3) and reduce axis redundancy by turning off the plot frame.\n\ntinyplot(\n  Temp ~ Day, aq,\n  facet = ~Month, facet.args = list(nrow = 1, bg = \"grey90\"),\n  type = \"lm\",\n  grid = TRUE,\n  frame = FALSE, # turning off the plot frame means only outer axes will be printed\n  main = \"Predicted air temperatures\"\n)\n\n\n\n\n\n\n\n\nThe facet.args customizations can also be set globally via the tpar() function, or as part of a dedicated tinytheme(). We will revisit this idea in the Themes section below.\nFinally, the facet argument also accepts a two-sided formula for arranging facets in a fixed grid layout. Here is a simple (if contrived) example.\n\ntinyplot(\n  Temp ~ Day, data = aq,\n  facet = windy ~ hot,\n  # the rest of these arguments are optional...\n  facet.args = list(col = \"white\", bg = \"black\"),\n  pch = 16, col = \"dodgerblue\",\n  grid = TRUE, frame = FALSE, ylim = c(50, 100),\n  main = \"Temps versus wind\"\n)"
  },
  {
    "objectID": "vignettes/introduction.html#layers",
    "href": "vignettes/introduction.html#layers",
    "title": "Introduction to tinyplot",
    "section": "Layers",
    "text": "Layers\nIn many contexts, it is convenient to build plots step-by-step, adding layers with different elements on top of a base. The tinyplot package offers a few ways to achieve this layering effect.\nSimilar to many base plotting functions, users can invoke the tinyplot(..., add=TRUE) argument to draw a plot on top of an existing one, rather than opening a new window. However, while this argument is useful, it can become verbose since it requires users to make very similar successive calls, with many shared arguments.\nFor this reason, tinyplot provides a special tinyplot_add() convenience function for adding layers to an existing tinyplot. The idea is that users need simply pass the specific arguments that they want to add or modify relative to the base layer; all others arguments will be inherited from the original call.\nAn example may help to demonstrate. Here we first draw some faceted points with group colouring and various other aesthetic tweaks. Next, we add regression fits with a simple tinyplot_add(type = \"lm\") call. Notice that the original grouping, data and aesthetic options are all carried over correctly, without having to repeat ourselves.\n\ntinyplot(\n  Temp ~ Day | Month, aq,\n  facet = \"by\", facet.args = list(bg = \"grey90\"),\n  palette = \"dark2\",\n  legend = FALSE,\n  grid = TRUE,\n  axes = \"l\",\n  ylim = c(50, 100),\n  main = \"Actual and predicted air temperatures\"\n)\n# Add regression fits\ntinyplot_add(type = \"lm\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip: plt_add() shorthand alias\n\n\n\nMuch like plt() is an alias for tinyplot(), you can save yourself a few keystrokes by typing plt_add() instead of tinyplot_add():\n\nplt_add(type = \"lm\")\n\n\n\nA related—but distinct—concept to adding plot layers is drawing on a plot. The canonical use case is annotating your plot with text or some other function-based (rather than data-based) logic. For example, you may want to demarcate some threshold values with horizontal or vertical lines, or simply annotate your plot with text. The tinyplot way to do this is by passing the tinyplot(..., draw = &lt;draw_function&gt;) argument. Here we demonstrate with a simplified version of our facet grid example from earlier.\n\ntinyplot(\n Temp ~ Day, data = aq,\n facet = windy ~ hot,\n # draw a horizontal (threshold) line in each facet using the abline function\n draw = abline(h = 75, lty = 2, col = \"hotpink\")\n)\n\n\n\n\n\n\n\n\nCompared to “manually” drawing these elements on a plot ex post—e.g., via a separate abline() call—there are several advantages to the idiomatic tinyplot interface. First, the draw argument is facet-aware and will ensure that each individual facet is correctly drawn upon. Second, you can leverage the special ii internal counter to draw programmatically across facets (see here). Third, the draw argument is fully generic and accepts any drawing/annotating function. You can combine multiple drawing functions by wrapping them with curly brackets{}, and even pass tinyplot() back towards itself.\nHere is a slightly more complicated “spaghetti” plot example, where we pass multiple functions through draw = {...}, including drawing all of the lines in the background (of each facet) via a secondary tinyplot() call.\n\ntinyplot(\n  Temp ~ Day | Month, aq, facet = \"by\", lwd = 3, type = \"l\",\n  frame = FALSE, legend = FALSE, ylim = c(50, 100),\n  draw = {\n    tinyplot(Temp ~ Day | Month, aq, col = \"grey\", type = \"l\", add = TRUE)\n    abline(h = 75, lty = 2)\n    text(5.5, 75, \"Cold\", pos = 1, offset = 0.4)\n    text(5.5, 75, \"Hot\", pos = 3, offset = 0.4)\n  }\n)"
  },
  {
    "objectID": "vignettes/introduction.html#themes",
    "href": "vignettes/introduction.html#themes",
    "title": "Introduction to tinyplot",
    "section": "Themes",
    "text": "Themes\nIn the examples thus far, we have adjusted our plot aesthetics manually by tweaking individual arguments and settings. A more convenient way to change the look of your plots is by calling the tinytheme() function. This will modify several graphical settings simultaneously to match a variety of pre-defined styles. In addition to convenience, themes have the added benefit of enabling dynamic adjustment of the plot regions, so that excess whitespace is reduced and long text strings (e.g., horizontal axis labels) are accounted for. Please see the ?tinytheme help page, as well as the dedicated Themes vignette for a detailed overview of tinyplot’s theming functionality. Here we provide a small taster by applying the “dark” theme to one of our earlier plots.\n\n# apply theme\ntinytheme(\"dark\")\n\n# plot\ntinyplot(\n  Temp ~ Wind | Ozone, data = aq,\n  main = \"An example of a tinytheme() in action\",\n  sub = \"Notice that the subtitle is above the plot\"\n)\n\n\n\n\n\n\n\n\n\n# reset theme to default\ntinytheme()"
  },
  {
    "objectID": "vignettes/introduction.html#saving-plots",
    "href": "vignettes/introduction.html#saving-plots",
    "title": "Introduction to tinyplot",
    "section": "Saving plots",
    "text": "Saving plots\nA final point to note is that tinyplot offers convenience features for exporting plots to disk. Simply invoke the file argument to specify the relevant file path (including the extension type). You can customize the output dimensions (in inches) via the accompanying width and height arguments.5\n\ntinyplot(\n  Temp ~ Day | Month, data = aq,\n  file = \"aq.png\", width = 8, height = 5\n)\n\n# optional: delete the saved plot\nunlink(\"aq.png\")\n\nAlongside convenience, the benefit of this native tinyplot approach (versus the traditional approach of manually opening an external graphics device, e.g. png()) is that all of your current graphic settings are automatically carried over to the exported file. Feel free to try yourself by setting some global graphics parameters via tpar() and then using file to save a plot."
  },
  {
    "objectID": "vignettes/introduction.html#conclusion",
    "href": "vignettes/introduction.html#conclusion",
    "title": "Introduction to tinyplot",
    "section": "Conclusion",
    "text": "Conclusion\nThe goal of this tutorial has been to give you a clear sense of how tinyplot works and what it offers. The take-home pitch is simple: you get to use the same syntax as base R plot(), but with the added benefit of many additional plot types and user-friendly features. Finally, it’s worth noting that tinyplot has no dependencies other than base R itself. We hope that this makes it an attractive and lightweight option for package developers (and regular R users!) who want to create convenient, sophisticated plots with minimal overhead.\nBelieve it or not, there’s still plenty of tinyplot functionality that we didn’t cover here. If you’d like to keep exploring, we recommend continuing with the Plot types and Themes vignettes. Happy tinyplotting!"
  },
  {
    "objectID": "vignettes/introduction.html#footnotes",
    "href": "vignettes/introduction.html#footnotes",
    "title": "Introduction to tinyplot",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAt this point, experienced base plot users might protest that you can colour by groups using the col argument, e.g. with(aq, plot(Day, Temp, col = Month)). This is true, but there are several limitations. First, you don’t get an automatic legend. Second, the base plot.formula method doesn’t specify the grouping within the formula itself (not a deal-breaker, but not particularly consistent either). Third, and perhaps most importantly, this grouping doesn’t carry over to line plots (i.e., type=“l”). Instead, you have to transpose your data and use matplot. See this old StackOverflow thread for a longer discussion.↩︎\nSee the accompanying help pages of those two functions for more details on the available palettes, or read Zeileis & Murrell (2023, The R Journal, doi:10.32614/RJ-2023-071).↩︎\nFor example, if you have installed the ggsci package (link) then you could use palette = pal_npg() to generate a palette consistent with those used by the Nature Publishing Group.↩︎\nThe grouped setting here makes this visualization equivalent to predict(lm(Temp ~ 0 + Month / Day, data = aq), interval = \"confidence\").↩︎\nThe default dimensions are 7x7, with a resolution of 300 DPI. However, these too can be customized via the file.width, file.height, and file.res parameters in tpar().↩︎"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#disclaimer",
    "href": "vignettes/useR2025/useR2025.html#disclaimer",
    "title": "",
    "section": "Disclaimer",
    "text": "Disclaimer\ntinyplot was developed in my own time and does not relate to my position at Amazon.\nAll views expressed during this talk are my own, and do not necessarily reflect the views of my employer."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#baseplot",
    "href": "vignettes/useR2025/useR2025.html#baseplot",
    "title": "",
    "section": "base::plot",
    "text": "base::plot\nSimple scatter plot\n\nplot(bill_dep ~ bill_len, data = penguins)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#baseplot-1",
    "href": "vignettes/useR2025/useR2025.html#baseplot-1",
    "title": "",
    "section": "base::plot",
    "text": "base::plot\nLet’s add some grouping\n\nplot(bill_dep ~ bill_len, data = penguins, col = species)\n\n\nNB: col = species works here because species is a factor."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#baseplot-2",
    "href": "vignettes/useR2025/useR2025.html#baseplot-2",
    "title": "",
    "section": "base::plot",
    "text": "base::plot\nAdd a legend\n\nplot(bill_dep ~ bill_len, data = penguins, col = species)\nlegend(\"topright\", legend = unique(penguins$species), col = 1:3, pch = 1, title = \"Species\")\n\n\n\nQ: Can you spot the error?"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#baseplot-3",
    "href": "vignettes/useR2025/useR2025.html#baseplot-3",
    "title": "",
    "section": "base::plot",
    "text": "base::plot\nAdd a legend\n\nplot(bill_dep ~ bill_len, data = penguins, col = species)\nlegend(\"topright\", legend = levels(penguins$species), col = 1:3, pch = 1, title = \"Species\")\n\n\nA: We should have used levels(species), not unique(species)."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#baseplot-4",
    "href": "vignettes/useR2025/useR2025.html#baseplot-4",
    "title": "",
    "section": "base::plot",
    "text": "base::plot\nHow about a different plot type?\n\nplot(bill_dep ~ bill_len, data = penguins, col = species, type = 'b')\n\n\nUgh… our grouped coloring logic only works for the “points” components."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#baseplot-5",
    "href": "vignettes/useR2025/useR2025.html#baseplot-5",
    "title": "",
    "section": "base::plot",
    "text": "base::plot\nProblems and pitfalls of our base plot approach\n\nHow do we automate the legend mapping and avoid manual error?\nWhat if we want to place the legend outside of the plot region?\nHow do we group by additional variables?\nWhat if we want groups with a different plot type (e.g, lines)?\nWhat if we need to group by a continuous variable?\nWhat if we need to facet by another variable?\nWhat if we want to add a summary function, e.g. regression fit?\nThe plots are kind of ugly. Can we make them look better?\n…"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplotplt",
    "href": "vignettes/useR2025/useR2025.html#tinyplotplt",
    "title": "",
    "section": "tinyplot::plt",
    "text": "tinyplot::plt\nSimplest case: drop-in replacement for base::plot\n\nplt(bill_dep ~ bill_len, data = penguins)\n\n\n\nBut we can do a lot more than that…"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplotplt-1",
    "href": "vignettes/useR2025/useR2025.html#tinyplotplt-1",
    "title": "",
    "section": "tinyplot::plt",
    "text": "tinyplot::plt\nHow do we automate the legend mapping?\n\nplt(bill_dep ~ bill_len | species, data = penguins)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplotplt-2",
    "href": "vignettes/useR2025/useR2025.html#tinyplotplt-2",
    "title": "",
    "section": "tinyplot::plt",
    "text": "tinyplot::plt\nHow do we group by additional variables?\n\nplt(bill_dep ~ bill_len | sex + species, data = penguins, pch = \"by\")"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplotplt-3",
    "href": "vignettes/useR2025/useR2025.html#tinyplotplt-3",
    "title": "",
    "section": "tinyplot::plt",
    "text": "tinyplot::plt\nWhat if we want groups with a different plot type?\n\nplt(bill_dep ~ bill_len | species, data = penguins, type = \"b\")"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplotplt-4",
    "href": "vignettes/useR2025/useR2025.html#tinyplotplt-4",
    "title": "",
    "section": "tinyplot::plt",
    "text": "tinyplot::plt\nWhat if we need to group by a continuous variable?\n\nplt(bill_dep ~ bill_len | body_mass, data = penguins)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplotplt-5",
    "href": "vignettes/useR2025/useR2025.html#tinyplotplt-5",
    "title": "",
    "section": "tinyplot::plt",
    "text": "tinyplot::plt\nWhat if we need to facet by another variable?\n\nplt(bill_dep ~ bill_len | species, data = penguins, facet = ~island)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplotplt-6",
    "href": "vignettes/useR2025/useR2025.html#tinyplotplt-6",
    "title": "",
    "section": "tinyplot::plt",
    "text": "tinyplot::plt\nWhat if we want to add a summary function, e.g. regression fit?\n\nplt(bill_dep ~ bill_len | species, data = penguins, facet = ~island)\nplt_add(type = \"lm\")"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplotplt-7",
    "href": "vignettes/useR2025/useR2025.html#tinyplotplt-7",
    "title": "",
    "section": "tinyplot::plt",
    "text": "tinyplot::plt\nThe plots are kind of ugly. Can we make them look better?\n\ntinytheme(\"clean\") # or \"clean2\", \"minimal\", \"ipsum\", \"dark\", \"tufte\", ...\nplt(bill_dep ~ bill_len | species, data = penguins, facet = ~island)\nplt_add(type = \"lm\")\n\n\nNB: Themes are persistent; subsequent (tiny)plots will inherit this aesthetic."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#origin-story",
    "href": "vignettes/useR2025/useR2025.html#origin-story",
    "title": "",
    "section": "Origin story",
    "text": "Origin story\nTwo sources of frustration:\nPackage development 📦\n\nAnnoying trade-offs for supporting basic viz. methods for my packages.\n“I just need a simple errorbar here. Do I really have to finagle segments to make this work?” “What about a legend..?”\n\nTeaching 🎓\n\nTeach simple viz. approaches vs. scalability down the road.\nBase plotting is great for simple plots, but quickly loses its appeal for more complex plots. (And ggplot2/lattice have different APIs.)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#grid-vs-graphics",
    "href": "vignettes/useR2025/useR2025.html#grid-vs-graphics",
    "title": "",
    "section": "grid vs graphics",
    "text": "grid vs graphics\nR has two low-level graphics systems\n\nNote: Adapted from Murrell (2023)."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#base-graphics-in-r",
    "href": "vignettes/useR2025/useR2025.html#base-graphics-in-r",
    "title": "",
    "section": "Base graphics in R",
    "text": "Base graphics in R\nVery flexible… but tricksy\n\n\nBase graphics can produce amazing plots.\n\n\nplot() is just an (opinionated) wrapper around lower-level functions. (Koncevičius 2022)\n\n\n\n\nThis is very powerful in expert hands. (Mayakonda 2022)\n\n\n\n\n\n\n\n\n\nBut going beyond the defaults is often (much) more work that I want to do."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#grid-vs-graphics-redux",
    "href": "vignettes/useR2025/useR2025.html#grid-vs-graphics-redux",
    "title": "",
    "section": "grid vs graphics (redux)",
    "text": "grid vs graphics (redux)\nR has two low-level graphics systems\n\n\n\n\nNote: Adapted from Murrell (2023).\n\n\n\n\n\nNote: Adapted from Murrell (2023).\n\n\n\n\ntinyplot goals:\n\nMake base R graphics more user-friendly.\nImproved feature parity vs. grid-based 📦s like ggplot2 and lattice."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#origin-story-1",
    "href": "vignettes/useR2025/useR2025.html#origin-story-1",
    "title": "",
    "section": "Origin story 🤝",
    "text": "Origin story 🤝\nCollaboration\nA basic version of the core routine (then called “plot2.R”) sat on my computer for a long time.\nI eventually packaged it up… and invited two key collaborators:\n\n\n\n\n\n\n\n\nVincent Arel-Bundock\n\n\n\n\n\n\n\nAchim Zeileis\n\n\n\n\n\n\nVincent and Achim have helped push tinyplot far beyond my original goals."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplot-api-1",
    "href": "vignettes/useR2025/useR2025.html#tinyplot-api-1",
    "title": "",
    "section": "tinyplot API",
    "text": "tinyplot API\nGroup(s) after the pipe |\n\none grouptwo groups\n\n\n\n\nplt(\n  bill_dep ~ bill_len | species,\n  data = penguins\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt(\n  bill_dep ~ bill_len | sex + species,\n  data = penguins\n)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplot-api-2",
    "href": "vignettes/useR2025/useR2025.html#tinyplot-api-2",
    "title": "",
    "section": "tinyplot API",
    "text": "tinyplot API\nGroups map to colors; use the \"by\" keyword for other mappings\n\n\nplt(\n  bill_dep ~ bill_len | species,\n  data = penguins,\n  pch = \"by\"\n)\n\n\n\n\n\n\n\n\n\nAlso works for lwd, lty, etc."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplot-api-3",
    "href": "vignettes/useR2025/useR2025.html#tinyplot-api-3",
    "title": "",
    "section": "tinyplot API",
    "text": "tinyplot API\nLegend can be moved, customized and turned off\n\n“left!”“bottom!”“bottomright”FALSE\n\n\n\n\nplt(\n  bill_dep ~ bill_len | species,\n  data = penguins,\n  legend = \"left!\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt(\n  bill_dep ~ bill_len | species,\n  data = penguins,\n  legend = list(\"bottom!\", title = NULL)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt(\n  bill_dep ~ bill_len | species,\n  data = penguins,\n  legend = list(\"bottomright\", bty = \"o\")\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt(\n  bill_dep ~ bill_len | species,\n  data = penguins,\n  legend = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\nA \"!\" suffix places the legend outside the plot area."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplot-api-4",
    "href": "vignettes/useR2025/useR2025.html#tinyplot-api-4",
    "title": "",
    "section": "tinyplot API",
    "text": "tinyplot API\nfacets\n\none-sidedone-sided (2)two-sidedouter-axesfree\n\n\n\n\nplt(\n  bill_dep ~ bill_len | species,\n  data = penguins,\n  facet = ~island\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt(\n  bill_dep ~ bill_len | species,\n  data = penguins,\n  facet = ~ sex + island\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt(\n  bill_dep ~ bill_len | species,\n  data = penguins,\n  facet = sex ~ island\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\ntinytheme(\"clean2\")\n\nplt(\n  bill_dep ~ bill_len | species,\n  data = penguins,\n  # frame = FALSE, ## non-theme option\n  facet = ~ sex + island\n)\n\n\n\n\n\n\n\n\ntinytheme('clean') # revert theme\n\n\n\n\n\nplt(\n  bill_dep ~ bill_len | species,\n  data = penguins,\n  facet = ~ sex + island,\n  facet.args = list(free = TRUE)\n)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplot-api-5",
    "href": "vignettes/useR2025/useR2025.html#tinyplot-api-5",
    "title": "",
    "section": "tinyplot API",
    "text": "tinyplot API\ntypes\nAll tinyplot types can be passed as either a:\n\nstring (\"p\", \"density, \"lm\", …), or\nfunction (type_points(), type_density(), type_lm(), …)\n\nIn general, the functional equivalents are denoted type_*() and support direct argument passing for customization, e.g.\n\n?type_lm\nargs(type_lm)\n\nfunction (se = TRUE, level = 0.95) \nNULL\n\n\n\n\n\n\n\n\nNote\n\n\nCustom args can also be passed through plt(...), so long as there isn’t a top-level clash."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplot-api-6",
    "href": "vignettes/useR2025/useR2025.html#tinyplot-api-6",
    "title": "",
    "section": "tinyplot API",
    "text": "tinyplot API\ntypes\n\n“lm”“density”\n\n\n\n\nplt(\n  bill_dep ~ bill_len | species,\n  data = penguins,\n  type = \"lm\", level = 0.8      # string\n  # type = type_lm(level = 0.8) # function\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt(\n  ~ bill_len | species,\n  data = penguins,\n  type = \"density\"        # string\n  # type = type_density() # function\n)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplot-api-7",
    "href": "vignettes/useR2025/useR2025.html#tinyplot-api-7",
    "title": "",
    "section": "tinyplot API",
    "text": "tinyplot API\nLayers\n\n“p” + “lm”“density” + “rug”\n\n\n\n\nplt(\n  bill_dep ~ bill_len | species,\n  data = penguins\n)\nplt_add(type = \"lm\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt(\n  ~ bill_len | species,\n  data = penguins,\n  type = \"density\"\n)\nplt_add(type = \"rug\")"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplot-api-8",
    "href": "vignettes/useR2025/useR2025.html#tinyplot-api-8",
    "title": "",
    "section": "tinyplot API",
    "text": "tinyplot API\nThemes\nThemes provide a convenient way to set a preferred aesthetic for your plots.\n\nDynamic reduction of whitespace, etc.\nRemember: tinytheme(...) is persistent.\n\nQuick plotting function, which we’ll re-use for showcasing some themes on the next slide:\n\np = function() plt(\n    body_mass ~ flipper_len | bill_len, penguins,\n    facet = ~sex, yaxl = \",\",\n    main = \"Palmer penguins\",\n    sub = \"Brought to you by tinyplot!\"\n)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplot-api-9",
    "href": "vignettes/useR2025/useR2025.html#tinyplot-api-9",
    "title": "",
    "section": "tinyplot API",
    "text": "tinyplot API\nThemes\n\n“default”“tufte”“classic”“clean”“clean2”“minimal”“ipsum”“dark”custom\n\n\n\n\ntinytheme()\np()\n\n\n\n\n\n\n\n\n\n\n\n\n\ntinytheme(\"tufte\")\np()\n\n\n\n\n\n\n\n\n\n\n\n\n\ntinytheme(\"classic\")\np()\n\n\n\n\n\n\n\n\n\n\n\n\n\ntinytheme(\"clean\")\np()\n\n\n\n\n\n\n\n\n\n\n\n\n\ntinytheme(\"clean2\")\np()\n\n\n\n\n\n\n\n\n\n\n\n\n\ntinytheme(\"minimal\")\np()\n\n\n\n\n\n\n\n\n\n\n\n\n\ntinytheme(\"ipsum\")\np()\n\n\n\n\n\n\n\n\n\n\n\n\n\ntinytheme(\"dark\")\np()\n\n\n\n\n\n\n\n\n\n\n\n\n\ntinytheme(\n  \"ipsum\",\n  pch = 19,\n  cex = 1.2, cex.main = 2,\n  cex.sub = 1.5, cex.lab = 1.5,\n  palette.sequential = \"zissou\",\n  family =\"HersheyScript\"\n)\np()"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#other-features",
    "href": "vignettes/useR2025/useR2025.html#other-features",
    "title": "",
    "section": "Other features",
    "text": "Other features\nMany other bells and whistles\n\nEasily export plots with the file argument.\nEasy alpha transparency with the alpha and fill arguments.\nTransform axis labels (x/yaxl) and breaks (x/yaxb).\nCustom types.\netc."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#quickfire-gallery-1",
    "href": "vignettes/useR2025/useR2025.html#quickfire-gallery-1",
    "title": "",
    "section": "Quickfire gallery",
    "text": "Quickfire gallery\nhistogram\n\n\ntinytheme(\"clean\")\npal = c(\"darkorange\",\"purple\",\"cyan4\")\n\nplt(\n  ~flipper_len | species,\n  data = penguins, \n  type = \"hist\",\n  breaks = 30,\n  palette = pal\n)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#quickfire-gallery-2",
    "href": "vignettes/useR2025/useR2025.html#quickfire-gallery-2",
    "title": "",
    "section": "Quickfire gallery",
    "text": "Quickfire gallery\nbox plots\n\n\nplt(\n  body_mass ~ species | sex,\n  data = penguins,\n  type = \"boxplot\", \n  yaxl = \",\",\n  flip = TRUE\n)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#quickfire-gallery-3",
    "href": "vignettes/useR2025/useR2025.html#quickfire-gallery-3",
    "title": "",
    "section": "Quickfire gallery",
    "text": "Quickfire gallery\nviolin plots\n\n\nplt(\n  body_mass ~ species | sex,\n  data = penguins,\n  type = \"violin\", \n  yaxl = \",\",\n  flip = TRUE,\n  fill = 0.5\n)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#quickfire-gallery-4",
    "href": "vignettes/useR2025/useR2025.html#quickfire-gallery-4",
    "title": "",
    "section": "Quickfire gallery",
    "text": "Quickfire gallery\nerror bars\n\n\nmod = lm(body_mass ~ species + sex,\n         data = penguins)\ncoefs = data.frame(\n  names(coef(mod)),\n  coef(mod),\n  confint(mod)\n) |&gt; setNames(c(\"term\", \"estimate\",\n                \"lwr\", \"upr\"))\n\nplt(\n  estimate ~ term,\n  ymin = lwr, ymax = upr,\n  data = coefs,\n  type = \"errorbar\"\n)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#quickfire-gallery-5",
    "href": "vignettes/useR2025/useR2025.html#quickfire-gallery-5",
    "title": "",
    "section": "Quickfire gallery",
    "text": "Quickfire gallery\nrectangles\n\n\ni = 4*(0:10)\n\nplt(\n  xmin = 100+i, xmax = 150+i,\n  ymin = 300+i, ymax = 380+i,\n  by = i, fill = 0.2,\n  type = \"rect\"\n)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#quickfire-gallery-6",
    "href": "vignettes/useR2025/useR2025.html#quickfire-gallery-6",
    "title": "",
    "section": "Quickfire gallery",
    "text": "Quickfire gallery\nspineplot\n\n\nttnc = as.data.frame(Titanic)\nwts = ttnc$Freq\n\nplt(\n  Survived ~ Sex | Class, facet = \"by\",\n  data = ttnc,\n  type = type_spineplot(weights = wts)\n)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#quickfire-gallery-7",
    "href": "vignettes/useR2025/useR2025.html#quickfire-gallery-7",
    "title": "",
    "section": "Quickfire gallery",
    "text": "Quickfire gallery\nridge plot\n\n\ntinytheme(\"ridge2\")\n\naq = transform(\n  airquality,\n  Month = factor(\n    month.abb[Month],\n    levels = month.abb[5:9]\n  )\n)\n  \nplt(Month ~ Temp | Temp,\n  data = aq,\n  type = type_ridge(col = \"white\")\n)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#sec-adv",
    "href": "vignettes/useR2025/useR2025.html#sec-adv",
    "title": "",
    "section": "Advantages of tinyplot",
    "text": "Advantages of tinyplot\nThe sales pitch summary\n\nConcise\nConsistent\nErgonomic\nExtensive\nLightweight\n\nFor the longer version: tinyplot pros"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#sec-disadv",
    "href": "vignettes/useR2025/useR2025.html#sec-disadv",
    "title": "",
    "section": "Disadvantages of tinyplot",
    "text": "Disadvantages of tinyplot\nWhat are the caveats?\n\nLayering gotchas\nCustom layout\nMissing features\n\nFor the longer version: tinyplot pros"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#acknowledgements",
    "href": "vignettes/useR2025/useR2025.html#acknowledgements",
    "title": "",
    "section": "Acknowledgements",
    "text": "Acknowledgements\ntinyplot would not be where it is today without…\nThe R Core team:\n\nEspecially Paul Murrell, who has almost single-handedly built and maintained R’s graphics foundations for everyone else.\n\nMy wonderful tinyplot co-maintainers:\n\nVincent Arel-Bundock and Achim Zeileis\n\nMany other contributors, feedback providers, and a sources of inspiration.\n\nEtienne Bacher, etc.\nthe ggplot2 team (Hadley, Thomas, Teun, etc.)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#tinyplot",
    "href": "vignettes/useR2025/useR2025.html#tinyplot",
    "title": "",
    "section": "tinyplot",
    "text": "tinyplot\nLearn more\n\n\n\n\n grantmcdermott.com/tinyplot\n grantmcdermott/tinyplot"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#references",
    "href": "vignettes/useR2025/useR2025.html#references",
    "title": "",
    "section": "References",
    "text": "References\n\n\nKoncevičius, Karolis. 2022. “R Base Plotting Without Wrappers.” http://karolis.koncevicius.lt/posts/r_base_plotting_without_wrappers/.\n\n\nMayakonda, Anand. 2022. “Base Graphics in R.” https://poisonalien.github.io/basegraphics/.\n\n\nMurrell, Paul. 2023. “Updates to the R Graphics Engine: One Person’s Chart Junk is Another’s Chart Treasure.” The R Journal 15: 257–76. https://doi.org/10.32614/RJ-2023-072.\n\n\nViechtbauer, Wolfgang. 2025. “Open Online R Stream: The tinyplot Package.” https://github.com/wviechtb/oor_stream/blob/master/2025_03_20_tinyplot_package/oor_stream_2025_03_20_code.r."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#concise",
    "href": "vignettes/useR2025/useR2025.html#concise",
    "title": "",
    "section": "Concise",
    "text": "Concise\nThe formula API gives bang for buck\n\nP.S. Thanks to Ryan for letting me use this screenshot."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#concise-1",
    "href": "vignettes/useR2025/useR2025.html#concise-1",
    "title": "",
    "section": "Concise",
    "text": "Concise\nThe formula API gives bang for buck\nJust focusing on the core plot components…\n\n\nggplot(\n  simres,\n  aes(\n    x = true_effect, y = mean_loo_err,\n    color = factor(asym)\n    )\n  ) +\n  geom_point() +\n  geom_line() +\n  facet_wrap(~ exclude_ns)\n\nplt(\n  mean_loo_err ~ true_effect | factor(asym),\n  data = simres,\n  type = \"o\",\n  facet = ~ exlude_ns\n)\n\n(That’s about 1/3 fewer characters.)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#concise-2",
    "href": "vignettes/useR2025/useR2025.html#concise-2",
    "title": "",
    "section": "Concise",
    "text": "Concise\nConcision is even starker vs. vanilla base plot\n\n\n\n\nvs\n\n\nAdapted from Viechtbauer (2025)."
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#lightweight",
    "href": "vignettes/useR2025/useR2025.html#lightweight",
    "title": "",
    "section": "Lightweight",
    "text": "Lightweight\nBase R only\ntinyplot has zero third-party dependencies.\n\nCompares favourably against lattice (0 deps), ggplot2 (24 deps), tidyplots (111 deps), etc.\n\nWe’ve also kept the size of the install tarball down to a minimum (&lt;1 MB).\n\nAll “data heavy” artifacts are reserved for the tinyplot website (including a comprehensive test suite and set of vignettes).\n\nVery fast to install and play with in webR / WebAssembly. (Try it!)\n\nGreat for teaching or quick demos with colleagues.\n\nBack to main"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#layering-gotchas",
    "href": "vignettes/useR2025/useR2025.html#layering-gotchas",
    "title": "",
    "section": "Layering gotchas",
    "text": "Layering gotchas\nScaling is fixed by the first layer\n\nplt(body_mass ~ bill_len | species, penguins)\nplt_add(type = \"lm\")\n\n\n\nThis is a limitation of graphics “canvas” logic. (Workarounds: Change layer order, or use x/ylim.)"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#layering-gotchas-1",
    "href": "vignettes/useR2025/useR2025.html#layering-gotchas-1",
    "title": "",
    "section": "Layering gotchas",
    "text": "Layering gotchas\nCan’t combine file with plt_add (yet)\nThis doesn’t work:\nplt(..., file = \"myplot.png\")\nplt_add(type = ...)\n\nI’m hoping to provide a native solution in the future, but workarounds for now:\n\nUse plt(..., file = \"myplot.png\", draw = ...)\nOpen/close the appropriate graphics device manually, e.g. png(\"myplot.png\"); plt(...); plt_add(...); dev.off()"
  },
  {
    "objectID": "vignettes/useR2025/useR2025.html#missing-features",
    "href": "vignettes/useR2025/useR2025.html#missing-features",
    "title": "",
    "section": "Missing features",
    "text": "Missing features\nI hope that I have convinced you that tinyplot covers a lot of ground.\n\nThe API should also be very stable. I expect few (if any) breaking changes from here on out.\n\n\nStill, tinyplot is a relatively young project and there are some features and plot types that we don’t support (yet). Some things coming down the pike:\n\nbubble plots (#433)\ndodged elements (#406)\nmaps (#210)\n\n\nBack to main"
  },
  {
    "objectID": "vignettes/gallery.html",
    "href": "vignettes/gallery.html",
    "title": "Gallery",
    "section": "",
    "text": "Click on a plot to get the link to its code.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\nCode\n\n\nCode\n\n\nCode\n\n\nCode\n\n\nCode\n\n\nCode\n\n\nCode\n\n\nCode\n\n\nCode\n\n\nCode\n\n\nCode\n\n\nCode\n\n\nCode\n\n\nCode"
  },
  {
    "objectID": "vignettes/tips.html",
    "href": "vignettes/tips.html",
    "title": "Tips & Tricks",
    "section": "",
    "text": "This page collects miscellaneous tips and tricks for tinyplot. By definition, these are workarounds—i.e., techniques that fall outside of standard use cases or features that aren’t (yet) natively supported by the package. Please feel free to suggest or add more tips via our GitHub repo."
  },
  {
    "objectID": "vignettes/tips.html#legend",
    "href": "vignettes/tips.html#legend",
    "title": "Tips & Tricks",
    "section": "Legend",
    "text": "Legend\n\nLegend transparency\nBy default, the legend inherits the transparency (alpha) of the plotted elements. In some cases, this may be undesirable. For example, in the following plot, the legend is too light:\n\nlibrary(tinyplot)\nn = 50000\nx = rnorm(n)\ny = x + rnorm(n)\nz = sample(c(\"a\", \"b\"), n, replace = TRUE)\ndat = data.frame(x, y, z)\ntinyplot(y ~ x | z, data = dat, alpha = .1, pch = 19)\n\n\n\n\n\n\n\n\nOne solution is to draw our plot in two steps. First, we draw an empty plot with the desired (zero transparency) legend. Second, we add the transparent points on top of the existing canvas.\n\ntinyplot(y ~ x | z, data = dat, pch = 19, empty = TRUE)\ntinyplot_add(empty = FALSE, alpha = .1)\n\n\n\n\n\n\n\n\n\n\nMulticolumn legends\nFor cases where we have many discrete groups, the default single column legend can overrun the plot limits. For example:\n\nlibrary(tinyplot)\n\nplt(weight ~ Time | Chick, data = ChickWeight, type = \"l\")\n\n\n\n\n\n\n\n\nTo solve this undesirable behaviour, simply pass an approporiate ncol adjustment as part of your legend (list) argument:\n\nplt(weight ~ Time | Chick, data = ChickWeight, type = \"l\",\n    legend = list(ncol = 3))\n\n\n\n\n\n\n\n\nThe same trick works for horizontal legends and/or legends in other positions, as well for other plot types and themes. For example:\n\nplt(weight ~ Time | Chick, data = ChickWeight, type = \"l\",\n    legend = list(\"bottom!\", ncol = 5))\n\n\n\n\n\n\n\n\n(Admittedly, the end result is a bit compressed here because of the default aspect ratio that we use for figures on our website. But for regular interactive plots, or plots saved to disk, the aesthetic effect should be quite pleasing.)"
  },
  {
    "objectID": "vignettes/tips.html#labels",
    "href": "vignettes/tips.html#labels",
    "title": "Tips & Tricks",
    "section": "Labels",
    "text": "Labels\n\nDirect labels\nDirect labels can provide a nice alternative to a standard legend, particularly for grouped line plots. While tinyplot doesn’t offer a “native” direct labels type, you can easily achieve the same end result using an idiomatic layering approach.\n\nlibrary(tinyplot)\ntinytheme(\"clean2\")\n\naq = airquality\naq$Month = factor(month.name[aq$Month], levels = month.name[5:9])\n\n# base layer\nplt(Temp ~ Day | Month, data = aq, type = \"l\", legend = FALSE)\n\n# for labels: subset to final dates for each month \naq2 = aq[aq$Day == ave(aq$Day, aq$Month, FUN = max), ]\n\n# add the labels with a type_text() layer\nplt_add(data = aq2, type = \"text\", labels = aq2$Month,\n        pos = 4, offset = 0.2, xpd = NA)\n\n\n\n\n\n\n\n\n\n\nHmmmm, can you see a problem? We used type_text(..., xpd = NA) in the second layer to avoid text clipping, but the longer labels are still being cut off due to the limited RHS margin space of our \"clean2\" plotting theme.\nThe good news is that there’s an easy solution. Simply grab the theme’s parameters, bump out the RHS margin by the longest label in our dataset, and then replot.\n\n# Fix: first grab the theme params and then adjust the RHS margin by\n# the longest label in the dataset\nlongest_lab = max(strwidth(as.character(aq2$Month)))/2 # divide by 2 to get lines\nparms = tinyplot:::theme_clean2\nparms$mar[4] = parms$mar[4] + longest_lab\ntinytheme(\"clean2\", mar = parms$mar) # theme with adjusted margins\n\n# Now plot both the base and direct label layers\nplt(Temp ~ Day | Month, data = aq, type = \"l\", legend = FALSE)\nplt_add(data = aq2, type = \"text\", labels = aq2$Month,\n        pos = 4, offset = 0.2, xpd = NA)\n\n\n\n\n\n\n\n\n\n\n\n# Reset the theme (optional, but recommended)\ntinytheme()\n\n\n\nRotated axis labels\nWhen category labels are long or overlapping, users may want to rotate them for readability. One option is fully perpendicular (90°) axis labels, which tinyplot supports via themes, e.g. tinytheme(\"clean\", las = 2). If a user wants finer control over the degree of rotation—say, 45°—this requires a bit more manual effort since we do not support custom rotation out of the box. The workaround involves three steps:\n\nSuppress the default x-axis with xaxt = \"n\".\nUse text() to manually add rotated labels.\nOptionally, clear the y-axis label by setting ylab = \"\".\n\n\nlibrary(tinyplot)\ntinyplot(~cyl, data = mtcars, type = \"barplot\", xaxt = \"n\", ylab = \"\")\ntext(1:3, 0,\n    labels = c(\"Four cylinders\", \"Six cylinders\", \"Eight cylinders\"),\n    srt = 45,          # rotate text 45 degrees\n    adj = c(1.1, 1.5), # adjust text alignment\n    xpd = TRUE)        # allow drawing outside plot region\n\n\n\n\n\n\n\n\nNote that adj and xpd settings may require trial and error to position labels correctly. Also, removing the x-axis label by setting ylab = \"\" is unintuitive but currently necessary when using formulas like ~ cyl.\nP.S. Another option for long axis labels is to wrap them at a designated character length. See the final example in the tinylabel documentation for an example."
  },
  {
    "objectID": "CITATION.html",
    "href": "CITATION.html",
    "title": "Citation",
    "section": "",
    "text": "Citation\nTo cite tinyplot in publications use:\n\nMcDermott G, Arel-Bundock V, Zeileis A (2025). tinyplot: Lightweight Extension of the Base R Graphics System. doi:10.32614/CRAN.package.tinyplot, R package version 0.4.2.99."
  },
  {
    "objectID": "vignettes/types.html",
    "href": "vignettes/types.html",
    "title": "Plot types",
    "section": "",
    "text": "A key feature of tinyplot is the type argument, which allows you to specify different kinds of plots. This tutorial will guide you through the various plot types available in tinyplot, demonstrating how the type argument can be used to to create a wide range of visualizations.\nWe will consider three categories of plot types:\nWe will use the built-in airquality dataset for our examples:\nlibrary(tinyplot)\n\naq = transform(\n  airquality,\n  Month = factor(Month, labels = month.abb[unique(Month)]),\n  Hot = Temp &gt; median(Temp)\n)"
  },
  {
    "objectID": "vignettes/types.html#base-types",
    "href": "vignettes/types.html#base-types",
    "title": "Plot types",
    "section": "Base types",
    "text": "Base types\nThe type argument in tinyplot supports all the standard plot types from base R’s plot function. These are specified using single-character strings.\n\n\"p\" (Points): Produces a scatter plot of points. This is (usually) the default plot type.\n\"l\" (Lines): Produces a line plot.\n\"b\" (Points and Lines): Combines points and lines in same the plot.\n\"c\" (Empty Points Joined by Lines): Plots empty points connected by lines.\n\"o\" (Overplotted Points and Lines): Overlaps points and lines.\n\"s\" and \"S\" (Stair Steps): Creates a step plot.\n\"h\" (Histogram-like Vertical Lines): Plots vertical lines resembling a histogram.\n\"n\" (Empty Plot): Creates an empty plot frame without data.\n\nFor example, we can use \"b\" to create a plot with combined points and lines.\n\ntinyplot(Temp ~ Day | Month, data = aq, type = \"b\", main = \"Points and lines\")"
  },
  {
    "objectID": "vignettes/types.html#tinyplot-types",
    "href": "vignettes/types.html#tinyplot-types",
    "title": "Plot types",
    "section": "tinyplot types",
    "text": "tinyplot types\nBeyond the base types, tinyplot introduces additional plot types for more advanced visualizations. Each of these additional types are available either as a convenience string (with default behaviour) or a companion type_*() function (with options for customized behaviour).\n\nShapes\n\n\n\n\n\n\n\n\n\nstring\nfunction\ndescription\ndocs\n\n\n\n\n\"area\"\ntype_area()\nPlots the area under the curve from y = 0 to y = f(x).\nlink\n\n\n\"errorbar\"\ntype_errorbar()\nAdds error bars to points; requires ymin and ymax.\nlink\n\n\n\"l\" / \"b\" / etc.\ntype_lines()\nDraws lines and line-alike (same as base \"l\", \"b\", etc.)\nlink\n\n\n\"pointrange\"\ntype_pointrange()\nCombines points with error bars.\nlink\n\n\n\"p\"\ntype_points()\nDraws points (same as base \"p\").\nlink\n\n\n\"polygon\"\ntype_polygon()\nDraws polygons.\nlink\n\n\n\"polypath\"\ntype_polypath()\nDraws a path whose vertices are given in x and y.\nlink\n\n\n\"rect\"\ntype_rect()\nDraws rectangles; requires xmin, xmax, ymin, and ymax.\nlink\n\n\n\"ribbon\"\ntype_ribbon()\nCreates a filled area between ymin and ymax.\nlink\n\n\n\"segments\"\ntype_segments()\nDraws line segments between pairs of points.\nlink\n\n\n\"text\"\ntype_text()\nAdds text annotations to a plot.\nlink\n\n\n\n\n\nVisualizations\n\n\n\n\n\n\n\n\n\nstring\nfunction\ndescription\ndocs\n\n\n\n\n\"barplot\" / \"bar\"\ntype_barplot()\nCreates a bar plot.\nlink\n\n\n\"boxplot\" / \"box\"\ntype_boxplot()\nCreates a box-and-whisker plot.\nlink\n\n\n\"density\"\ntype_density()\nPlots the density estimate of a variable.\nlink\n\n\n\"histogram\" / \"hist\"\ntype_histogram()\nCreates a histogram of a single variable.\nlink\n\n\n\"jitter\" / \"j\"\ntype_jitter()\nJittered points.\nlink\n\n\n\"qq\"\ntype_qq()\nCreates a quantile-quantile plot.\nlink\n\n\n\"ridge\"\ntype_ridge()\nCreates a ridgeline (aka joy) plot.\nlink\n\n\n\"rug\"\ntype_rug()\nAdds a rug to an existing plot.\nlink\n\n\n\"spineplot\" / \"spine\"\ntype_spineplot()\nCreates a spine plot or spinogram.\nlink\n\n\n\"violin\"\ntype_violin()\nCreates a violin plot.\nlink\n\n\n\n\n\nModels\n\n\n\n\n\n\n\n\n\nstring\nfunction\ndescription\ndocs\n\n\n\n\n\"loess\"\ntype_loess()\nLocal regression curve.\nlink\n\n\n\"lm\"\ntype_lm()\nLinear regression line.\nlink\n\n\n\"glm\"\ntype_glm()\nGeneralized linear model fit.\nlink\n\n\n\"spline\"\ntype_spline()\nCubic (or Hermite) spline interpolation.\nlink\n\n\n\n\n\nFunctions\n\n\n\n\n\n\n\n\n\nstring\nfunction\ndescription\ndocs\n\n\n\n\n\"abline\"\ntype_abline()\nLine(s) with intercept and slope.\nlink\n\n\n\"hline\"\ntype_hline()\nHorizontal line(s).\nlink\n\n\n\"vline\"\ntype_vline()\nVertical line(s).\nlink\n\n\n\"function\"\ntype_function()\nArbitrary function.\nlink\n\n\n\"summary\"\ntype_summary()\nSummarizes y by unique values of x.\nlink\n\n\n\nTo see the difference between the convenience strings and their respective type_*() functional equivalents, let’s quickly walk through two examples.\nExample 1: jittering. We can add noise to data points using jittering. This allows us to avoid overplotting and can be useful to visualize discrete variables. On the left, we use the \"jitter string shortcut with default settings. On the right, we use the type_jitter() function to reduce the amount of jittering.\ntinyplot(\n  Temp ~ Month, data = aq, main = \"Default jittering\", \n  type = \"jitter\"\n)\ntinyplot(\n  Temp ~ Month, data = aq, main = \"Modest jittering\",\n  type = type_jitter(amount = 0.05)\n)\n\n\n\n\n\n\n\n\n\n\nExample 2: Logit fit. In this example, we use type_glm() to fit a logistic regression model to the data, but with different confidence intervals.1\ntinyplot(\n  Hot ~ Wind, data = aq, main = \"Logit with 95% interval\",\n  type = type_glm(family = \"binomial\")\n)\ntinyplot(\n  Hot ~ Wind, data = aq, main = \"Logit with 50% interval\",\n  type = type_glm(family = \"binomial\", level = 0.5)\n)\n\n\n\n\n\n\n\n\n\n\nTo see what arguments are available for each type, simply consult the type-specific documentation.\n?type_jitter\n?type_glm\n# etc\nFinally, please note that all tinyplot types support grouping and faceting.\n\ntinyplot(Temp ~ Wind | Month, data = aq, facet = \"by\", type = \"lm\")"
  },
  {
    "objectID": "vignettes/types.html#custom-types",
    "href": "vignettes/types.html#custom-types",
    "title": "Plot types",
    "section": "Custom types",
    "text": "Custom types\nIt is easy to add custom types to tinyplot. Users who need highly customized plots, or developers who want to add support to their package or functions, only need to define three simple functions: data_typename(), draw_typename(), and type_typename().\nIn this section, we explain the role of each of these functions and present a minimalist example of a custom type. Interested readers may refer to the tinyplot source code to see many more examples, since each tinyplot type is itself implemented as a custom type.\nThe three functions that we need to define for a new type are:\n\ndata_*(): Function factory.\n\nAccepts a list of internal objects\n\nInputs must include ...\ndatapoints Is the most important object. It is a data frame with the datapoints to plot.\nOther objects that can be modified by data_*() include: by, facet, ylab, palette\n\nReturns a named list with modified versions of those objects.\n\ndraw_*(): Function factory.\n\nAccepts information about data point values and aesthetics.\n\nInputs must include ...\nThe i prefix in argument names indicates that we are operating on a subgroup of the data, identified by facet or using the | operator in a formula.\nAvailable arguments are: ibg, icol, ilty, ilwd, ipch, ix, ixmax, ixmin, iy, iymax, iymin, cex, dots, type, x_by, i, facet_by, by_data, facet_data, flip\n\nReturns a function which can call base R to draw the plot.\n\ntype_*(): A wrapper function that returns a named list with three elements:\n\ndraw\ndata\nname\n\n\nHere is a minimalist example of a custom type that logs both x and y and plots lines.\ntype_log = function(base = exp(1)) {\n\n  data_log = function() {\n    fun = function(datapoints, ...) {\n      datapoints$x = log(datapoints$x, base = base)\n      datapoints$y = log(datapoints$y, base = base)\n      datapoints = datapoints[order(datapoints$x), ]\n      return(list(datapoints = datapoints, ...))\n    }\n    return(fun)\n  }\n\n  draw_log = function() {\n    fun = function(ix, iy, icol, ...) {\n      points(\n        x = ix,\n        y = iy,\n        col = icol\n      )\n    }\n    return(fun)\n  }\n\n  out = list(\n    draw = draw_log(),\n    data = data_log(),\n    name = \"log\"\n  )\n  class(out) = \"tinyplot_type\"\n  return(out)\n}\n\ntinyplot(mpg ~ wt | factor(am), data = mtcars,\n  type = type_log(), main = \"Ln\")\ntinyplot(mpg ~ wt | factor(am), data = mtcars,\n  type = type_log(base = 10), main = \"Log 10\")\n\n\n\n\n\n\n\n\n\n\nTo underscore what we said above, the tinyplot source code contains many examples of type constructor functions that should provide a helpful starting point for custom plot types. Failing that, the tinyplot team are always happy to help guide users on how to create their own types and re-purpose existing tinyplot code. Just let us know by raising an issue on our GitHub repo."
  },
  {
    "objectID": "vignettes/types.html#footnotes",
    "href": "vignettes/types.html#footnotes",
    "title": "Plot types",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNote: If we simply specified the \"glm\" convenience string on its own, we’d get a linear fit since the default family is gaussian.↩︎"
  },
  {
    "objectID": "vignettes/useR2025/abstract.html",
    "href": "vignettes/useR2025/abstract.html",
    "title": "tinyplot",
    "section": "",
    "text": "https://events.digital-research.academy/event/52/abstracts/128/\nAuthor: Grant McDermott Co-authors: Vincent Arel-Bundock, Achim Zeileis\nThe {tinyplot} package provides a lightweight extension of the base R graphics system. It aims to pair the concise syntax and flexibility of base R plotting, with the convenience features pioneered by newer ({grid}-based) visualization packages like {ggplot2} and {lattice}. This includes the ability to plot grouped data with automatic legends and/or facets, advanced visualization types, and easy customization via ready-made themes.\nThis talk will provide an introduction to {tinyplot} in the form of various plotting examples, describe its motivating use-cases, and also contrast its advantages (and disadvantages) compared to other R visualization libraries. The package is available on CRAN."
  },
  {
    "objectID": "vignettes/themes.html",
    "href": "vignettes/themes.html",
    "title": "Themes",
    "section": "",
    "text": "The base R aesthetic tends to divide option. Some people like the default minimalist look of base R plots and/or are happy to customize the (many) graphical parameters that are available to them. Others find base plots ugly and don’t want to spend time endlessly tweaking different parameters. Moreover, the inherent “canvas” approach to drawing base R graphics, with fixed placement for plot elements, means that plots don’t adjust dynamically and this can lead to awkward whitespace artifacts unless the user explicitly accounts for them.\nRegardless of where you stand in this debate, the tinyplot view is that base R graphics should ideally combine flexibility and ease of use with aesthetically pleasing end results. One way that we enable this is via themes."
  },
  {
    "objectID": "vignettes/themes.html#tinytheme",
    "href": "vignettes/themes.html#tinytheme",
    "title": "Themes",
    "section": "tinytheme()",
    "text": "tinytheme()\nThe tinytheme() function provides a mechansim for easily changing the look of your plots to match a variety of pre-defined styles. Behind the scenes, this works by simultaneously setting a group of graphical parameters to achieve a particular aesthetic. Let’s take a look at the “minimal” theme for example, which is inspired by a well-known ggplot2 theme.\n\nlibrary(tinyplot)\n\ntinytheme(\"minimal\")\n\ntinyplot(\n  Sepal.Width ~ Sepal.Length | Species,\n  facet = \"by\",\n  data = iris,\n  main = \"Title of the plot\",\n  sub = \"A smaller subtitle\"\n)\n\n\n\n\n\n\n\n\nOne particular feature that may interest users is the fact that tinytheme() uses some internal magic logic to dynamically adjust plot margins to avoid whitespace. For example, when long horizontal y-axis labels are detected:\n\ntinyplot(\n  I(Sepal.Width*1e5) ~ Sepal.Length | Species,\n  facet = \"by\",\n  data = iris,\n  yaxl = \",\",  # use comma format for the y-axis labels\n  main = \"Title of the plot\",\n  sub = \"The left-margin adjusts to accomodate the long y-axis labels\"\n)\n\n\n\n\n\n\n\n\nAs you may have noticed, the changes made by tinytheme() are persistent, and apply to all subsequent tinyplot() calls.\n\ntinyplot(mpg ~ hp, data = mtcars, main = \"Fuel efficiency vs. horsepower\")\n\n\n\n\n\n\n\n\nTo reset graphical parameters to factory defaults, call tinytheme() without arguments.\n\ntinytheme()\ntinyplot(mpg ~ hp, data = mtcars, main = \"Fuel efficiency vs. horsepower\")\n\n\n\n\n\n\n\n\n\nGallery\nWe’ll use the following running example to demonstrate the full gallery of built-in tinytheme() themes.\n\np = function() {\n  tinyplot(\n    Sepal.Width ~ Sepal.Length | Species,\n    facet = \"by\",\n    data = iris,\n    main = \"Title of the plot\",\n    sub = \"A smaller subtitle\"\n  )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n“default”\n\ntinytheme() ## same as tinytheme(\"default\")\np()\n\n\n\n\n\n\n\n\n\n\n“basic”\n\ntinytheme(\"basic\")\np()\n\n\n\n\n\n\n\n\n\n\n“clean”\n\ntinytheme(\"clean\")\np()\n\n\n\n\n\n\n\n\n\n\n“clean2”\n\ntinytheme(\"clean2\")\np()\n\n\n\n\n\n\n\n\n\n\n“classic”\n\ntinytheme(\"classic\")\np()\n\n\n\n\n\n\n\n\n\n\n“bw”\n\ntinytheme(\"bw\")\np()\n\n\n\n\n\n\n\n\n\n\n“minimal”\n\ntinytheme(\"minimal\")\np()\n\n\n\n\n\n\n\n\n\n\n“ipsum”\n\ntinytheme(\"ipsum\")\np()\n\n\n\n\n\n\n\n\n\n\n“dark”\n\ntinytheme(\"dark\")\np()\n\n\n\n\n\n\n\n\n\n\n“tufte”\n\ntinytheme(\"tufte\")\np()\n\n\n\n\n\n\n\n\n\n\n“void”\n\ntinytheme(\"void\")\np()\n\n\n\n\n\n\n\n\n\n\n“ridge”\n\n\n\n\n\n\nNote\n\n\n\nThe specialized \"ridge\" and \"ridge2\" themes are only intended for use with ridge plot types.\n\n\n\np2 = function() {\n  tinyplot(\n    Species ~ Sepal.Width | Species, legend = FALSE,\n    data = iris,\n    type = \"ridge\",\n    main = \"Title of the plot\",\n    sub = \"A smaller subtitle\"\n  )\n}\n\ntinytheme(\"ridge\")\np2()\n\n\n\n\n\n\n\n\n\n\n“ridge2”\n\ntinytheme(\"ridge2\")\np2()\n\n\n\n\n\n\n\n\n\n# Reset to default theme\ntinytheme()\n\nPlease feel free to make suggestions about themes, or contribute new themes by opening a Pull Request on Github.\n\n\n\nCustom themes\nTweaking existing themes is easy. For example, the tinytheme() function also accepts any graphical parameter supported by tpar()/par() and applies them in persistent fashion.\ntinytheme(\n  \"ipsum\",\n  pch = 2, col.axis = \"darkcyan\", cex = 1.2, cex.main = 2, cex.lab = 1.5,\n  family =\"HersheyScript\"\n)\ntinyplot(mpg ~ hp, data = mtcars, main = \"Fuel efficiency vs. horsepower\")\ntinyplot(hp ~ mpg, data = mtcars, main = \"Horsepower vs. fuel efficiency\")\n\n\n\n\n\n\n\n\n\n\n\n# reset\ntinytheme()\n\n\n\n\n\n\n\nFont families\n\n\n\nFonts are a suprisingly effective way to add impact and personality to your plots. While it is perhaps underappreciated, base R actually ships with built-in support for quite a few font families. In the code chunk above we used a member of the Hershey font family that comes bundled with the base R distribution (see ?Hershey). But this built-in support also extends to other popular LaTex and PDF fonts like “Palatino”, “ComputerModern”, “Helvetica”, “AvantGarde”, etc. (see ?pdfFonts).\nFor access to a much wider variety of fonts, you might consider the excellent showtext package (link). This package allows you to install any font family from the Google Font catalog, either on-the-fly or downloaded to your permanent fontbook collection. It plays very nicely with tinyplot.\n\n\nSimilarly, to create your own themes “from scratch”, set the theme to \"default\" and pass additional graphical parameters to tinytheme().\n\ntinytheme(\"default\", font.main = 3, col = \"red\")\np()\n\n\n\n\n\n\n\n\n\n# Reset to default theme\ntinytheme()\n\n\n\n\n\n\n\nTip\n\n\n\nTo see the full list of parameters that defines a particular theme, simply assign them to an object. This can be helpful if you want to explore creating your own custom theme, or tweak an existing theme.\n\n# parms = tinytheme(\"clean\")   # assigns the theme at the same time\nparms = tinyplot:::theme_clean # doesn't assign the theme\n\n# show the list of parameters used in the \"clean\" theme\nparms"
  },
  {
    "objectID": "vignettes/themes.html#manual-customization-with-tpar",
    "href": "vignettes/themes.html#manual-customization-with-tpar",
    "title": "Themes",
    "section": "Manual customization with tpar()",
    "text": "Manual customization with tpar()\nSubtitle: And comparison with par()\nThemes are a powerful and convenient way to customize your plots. But they are not the only game in town. As any base R plotter would tell you, another way to customize your plots by setting global graphics parameters via par(). If you prefer this approach, then the good news is that it is fully compatable with tinyplot.1 However, we recommend that you rather use tpar(), which is an extended version of par() that supports all of the latter’s parameters plus some tinyplot-specific upgrades.\nHere is a quick example, where we impose several global changes (e.g., change the font family, use Tufte-style floating axes with a background panel grid, rotate tick labels, etc.) before drawing the plot.\n\nop = tpar(\n  bty    = \"n\",           # No box (frame) around the plot \n  family = \"HersheySans\", # Use R's Hershey font instead of Arial default\n  grid   = TRUE,          # Add a background grid\n  las    = 1,             # Horizontal axis tick labels\n  pch    = 19             # Larger filled points as default\n)\n\ntinyplot(Sepal.Length ~ Petal.Length | Species, data = iris, alpha = 0.5)\n\n\n\n\n\n\n\n\n# optional: reset to the original parameter settings\ntpar(op)\n\nAgain, this approach should feel very familiar to experience base R plotters. But we will drive home the point by exploring one final difference between vanilla par() and the enhanced tpar() equivalent…\nThe graphical parameters set by par() stay in force as long as a graphical device stays open. On the other hand, these parameters are reset when the plotting window is closed or, for example, when executing a new code chunk in a Quarto notebook.2\n\npar(col = \"red\", pch = 4)\ntinyplot(mpg ~ hp, data = mtcars)\n\n\n\n\n\n\n\n\n\ntinyplot(wt ~ qsec, data = mtcars)\n\n\n\n\n\n\n\n\nIn contrast, graphical parameters set by tpar() can persist across devices and Quarto code chunks thanks to a built-in “hook” mechanism (see ?setHook). To enable this persistence, we must invoke the hook=TRUE argument.\n\ntpar(col = \"red\", pch = 4, hook = TRUE)\ntinyplot(mpg ~ hp, data = mtcars)\n\n\n\n\n\n\n\n\n\ntinyplot(wt ~ qsec, data = mtcars)\n\n\n\n\n\n\n\n\n\n# reset defaults\ntinytheme()\n\n(Fun fact: Behind the scenes, tinytheme(&lt;theme_name&gt;) is simply passing a list of parameters to tpar(..., hook = TRUE).)"
  },
  {
    "objectID": "vignettes/themes.html#footnotes",
    "href": "vignettes/themes.html#footnotes",
    "title": "Themes",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAfter all, a tinyplot is just a base plot with added convenience features. We still use the same graphics engine under the hood and any settings and workflows for plot() should (ideally) carry over to tinyplot() too.↩︎\nThe knitr package, which provides the rendering engine for Quarto and R Markdown, also has a global.par option to overcome this limitation. See here.↩︎"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Apache License",
    "section": "",
    "text": "Apache License\nVersion 2.0, January 2004 &lt;http://www.apache.org/licenses/&gt;\n\nTerms and Conditions for use, reproduction, and distribution\n\n1. Definitions\n“License” shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n“Licensor” shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n“Legal Entity” shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, “control” means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n“You” (or “Your”) shall mean an individual or Legal Entity exercising permissions granted by this License.\n“Source” form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n“Object” form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n“Work” shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n“Derivative Works” shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n“Contribution” shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, “submitted” means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as “Not a Contribution.”\n“Contributor” shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n\n2. Grant of Copyright License\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n\n3. Grant of Patent License\nSubject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n\n4. Redistribution\nYou may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\n(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices stating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n(d) If the Work includes a “NOTICE” text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\n\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n\n5. Submission of Contributions\nUnless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n\n6. Trademarks\nThis License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n\n7. Disclaimer of Warranty\nUnless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n\n8. Limitation of Liability\nIn no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n\n9. Accepting Warranty or Additional Liability\nWhile redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\n\n\n\nAPPENDIX: How to apply the Apache License to your work\nTo apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets [] replaced with your own identifying information. (Don’t include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same “printed page” as the copyright notice for easier identification within third-party archives.\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
  },
  {
    "objectID": "man/type_violin.html",
    "href": "man/type_violin.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for violin plots, which are an alternative to box plots for visualizing continuous distributions (by group) in the form of mirrored densities.\n\n\n\ntype_violin(\n  bw = \"nrd0\",\n  joint.bw = c(\"mean\", \"full\", \"none\"),\n  adjust = 1,\n  kernel = c(\"gaussian\", \"epanechnikov\", \"rectangular\", \"triangular\", \"biweight\",\n    \"cosine\", \"optcosine\"),\n  n = 512,\n  trim = FALSE,\n  width = 0.9\n)\n\n\n\n\n\n\n\nbw\n\n\nthe smoothing bandwidth to be used. The kernels are scaled such that this is the standard deviation of the smoothing kernel. (Note this differs from the reference books cited below.)\nbw can also be a character string giving a rule to choose the bandwidth. See bw.nrd.  The default, “nrd0”, has remained the default for historical and compatibility reasons, rather than as a general recommendation, where e.g., “SJ” would rather fit, see also Venables and Ripley (2002).\nThe specified (or computed) value of bw is multiplied by adjust.\n\n\n\n\njoint.bw\n\n\ncharacter string indicating whether (and how) the smoothing bandwidth should be computed from the joint data distribution when there are multiple subgroups. The options are “mean” (the default), “full”, and “none”. Also accepts a logical argument, where TRUE maps to “mean” and FALSE maps to “none”. See the \"Bandwidth selection\" section below for a discussion of practical considerations.\n\n\n\n\nadjust\n\n\nthe bandwidth used is actually adjust*bw. This makes it easy to specify values like ‘half the default’ bandwidth.\n\n\n\n\nkernel\n\n\na character string giving the smoothing kernel to be used. This must partially match one of “gaussian”, “rectangular”, “triangular”, “epanechnikov”, “biweight”, “cosine” or “optcosine”, with default “gaussian”, and may be abbreviated to a unique prefix (single letter).\n“cosine” is smoother than “optcosine”, which is the usual ‘cosine’ kernel in the literature and almost MSE-efficient. However, “cosine” is the version used by S.\n\n\n\n\nn\n\n\nthe number of equally spaced points at which the density is to be estimated. When n &gt; 512, it is rounded up to a power of 2 during the calculations (as fft is used) and the final result is interpolated by approx. So it almost always makes sense to specify n as a power of two.\n\n\n\n\ntrim\n\n\nlogical indicating whether the violins should be trimmed to the range of the data. Default is FALSE.\n\n\n\n\nwidth\n\n\nnumeric (ideally in the range [0, 1], although this isn’t enforced) giving the normalized width of the individual violins.\n\n\n\n\n\n\nSee type_density for more details and considerations related to bandwidth selection and kernel types.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"violin\" type convenience string\ntinyplot(count ~ spray, data = InsectSprays, type = \"violin\")\n\n\n\n\n\n\n\n# aside: to match the defaults of `ggplot2::geom_violin()`, use `trim = TRUE`\n# and `joint.bw = FALSE`\ntinyplot(count ~ spray, data = InsectSprays, type = \"violin\",\n    trim = TRUE, joint.bw = FALSE)\n\n\n\n\n\n\n\n# use flip = TRUE to reorient the axes\ntinyplot(count ~ spray, data = InsectSprays, type = \"violin\", flip = TRUE)\n\n\n\n\n\n\n\n# for flipped plots with long group labels, it's better to use a theme for\n# dynamic plot resizing\ntinytheme(\"clean\")\ntinyplot(weight ~ feed, data = chickwts, type = \"violin\", flip = TRUE)\n\n\n\n\n\n\n\n# you can group by the x var to add colour (here with the original orientation)\ntinyplot(weight ~ feed | feed, data = chickwts, type = \"violin\", legend = FALSE)\n\n\n\n\n\n\n\n# dodged grouped violin plot example (different dataset)\ntinyplot(len ~ dose | supp, data = ToothGrowth, type = \"violin\", fill = 0.2)\n\n\n\n\n\n\n\n# note: above we relied on `...` argument passing alongside the \"violin\"\n# type convenience string. But this won't work for `width`, since it will\n# clash with the top-level `tinyplot(..., width = &lt;width&gt;)` arg. To ensure\n# correct arg passing, it's safer to use the formal `type_violin()` option.\ntinyplot(len ~ dose | supp, data = ToothGrowth, fill = 0.2,\n    type = type_violin(width = 0.8))\n\n\n\n\n\n\n\n# reset theme\ntinytheme()",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_violin"
    ]
  },
  {
    "objectID": "man/type_violin.html#violin-plot-type",
    "href": "man/type_violin.html#violin-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for violin plots, which are an alternative to box plots for visualizing continuous distributions (by group) in the form of mirrored densities.\n\n\n\ntype_violin(\n  bw = \"nrd0\",\n  joint.bw = c(\"mean\", \"full\", \"none\"),\n  adjust = 1,\n  kernel = c(\"gaussian\", \"epanechnikov\", \"rectangular\", \"triangular\", \"biweight\",\n    \"cosine\", \"optcosine\"),\n  n = 512,\n  trim = FALSE,\n  width = 0.9\n)\n\n\n\n\n\n\n\nbw\n\n\nthe smoothing bandwidth to be used. The kernels are scaled such that this is the standard deviation of the smoothing kernel. (Note this differs from the reference books cited below.)\nbw can also be a character string giving a rule to choose the bandwidth. See bw.nrd.  The default, “nrd0”, has remained the default for historical and compatibility reasons, rather than as a general recommendation, where e.g., “SJ” would rather fit, see also Venables and Ripley (2002).\nThe specified (or computed) value of bw is multiplied by adjust.\n\n\n\n\njoint.bw\n\n\ncharacter string indicating whether (and how) the smoothing bandwidth should be computed from the joint data distribution when there are multiple subgroups. The options are “mean” (the default), “full”, and “none”. Also accepts a logical argument, where TRUE maps to “mean” and FALSE maps to “none”. See the \"Bandwidth selection\" section below for a discussion of practical considerations.\n\n\n\n\nadjust\n\n\nthe bandwidth used is actually adjust*bw. This makes it easy to specify values like ‘half the default’ bandwidth.\n\n\n\n\nkernel\n\n\na character string giving the smoothing kernel to be used. This must partially match one of “gaussian”, “rectangular”, “triangular”, “epanechnikov”, “biweight”, “cosine” or “optcosine”, with default “gaussian”, and may be abbreviated to a unique prefix (single letter).\n“cosine” is smoother than “optcosine”, which is the usual ‘cosine’ kernel in the literature and almost MSE-efficient. However, “cosine” is the version used by S.\n\n\n\n\nn\n\n\nthe number of equally spaced points at which the density is to be estimated. When n &gt; 512, it is rounded up to a power of 2 during the calculations (as fft is used) and the final result is interpolated by approx. So it almost always makes sense to specify n as a power of two.\n\n\n\n\ntrim\n\n\nlogical indicating whether the violins should be trimmed to the range of the data. Default is FALSE.\n\n\n\n\nwidth\n\n\nnumeric (ideally in the range [0, 1], although this isn’t enforced) giving the normalized width of the individual violins.\n\n\n\n\n\n\nSee type_density for more details and considerations related to bandwidth selection and kernel types.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"violin\" type convenience string\ntinyplot(count ~ spray, data = InsectSprays, type = \"violin\")\n\n\n\n\n\n\n\n# aside: to match the defaults of `ggplot2::geom_violin()`, use `trim = TRUE`\n# and `joint.bw = FALSE`\ntinyplot(count ~ spray, data = InsectSprays, type = \"violin\",\n    trim = TRUE, joint.bw = FALSE)\n\n\n\n\n\n\n\n# use flip = TRUE to reorient the axes\ntinyplot(count ~ spray, data = InsectSprays, type = \"violin\", flip = TRUE)\n\n\n\n\n\n\n\n# for flipped plots with long group labels, it's better to use a theme for\n# dynamic plot resizing\ntinytheme(\"clean\")\ntinyplot(weight ~ feed, data = chickwts, type = \"violin\", flip = TRUE)\n\n\n\n\n\n\n\n# you can group by the x var to add colour (here with the original orientation)\ntinyplot(weight ~ feed | feed, data = chickwts, type = \"violin\", legend = FALSE)\n\n\n\n\n\n\n\n# dodged grouped violin plot example (different dataset)\ntinyplot(len ~ dose | supp, data = ToothGrowth, type = \"violin\", fill = 0.2)\n\n\n\n\n\n\n\n# note: above we relied on `...` argument passing alongside the \"violin\"\n# type convenience string. But this won't work for `width`, since it will\n# clash with the top-level `tinyplot(..., width = &lt;width&gt;)` arg. To ensure\n# correct arg passing, it's safer to use the formal `type_violin()` option.\ntinyplot(len ~ dose | supp, data = ToothGrowth, fill = 0.2,\n    type = type_violin(width = 0.8))\n\n\n\n\n\n\n\n# reset theme\ntinytheme()",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_violin"
    ]
  },
  {
    "objectID": "man/type_spineplot.html",
    "href": "man/type_spineplot.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function(s) for producing spineplots and spinograms, which are modified versions of histograms or mosaic plots, and particularly useful for visualizing factor variables. Note that tinyplot defaults to type_spineplot() if y is a factor variable.\n\n\n\ntype_spineplot(\n  breaks = NULL,\n  tol.ylab = 0.05,\n  off = NULL,\n  xlevels = NULL,\n  ylevels = NULL,\n  col = NULL,\n  xaxlabels = NULL,\n  yaxlabels = NULL,\n  weights = NULL\n)\n\n\n\n\n\n\n\nbreaks\n\n\nif the explanatory variable is numeric, this controls how it is discretized. breaks is passed to hist and can be a list of arguments.\n\n\n\n\ntol.ylab\n\n\nconvenience tolerance parameter for y-axis annotation. If the distance between two labels drops under this threshold, they are plotted equidistantly.\n\n\n\n\noff\n\n\nvertical offset between the bars (in per cent). It is fixed to 0 for spinograms and defaults to 2 for spine plots.\n\n\n\n\nxlevels, ylevels\n\n\na character or numeric vector specifying the ordering of the levels of the x and y variables (if character) or the corresponding indexes (if numeric) for the plot.\n\n\n\n\ncol\n\n\na vector of fill colors of the same length as levels(y). The default is to call gray.colors.\n\n\n\n\nxaxlabels, yaxlabels\n\n\ncharacter vectors for annotation of x and y axis. Default to levels(y) and levels(x), respectively for the spine plot. For xaxlabels in the spinogram, the breaks are used.\n\n\n\n\nweights\n\n\nnumeric. A vector of frequency weights for each observation in the data. If NULL all weights are implicitly assumed to be 1. If x is already a 2-way table, the weights are ignored.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"spineplot\" type convenience string\ntinyplot(Species ~ Sepal.Width, data = iris, type = \"spineplot\")\n\n\n\n\n\n\n\n# Aside: specifying the type is redundant for this example, since tinyplot()\n# defaults to \"spineplot\" if y is a factor (just like base plot).\ntinyplot(Species ~ Sepal.Width, data = iris)\n\n# Use `type_spineplot()` to pass extra arguments for customization\ntinyplot(Species ~ Sepal.Width, data = iris, type = type_spineplot(breaks = 4))\n\n\n\n\n\n\n\np = palette.colors(3, \"Pastel 1\")\ntinyplot(Species ~ Sepal.Width, data = iris, type = type_spineplot(breaks = 4, col = p))\n\n\n\n\n\n\n\nrm(p)\n\n# More idiomatic tinyplot way of drawing the previous plot: use y == by\ntinyplot(\n  Species ~ Sepal.Width | Species, data = iris, type = type_spineplot(breaks = 4),\n  palette = \"Pastel 1\", legend = FALSE\n)\n\n\n\n\n\n\n\n# Grouped and faceted spineplots\n\nttnc = as.data.frame(Titanic)\n\ntinyplot(\n  Survived ~ Sex, facet = ~ Class, data = ttnc,\n  type = type_spineplot(weights = ttnc$Freq)\n)\n\n\n\n\n\n\n\n# For grouped \"by\" spineplots, it's better visually to facet as well\ntinyplot(\n  Survived ~ Sex | Class, facet = \"by\", data = ttnc,\n  type = type_spineplot(weights = ttnc$Freq)\n)\n\n\n\n\n\n\n\n# Fancier version. Note the smart inheritance of spacing etc.\ntinyplot(\n  Survived ~ Sex | Class, facet = \"by\", data = ttnc,\n  type = type_spineplot(weights = ttnc$Freq),\n  palette = \"Dark 2\", facet.args = list(nrow = 1), axes = \"t\"\n)\n\n\n\n\n\n\n\n# Reorder x and y variable categories either by their character levels or numeric indexes\ntinyplot(\n  Survived ~ Sex, facet = ~ Class, data = ttnc,\n  type = type_spineplot(weights = ttnc$Freq, xlevels = c(\"Female\", \"Male\"), ylevels = 2:1)\n)\n\n\n\n\n\n\n\n# Note: It's possible to use \"by\" on its own (without faceting), but the\n# overlaid result isn't great. We will likely overhaul this behaviour in a\n# future version of tinyplot...\ntinyplot(Survived ~ Sex | Class, data = ttnc,\n  type = type_spineplot(weights = ttnc$Freq), alpha = 0.3\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_spineplot"
    ]
  },
  {
    "objectID": "man/type_spineplot.html#spineplot-and-spinogram-types",
    "href": "man/type_spineplot.html#spineplot-and-spinogram-types",
    "title": "tinyplot",
    "section": "",
    "text": "Type function(s) for producing spineplots and spinograms, which are modified versions of histograms or mosaic plots, and particularly useful for visualizing factor variables. Note that tinyplot defaults to type_spineplot() if y is a factor variable.\n\n\n\ntype_spineplot(\n  breaks = NULL,\n  tol.ylab = 0.05,\n  off = NULL,\n  xlevels = NULL,\n  ylevels = NULL,\n  col = NULL,\n  xaxlabels = NULL,\n  yaxlabels = NULL,\n  weights = NULL\n)\n\n\n\n\n\n\n\nbreaks\n\n\nif the explanatory variable is numeric, this controls how it is discretized. breaks is passed to hist and can be a list of arguments.\n\n\n\n\ntol.ylab\n\n\nconvenience tolerance parameter for y-axis annotation. If the distance between two labels drops under this threshold, they are plotted equidistantly.\n\n\n\n\noff\n\n\nvertical offset between the bars (in per cent). It is fixed to 0 for spinograms and defaults to 2 for spine plots.\n\n\n\n\nxlevels, ylevels\n\n\na character or numeric vector specifying the ordering of the levels of the x and y variables (if character) or the corresponding indexes (if numeric) for the plot.\n\n\n\n\ncol\n\n\na vector of fill colors of the same length as levels(y). The default is to call gray.colors.\n\n\n\n\nxaxlabels, yaxlabels\n\n\ncharacter vectors for annotation of x and y axis. Default to levels(y) and levels(x), respectively for the spine plot. For xaxlabels in the spinogram, the breaks are used.\n\n\n\n\nweights\n\n\nnumeric. A vector of frequency weights for each observation in the data. If NULL all weights are implicitly assumed to be 1. If x is already a 2-way table, the weights are ignored.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"spineplot\" type convenience string\ntinyplot(Species ~ Sepal.Width, data = iris, type = \"spineplot\")\n\n\n\n\n\n\n\n# Aside: specifying the type is redundant for this example, since tinyplot()\n# defaults to \"spineplot\" if y is a factor (just like base plot).\ntinyplot(Species ~ Sepal.Width, data = iris)\n\n# Use `type_spineplot()` to pass extra arguments for customization\ntinyplot(Species ~ Sepal.Width, data = iris, type = type_spineplot(breaks = 4))\n\n\n\n\n\n\n\np = palette.colors(3, \"Pastel 1\")\ntinyplot(Species ~ Sepal.Width, data = iris, type = type_spineplot(breaks = 4, col = p))\n\n\n\n\n\n\n\nrm(p)\n\n# More idiomatic tinyplot way of drawing the previous plot: use y == by\ntinyplot(\n  Species ~ Sepal.Width | Species, data = iris, type = type_spineplot(breaks = 4),\n  palette = \"Pastel 1\", legend = FALSE\n)\n\n\n\n\n\n\n\n# Grouped and faceted spineplots\n\nttnc = as.data.frame(Titanic)\n\ntinyplot(\n  Survived ~ Sex, facet = ~ Class, data = ttnc,\n  type = type_spineplot(weights = ttnc$Freq)\n)\n\n\n\n\n\n\n\n# For grouped \"by\" spineplots, it's better visually to facet as well\ntinyplot(\n  Survived ~ Sex | Class, facet = \"by\", data = ttnc,\n  type = type_spineplot(weights = ttnc$Freq)\n)\n\n\n\n\n\n\n\n# Fancier version. Note the smart inheritance of spacing etc.\ntinyplot(\n  Survived ~ Sex | Class, facet = \"by\", data = ttnc,\n  type = type_spineplot(weights = ttnc$Freq),\n  palette = \"Dark 2\", facet.args = list(nrow = 1), axes = \"t\"\n)\n\n\n\n\n\n\n\n# Reorder x and y variable categories either by their character levels or numeric indexes\ntinyplot(\n  Survived ~ Sex, facet = ~ Class, data = ttnc,\n  type = type_spineplot(weights = ttnc$Freq, xlevels = c(\"Female\", \"Male\"), ylevels = 2:1)\n)\n\n\n\n\n\n\n\n# Note: It's possible to use \"by\" on its own (without faceting), but the\n# overlaid result isn't great. We will likely overhaul this behaviour in a\n# future version of tinyplot...\ntinyplot(Survived ~ Sex | Class, data = ttnc,\n  type = type_spineplot(weights = ttnc$Freq), alpha = 0.3\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_spineplot"
    ]
  },
  {
    "objectID": "man/type_text.html",
    "href": "man/type_text.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for adding text annotations to a plot. This function allows you to draw text at specified (x,y) coordinates.\n\n\n\ntype_text(\n  labels,\n  adj = NULL,\n  pos = NULL,\n  offset = 0.5,\n  vfont = NULL,\n  font = NULL,\n  xpd = NULL,\n  srt = 0,\n  clim = c(0.5, 2.5)\n)\n\n\n\n\n\n\n\nlabels\n\n\nCharacter vector of length 1 or of the same length as the number of x,y coordinates.\n\n\n\n\nadj\n\n\none or two values in \\([0, 1]\\) which specify the x (and optionally y) adjustment (‘justification’) of the labels, with 0 for left/bottom, 1 for right/top, and 0.5 for centered. On most devices values outside \\([0, 1]\\) will also work. See below.\n\n\n\n\npos\n\n\na position specifier for the text. If specified this overrides any adj value given. Values of 1, 2, 3 and 4, respectively indicate positions below, to the left of, above and to the right of the specified (x,y) coordinates.\n\n\n\n\noffset\n\n\nwhen pos is specified, this value controls the distance (‘offset’) of the text label from the specified coordinate in fractions of a character width.\n\n\n\n\nvfont\n\n\nNULL for the current font family, or a character vector of length 2 for Hershey vector fonts. The first element of the vector selects a typeface and the second element selects a style. Ignored if labels is an expression.\n\n\n\n\nfont\n\n\nFont to be used, following graphics::par().\n\n\n\n\nxpd\n\n\nLogical value or NA denoting text clipping behaviour, following graphics::par().\n\n\n\n\nsrt\n\n\nNumeric giving the desired string rotation in degrees.\n\n\n\n\nclim\n\n\nNumeric giving the lower and upper limits of the character expansion (cex) normalization for bubble charts.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\ntinyplot(mpg ~ hp | factor(cyl),\n  data = mtcars,\n  type = type_text(\n    labels = row.names(mtcars),\n    font = 2,\n    adj = 0\n  )\n)\n\n\n\n\n\n\n\n# to avoid clipping text at the plot region, we can use xpd = NA\ntinyplot(mpg ~ hp | factor(cyl),\n  data = mtcars,\n  type = type_text(\n    labels = row.names(mtcars),\n    font = 2,\n    adj = 0,\n    xpd = NA\n  )\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_text"
    ]
  },
  {
    "objectID": "man/type_text.html#text-annotations-plot-type",
    "href": "man/type_text.html#text-annotations-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for adding text annotations to a plot. This function allows you to draw text at specified (x,y) coordinates.\n\n\n\ntype_text(\n  labels,\n  adj = NULL,\n  pos = NULL,\n  offset = 0.5,\n  vfont = NULL,\n  font = NULL,\n  xpd = NULL,\n  srt = 0,\n  clim = c(0.5, 2.5)\n)\n\n\n\n\n\n\n\nlabels\n\n\nCharacter vector of length 1 or of the same length as the number of x,y coordinates.\n\n\n\n\nadj\n\n\none or two values in \\([0, 1]\\) which specify the x (and optionally y) adjustment (‘justification’) of the labels, with 0 for left/bottom, 1 for right/top, and 0.5 for centered. On most devices values outside \\([0, 1]\\) will also work. See below.\n\n\n\n\npos\n\n\na position specifier for the text. If specified this overrides any adj value given. Values of 1, 2, 3 and 4, respectively indicate positions below, to the left of, above and to the right of the specified (x,y) coordinates.\n\n\n\n\noffset\n\n\nwhen pos is specified, this value controls the distance (‘offset’) of the text label from the specified coordinate in fractions of a character width.\n\n\n\n\nvfont\n\n\nNULL for the current font family, or a character vector of length 2 for Hershey vector fonts. The first element of the vector selects a typeface and the second element selects a style. Ignored if labels is an expression.\n\n\n\n\nfont\n\n\nFont to be used, following graphics::par().\n\n\n\n\nxpd\n\n\nLogical value or NA denoting text clipping behaviour, following graphics::par().\n\n\n\n\nsrt\n\n\nNumeric giving the desired string rotation in degrees.\n\n\n\n\nclim\n\n\nNumeric giving the lower and upper limits of the character expansion (cex) normalization for bubble charts.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\ntinyplot(mpg ~ hp | factor(cyl),\n  data = mtcars,\n  type = type_text(\n    labels = row.names(mtcars),\n    font = 2,\n    adj = 0\n  )\n)\n\n\n\n\n\n\n\n# to avoid clipping text at the plot region, we can use xpd = NA\ntinyplot(mpg ~ hp | factor(cyl),\n  data = mtcars,\n  type = type_text(\n    labels = row.names(mtcars),\n    font = 2,\n    adj = 0,\n    xpd = NA\n  )\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_text"
    ]
  },
  {
    "objectID": "man/type_lines.html",
    "href": "man/type_lines.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting lines.\n\n\n\ntype_lines(type = \"l\")\n\n\n\n\n\n\n\ntype\n\n\n1-character string giving the type of plot desired. The following values are possible, for details, see plot: “p” for points, “l” for lines, “b” for both points and lines, “c” for empty points joined by lines, “o” for overplotted points and lines, “s” and “S” for stair steps and “h” for histogram-like vertical lines. Finally, “n” does not produce any points or lines.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"l\" type convenience character string\ntinyplot(circumference ~ age | Tree, data = Orange, type = \"l\")\n\n\n\n\n\n\n\n# Use `type_lines()` to pass extra arguments for customization\ntinyplot(circumference ~ age | Tree, data = Orange, type = type_lines(type = \"s\"))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_lines"
    ]
  },
  {
    "objectID": "man/type_lines.html#lines-plot-type",
    "href": "man/type_lines.html#lines-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting lines.\n\n\n\ntype_lines(type = \"l\")\n\n\n\n\n\n\n\ntype\n\n\n1-character string giving the type of plot desired. The following values are possible, for details, see plot: “p” for points, “l” for lines, “b” for both points and lines, “c” for empty points joined by lines, “o” for overplotted points and lines, “s” and “S” for stair steps and “h” for histogram-like vertical lines. Finally, “n” does not produce any points or lines.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"l\" type convenience character string\ntinyplot(circumference ~ age | Tree, data = Orange, type = \"l\")\n\n\n\n\n\n\n\n# Use `type_lines()` to pass extra arguments for customization\ntinyplot(circumference ~ age | Tree, data = Orange, type = type_lines(type = \"s\"))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_lines"
    ]
  },
  {
    "objectID": "man/tinyplot.html",
    "href": "man/tinyplot.html",
    "title": "tinyplot",
    "section": "",
    "text": "Enhances the base plot function. Supported features include automatic legends and facets for grouped data, additional plot types, theme customization, and so on. Users can call either tinyplot(), or its shorthand alias plt().\n\n\n\ntinyplot(x, ...)\n\n## Default S3 method:\ntinyplot(\n  x = NULL,\n  y = NULL,\n  xmin = NULL,\n  xmax = NULL,\n  ymin = NULL,\n  ymax = NULL,\n  by = NULL,\n  facet = NULL,\n  facet.args = NULL,\n  data = NULL,\n  type = NULL,\n  legend = NULL,\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  xlim = NULL,\n  ylim = NULL,\n  axes = TRUE,\n  xaxt = NULL,\n  yaxt = NULL,\n  xaxs = NULL,\n  yaxs = NULL,\n  xaxb = NULL,\n  yaxb = NULL,\n  xaxl = NULL,\n  yaxl = NULL,\n  log = \"\",\n  flip = FALSE,\n  frame.plot = NULL,\n  grid = NULL,\n  palette = NULL,\n  pch = NULL,\n  lty = NULL,\n  lwd = NULL,\n  col = NULL,\n  bg = NULL,\n  fill = NULL,\n  alpha = NULL,\n  cex = NULL,\n  add = FALSE,\n  draw = NULL,\n  empty = FALSE,\n  restore.par = FALSE,\n  file = NULL,\n  width = NULL,\n  height = NULL,\n  asp = NA,\n  ...\n)\n\n## S3 method for class 'formula'\ntinyplot(\n  x = NULL,\n  data = parent.frame(),\n  facet = NULL,\n  facet.args = NULL,\n  type = NULL,\n  xmin = NULL,\n  xmax = NULL,\n  ymin = NULL,\n  ymax = NULL,\n  xlim = NULL,\n  ylim = NULL,\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = NULL,\n  asp = NA,\n  grid = NULL,\n  pch = NULL,\n  col = NULL,\n  lty = NULL,\n  lwd = NULL,\n  restore.par = FALSE,\n  formula = NULL,\n  subset = NULL,\n  na.action = NULL,\n  drop.unused.levels = TRUE,\n  ...\n)\n\n## S3 method for class 'density'\ntinyplot(x = NULL, type = c(\"l\", \"area\"), ...)\n\nplt(x, ...)\n\n\n\n\n\n\n\nx, y\n\n\nthe x and y arguments provide the x and y coordinates for the plot. Any reasonable way of defining the coordinates is acceptable; most likely the names of existing vectors or columns of data frames. See the ‘Examples’ section below, or the function xy.coords for details. If supplied separately, x and y must be of the same length.\n\n\n\n\n…\n\n\nother graphical parameters. If type is a character specification (such as “hist”) then any argument names that match those from the corresponding type_*() function (such as type_hist) are passed on to that. All remaining arguments from … can be further graphical parameters, see par).\n\n\n\n\nxmin, xmax, ymin, ymax\n\n\nminimum and maximum coordinates of relevant area or interval plot types. Only used when the type argument is one of “rect” or “segments” (where all four min-max coordinates are required), or “pointrange”, “errorbar”, or “ribbon” (where only ymin and ymax required alongside x). In the formula method the arguments can be specified as ymin = var if var is a variable in data.\n\n\n\n\nby\n\n\ngrouping variable(s). The default behaviour is for groups to be represented in the form of distinct colours, which will also trigger an automatic legend. (See legend below for customization options.) However, groups can also be presented through other plot parameters (e.g., pch, lty, or cex) by passing an appropriate “by” keyword; see Examples. Note that continuous (i.e., gradient) colour legends are also supported if the user passes a numeric or integer to by. To group by multiple variables, wrap them with interaction.\n\n\n\n\nfacet\n\n\nthe faceting variable(s) that you want arrange separate plot windows by. Can be specified in various ways:\n\n\nIn \"atomic\" form, e.g. facet = fvar. To facet by multiple variables in atomic form, simply interact them, e.g. interaction(fvar1, fvar2) or factor(fvar1):factor(fvar2).\n\n\nAs a one-sided formula, e.g. facet = ~fvar. Multiple variables can be specified in the formula RHS, e.g. ~fvar1 + fvar2 or ~fvar1:fvar2. Note that these multi-variable cases are all treated equivalently and converted to interaction(fvar1, fvar2, …) internally. (No distinction is made between different types of binary operators, for example, and so f1+f2 is treated the same as f1:f2, is treated the same as f1*f2, etc.)\n\n\nAs a two-side formula, e.g. facet = fvar1 ~ fvar2. In this case, the facet windows are arranged in a fixed grid layout, with the formula LHS defining the facet rows and the RHS defining the facet columns. At present only single variables on each side of the formula are well supported. (We don’t recommend trying to use multiple variables on either the LHS or RHS of the two-sided formula case.)\n\n\nAs a special “by” convenience keyword, in which case facets will match the grouping variable(s) passed to by above.\n\n\n\n\n\n\nfacet.args\n\n\nan optional list of arguments for controlling faceting behaviour. (Ignored if facet is NULL.) Supported arguments are as follows:\n\n\nnrow, ncol for overriding the default \"square\" facet window arrangement. Only one of these should be specified, but nrow will take precedence if both are specified together. Ignored if a two-sided formula is passed to the main facet argument, since the layout is arranged in a fixed grid.\n\n\nfree a logical value indicating whether the axis limits (scales) for each individual facet should adjust independently to match the range of the data within that facet. Default is FALSE. Separate free scaling of the x- or y-axis (i.e., whilst holding the other axis fixed) is not currently supported.\n\n\nfmar a vector of form c(b,l,t,r) for controlling the base margin between facets in terms of lines. Defaults to the value of tpar(“fmar”), which should be c(1,1,1,1), i.e. a single line of padding around each individual facet, assuming it hasn’t been overridden by the user as part their global tpar settings. Note some automatic adjustments are made for certain layouts, and depending on whether the plot is framed or not, to reduce excess whitespace. See tpar for more details.\n\n\ncex, font, col, bg, border for adjusting the facet title text and background. Default values for these arguments are inherited from tpar (where they take a \"facet.\" prefix, e.g. tpar(“facet.cex”)). The latter function can also be used to set these features globally for all tinyplot plots.\n\n\n\n\n\n\ndata\n\n\na data.frame (or list) from which the variables in formula should be taken. A matrix is converted to a data frame.\n\n\n\n\ntype\n\n\ncharacter string or call to a type_*() function giving the type of plot desired.\n\n\nNULL (default): Choose a sensible type for the type of x and y inputs (i.e., usually “p”).\n\n\n1-character values supported by plot:\n\n\n“p” Points\n\n\n“l” Lines\n\n\n“b” Both points and lines\n\n\n“c” Empty points joined by lines\n\n\n“o” Overplotted points and lines\n\n\n“s” Stair steps\n\n\n“S” Stair steps\n\n\n“h” Histogram-like vertical lines\n\n\n“n” Empty plot over the extent of the data\n\n\n\n\ntinyplot-specific types. These fall into several categories:\n\n\nShapes:\n\n\n“area” / type_area(): Plots the area under the curve from y = 0 to y = f(x).\n\n\n“errorbar” / type_errorbar(): Adds error bars to points; requires ymin and ymax.\n\n\n“pointrange” / type_pointrange(): Combines points with error bars.\n\n\n“polygon” / type_polygon(): Draws polygons.\n\n\n“polypath” / type_polypath(): Draws a path whose vertices are given in x and y.\n\n\n“rect” / type_rect(): Draws rectangles; requires xmin, xmax, ymin, and ymax.\n\n\n“ribbon” / type_ribbon(): Creates a filled area between ymin and ymax.\n\n\n“segments” / type_segments(): Draws line segments between pairs of points.\n\n\n“text” / type_text(): Add text annotations.\n\n\n\n\nVisualizations:\n\n\n“barplot” / type_barplot(): Creates a bar plot.\n\n\n“boxplot” / type_boxplot(): Creates a box-and-whisker plot.\n\n\n“density” / type_density(): Plots the density estimate of a variable.\n\n\n“histogram” / type_histogram(): Creates a histogram of a single variable.\n\n\n“jitter” / type_jitter(): Jittered points.\n\n\n“qq” / type_qq(): Creates a quantile-quantile plot.\n\n\n“ridge” / type_ridge(): Creates a ridgeline (aka joy) plot.\n\n\n“rug” / type_rug(): Adds a rug to an existing plot.\n\n\n“spineplot” / type_spineplot(): Creates a spineplot or spinogram.\n\n\n“violin” / type_violin(): Creates a violin plot.\n\n\n\n\nModels:\n\n\n“loess” / type_loess(): Local regression curve.\n\n\n“lm” / type_lm(): Linear regression line.\n\n\n“glm” / type_glm(): Generalized linear model fit.\n\n\n“spline” / type_spline(): Cubic (or Hermite) spline interpolation.\n\n\n\n\nFunctions:\n\n\ntype_abline(): line(s) with intercept and slope.\n\n\ntype_hline(): horizontal line(s).\n\n\ntype_vline(): vertical line(s).\n\n\ntype_function(): arbitrary function.\n\n\ntype_summary(): summarize y by unique values of x.\n\n\n\n\n\n\n\n\n\n\nlegend\n\n\none of the following options:\n\n\nNULL (default), in which case the legend will be determined by the grouping variable. If there is no group variable (i.e., by is NULL) then no legend is drawn. If a grouping variable is detected, then an automatic legend is drawn to the outer right of the plotting area. Note that the legend title and categories will automatically be inferred from the by argument and underlying data.\n\n\nA convenience string indicating the legend position. The string should correspond to one of the position keywords supported by the base legend function, e.g. \"right\", \"topleft\", \"bottom\", etc. In addition, tinyplot supports adding a trailing exclamation point to these keywords, e.g. \"right!\", \"topleft!\", or \"bottom!\". This will place the legend outside the plotting area and adjust the margins of the plot accordingly. Finally, users can also turn off any legend printing by specifying \"none\".\n\n\nLogical value, where TRUE corresponds to the default case above (same effect as specifying NULL) and FALSE turns the legend off (same effect as specifying \"none\").\n\n\nA list or, equivalently, a dedicated legend() function with supported legend arguments, e.g. \"bty\", \"horiz\", and so forth.\n\n\n\n\n\n\nmain\n\n\na main title for the plot, see also title.\n\n\n\n\nsub\n\n\na subtitle for the plot.\n\n\n\n\nxlab\n\n\na label for the x axis, defaults to a description of x.\n\n\n\n\nylab\n\n\na label for the y axis, defaults to a description of y.\n\n\n\n\nann\n\n\na logical value indicating whether the default annotation (title and x and y axis labels) should appear on the plot.\n\n\n\n\nxlim\n\n\nthe x limits (x1, x2) of the plot. Note that x1 &gt; x2 is allowed and leads to a ‘reversed axis’. The default value, NULL, indicates that the range of the finite values to be plotted should be used.\n\n\n\n\nylim\n\n\nthe y limits of the plot.\n\n\n\n\naxes\n\n\nlogical or character. Should axes be drawn (TRUE or FALSE)? Or alternatively what type of axes should be drawn: “standard” (with axis, ticks, and labels; equivalent to TRUE), “none” (no axes; equivalent to FALSE), “ticks” (only ticks and labels without axis line), “labels” (only labels without ticks and axis line), “axis” (only axis line and labels but no ticks). To control this separately for the two axes, use the character specifications for xaxt and/or yaxt.\n\n\n\n\nxaxt, yaxt\n\n\ncharacter specifying the type of x-axis and y-axis, respectively. See axes for the possible values.\n\n\n\n\nxaxs, yaxs\n\n\ncharacter specifying the style of the interval calculation used for the x-axis and y-axis, respectively. See par for the possible values.\n\n\n\n\nxaxb, yaxb\n\n\nnumeric vector (or character vector, if appropriate) giving the break points at which the axis tick-marks are to be drawn. Break points outside the range of the data will be ignored if the associated axis variable is categorical, or an explicit x/ylim range is given.\n\n\n\n\nxaxl, yaxl\n\n\na function or a character keyword specifying the format of the x- or y-axis tick labels. Note that this is a post-processing step that affects the appearance of the tick labels only; use in conjunction with x/yaxb if you would like to adjust the position of the tick marks too. In addition to user-supplied formatting functions (e.g., format, toupper, abs, or other custom function), several convenience keywords (or their symbol equivalents) are available for common formatting transformations: “percent” (“%”), “comma” (“,”), “log” (“l”), “dollar” (“$”), “euro” (“€”), or “sterling” (“£”). See the tinylabel documentation for examples.\n\n\n\n\nlog\n\n\na character string which contains “x” if the x axis is to be logarithmic, “y” if the y axis is to be logarithmic and “xy” or “yx” if both axes are to be logarithmic.\n\n\n\n\nflip\n\n\nlogical. Should the plot orientation be flipped, so that the y-axis is on the horizontal plane and the x-axis is on the vertical plane? Default is FALSE.\n\n\n\n\nframe.plot\n\n\na logical indicating whether a box should be drawn around the plot. Can also use frame as an acceptable argument alias. The default is to draw a frame if both axis types (set via axes, xaxt, or yaxt) include axis lines.\n\n\n\n\ngrid\n\n\nargument for plotting a background panel grid, one of either:\n\n\na logical (i.e., TRUE to draw the grid), or\n\n\na panel grid plotting function like grid(). Note that this argument replaces the panel.first and panel.last arguments from base plot() and tries to make the process more seamless with better default behaviour. The default behaviour is determined by (and can be set globally through) the value of tpar(“grid”).\n\n\n\n\n\n\npalette\n\n\none of the following options:\n\n\nNULL (default), in which case the palette will be chosen according to the class and cardinality of the \"by\" grouping variable. For non-ordered factors or strings with a reasonable number of groups, this will inherit directly from the user’s default palette (e.g., \"R4\"). In other cases, including ordered factors and high cardinality, the \"Viridis\" palette will be used instead. Note that a slightly restricted version of the \"Viridis\" palette—where extreme color values have been trimmed to improve visual perception—will be used for ordered factors and continuous variables. In the latter case of a continuous grouping variable, we also generate a gradient legend swatch.\n\n\nA convenience string corresponding to one of the many palettes listed by either palette.pals() or hcl.pals(). Note that the string can be case-insensitive (e.g., \"Okabe-Ito\" and \"okabe-ito\" are both valid).\n\n\nA palette-generating function. This can be \"bare\" (e.g., palette.colors) or \"closed\" with a set of named arguments (e.g., palette.colors(palette = “Okabe-Ito”, alpha = 0.5)). Note that any unnamed arguments will be ignored and the key n argument, denoting the number of colours, will automatically be spliced in as the number of groups.\n\n\nA vector or list of colours, e.g. c(“darkorange”, “purple”, “cyan4”). If too few colours are provided for a discrete (qualitative) set of groups, then the colours will be recycled with a warning. For continuous (sequential) groups, a gradient palette will be interpolated.\n\n\n\n\n\n\npch\n\n\nplotting \"character\", i.e., symbol to use. Character, integer, or vector of length equal to the number of categories in the by variable. See pch. In addition, users can supply a special pch = “by” convenience argument, in which case the characters will automatically loop over the number groups. This automatic looping will begin at the global character value (i.e., par(“pch”)) and recycle as necessary.\n\n\n\n\nlty\n\n\nline type. Character, integer, or vector of length equal to the number of categories in the by variable. See lty. In addition, users can supply a special lty = “by” convenience argument, in which case the line type will automatically loop over the number groups. This automatic looping will begin at the global line type value (i.e., par(“lty”)) and recycle as necessary.\n\n\n\n\nlwd\n\n\nline width. Numeric scalar or vector of length equal to the number of categories in the by variable. See lwd. In addition, users can supply a special lwd = “by” convenience argument, in which case the line width will automatically loop over the number of groups. This automatic looping will be centered at the global line width value (i.e., par(“lwd”)) and pad on either side of that.\n\n\n\n\ncol\n\n\nplotting color. Character, integer, or vector of length equal to the number of categories in the by variable. See col. Note that the default behaviour in tinyplot is to vary group colors along any variables declared in the by argument. Thus, specifying colors manually should not be necessary unless users wish to override the automatic colors produced by this grouping process. Typically, this would only be done if grouping features are deferred to some other graphical parameter (i.e., passing the \"by\" keyword to one of pch, lty, lwd, or bg; see below.)\n\n\n\n\nbg\n\n\nbackground fill color for the open plot symbols 21:25 (see points.default), as well as ribbon and area plot types. Users can also supply either one of two special convenience arguments that will cause the background fill to inherit the automatic grouped coloring behaviour of col:\n\n\nbg = “by” will insert a background fill that inherits the main color mappings from col.\n\n\nby = &lt;numeric[0,1]&gt; (i.e., a numeric in the range [0,1]) will insert a background fill that inherits the main color mapping(s) from col, but with added alpha-transparency.\n\n\nFor both of these convenience arguments, note that the (grouped) bg mappings will persist even if the (grouped) col defaults are themselves overridden. This can be useful if you want to preserve the grouped palette mappings by background fill but not boundary color, e.g. filled points. See examples.\n\n\n\n\nfill\n\n\nalias for bg. If non-NULL values for both bg and fill are provided, then the latter will be ignored in favour of the former.\n\n\n\n\nalpha\n\n\na numeric in the range [0,1] for adjusting the alpha channel of the color palette, where 0 means transparent and 1 means opaque. Use fractional values, e.g. 0.5 for semi-transparency.\n\n\n\n\ncex\n\n\ncharacter expansion. A numerical vector (can be a single value) giving the amount by which plotting characters and symbols should be scaled relative to the default. Note that NULL is equivalent to 1.0, while NA renders the characters invisible. There are two additional considerations, specifically for points-alike plot types (e.g. “p”):\n\n\nusers can also supply a special cex = “by” convenience argument, in which case the character expansion will automatically adjust by group too. The range of this character expansion is controlled by the clim argument in the respective types; see type_points() for example.\n\n\npassing a cex vector of equal length to the main x and y variables (e.g., another column in the same dataset) will yield a \"bubble\"plot with its own dedicated legend. This can provide a useful way to visualize an extra dimension of the data; see Examples.\n\n\n\n\n\n\nadd\n\n\nlogical. If TRUE, then elements are added to the current plot rather than drawing a new plot window. Note that the automatic legend for the added elements will be turned off. See also tinyplot_add, which provides a convenient wrapper around this functionality for layering on top of an existing plot without having to repeat arguments.\n\n\n\n\ndraw\n\n\na function that draws directly on the plot canvas (before x and y are plotted). The draw argument is primarily useful for adding common elements to each facet of a faceted plot, e.g. abline or text. Note that this argument is somewhat experimental and that no internal checking is done for correctness; the provided argument is simply captured and evaluated as-is. See Examples.\n\n\n\n\nempty\n\n\nlogical indicating whether the interior plot region should be left empty. The default is FALSE. Setting to TRUE has a similar effect to invoking type = “n” above, except that any legend artifacts owing to a particular plot type (e.g., lines for type = “l” or squares for type = “area”) will still be drawn correctly alongside the empty plot. In contrast,type = “n” implicitly assumes a scatterplot and so any legend will only depict points.\n\n\n\n\nrestore.par\n\n\na logical value indicating whether the par settings prior to calling tinyplot should be restored on exit. Defaults to FALSE, which makes it possible to add elements to the plot after it has been drawn. However, note the the outer margins of the graphics device may have been altered to make space for the tinyplot legend. Users can opt out of this persistent behaviour by setting to TRUE instead. See also get_saved_par for another option to recover the original par settings, as well as longer discussion about the trade-offs involved.\n\n\n\n\nfile\n\n\ncharacter string giving the file path for writing a plot to disk. If specified, the plot will not be displayed interactively, but rather sent to the appropriate external graphics device (i.e., png, jpeg, pdf, or svg). As a point of convenience, note that any global parameters held in (t)par are automatically carried over to the external device and don’t need to be reset (in contrast to the conventional base R approach that requires manually opening and closing the device). The device type is determined by the file extension at the end of the provided path, and must be one of \".png\", \".jpg\" (\".jpeg\"), \".pdf\", or \".svg\". (Other file types may be supported in the future.) The file dimensions can be controlled by the corresponding width and height arguments below, otherwise will fall back to the “file.width” and “file.height” values held in tpar (i.e., both defaulting to 7 inches, and where the default resolution for bitmap files is also specified as 300 DPI).\n\n\n\n\nwidth\n\n\nnumeric giving the plot width in inches. Together with height, typically used in conjunction with the file argument above, overriding the default values held in tpar(“file.width”, “file.height”). If either width or height is specified, but a corresponding file argument is not provided as well, then a new interactive graphics device dimensions will be opened along the given dimensions. Note that this interactive resizing may not work consistently from within an IDE like RStudio that has an integrated graphics windows.\n\n\n\n\nheight\n\n\nnumeric giving the plot height in inches. Same considerations as width (above) apply, e.g. will default to tpar(“file.height”) if not specified.\n\n\n\n\nasp\n\n\nthe y/xy/x aspect ratio, see plot.window.\n\n\n\n\nformula\n\n\na formula that optionally includes grouping variable(s) after a vertical bar, e.g. y ~ x | z. One-sided formulae are also permitted, e.g. ~ y | z. Only a single y and x variable (if any) must be specified but multiple grouping variables can be included in different ways, e.g. y ~ x | z1:z2 or y ~ x | z1 + z2. (These two representations are treated as equivalent; both are parsed as interaction(z1, z2) internally.) If arithmetic operators are used for transforming variables, they should be wrapped in I(), e.g., I(y1/y2) ~ x. Note that the formula and x arguments should not be specified in the same call.\n\n\n\n\nsubset, na.action, drop.unused.levels\n\n\narguments passed to model.frame when extracting the data from formula and data.\n\n\n\n\n\n\nDisregarding the enhancements that it supports, tinyplot tries as far as possible to mimic the behaviour and syntax logic of the original base plot function. Users should therefore be able to swap out existing plot calls for tinyplot (or its shorthand alias plt), without causing unexpected changes to the output.\n\n\n\nNo return value, called for side effect of producing a plot.\n\n\n\n\nlibrary(\"tinyplot\")\n\naq = transform(\n  airquality,\n  Month = factor(Month, labels = month.abb[unique(Month)])\n)\n\n# In most cases, `tinyplot` should be a drop-in replacement for regular\n# `plot` calls. For example:\n\nop = tpar(mfrow = c(1, 2))\nplot(0:10, main = \"plot\")\ntinyplot(0:10, main = \"tinyplot\")\n\n\n\n\n\n\n\ntpar(op) # restore original layout\n\n# Aside: `tinyplot::tpar()` is a (near) drop-in replacement for `par()`\n\n# Unlike vanilla plot, however, tinyplot allows you to characterize groups\n# using either the `by` argument or equivalent `|` formula syntax.\n\nwith(aq, tinyplot(Day, Temp, by = Month)) ## atomic method\n\n\n\n\n\n\n\ntinyplot(Temp ~ Day | Month, data = aq) ## formula method\n\n\n\n\n\n\n\n# (Notice that we also get an automatic legend.)\n\n# You can also use the equivalent shorthand `plt()` alias if you'd like to\n# save on a few keystrokes\n\nplt(Temp ~ Day | Month, data = aq) ## shorthand alias\n\n\n\n\n\n\n\n# Use standard base plotting arguments to adjust features of your plot.\n# For example, change `pch` (plot character) to get filled points and `cex`\n# (character expansion) to increase their size.\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 16,\n  cex = 2\n)\n\n\n\n\n\n\n\n# Use the special \"by\" convenience keyword if you would like to map these\n# aesthetic features over groups too (i.e., in addition to the default\n# colour grouping)\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = \"by\",\n  cex = \"by\"\n)\n\n\n\n\n\n\n\n# We can add alpha transparency for overlapping points\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 16,\n  cex = 2,\n  alpha = 0.3\n)\n\n\n\n\n\n\n\n# To get filled points with a common solid background color, use an\n# appropriate plotting character (21:25) and combine with one of the special\n# `bg`/`fill` convenience arguments.\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 21, # use filled circles\n  cex = 2,\n  bg = 0.3, # numeric in [0,1] adds a grouped background fill with transparency\n  col = \"black\" # override default color mapping; give all points a black border\n)\n\n\n\n\n\n\n\n# Aside: For \"bubble\" plots, pass an appropriate vector to the `cex` arg.\n# This can be useful for depicting an additional dimension of the data (here:\n# Wind).\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 21,\n  cex = aq$Wind, # map character size to another feature in the data\n  bg = 0.3,\n  col = \"black\"\n)\n\n\n\n\n\n\n\n# Converting to a grouped line plot is a simple matter of adjusting the\n# `type` argument.\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\"\n)\n\n\n\n\n\n\n\n# Similarly for other plot types, including some additional ones provided\n# directly by tinyplot, e.g. density plots or internal plots (ribbons,\n# pointranges, etc.)\n\ntinyplot(\n  ~ Temp | Month,\n  data = aq,\n  type = \"density\",\n  fill = \"by\"\n)\n\n\n\n\n\n\n\n# Facet plots are supported too. Facets can be drawn on their own...\n\ntinyplot(\n  Temp ~ Day,\n  facet = ~Month,\n  data = aq,\n  type = \"area\",\n  main = \"Temperatures by month\"\n)\n\n\n\n\n\n\n\n# ... or combined/contrasted with the by (colour) grouping.\n\naq = transform(aq, Summer = Month %in% c(\"Jun\", \"Jul\", \"Aug\"))\ntinyplot(\n  Temp ~ Day | Summer,\n  facet = ~Month,\n  data = aq,\n  type = \"area\",\n  palette = \"dark2\",\n  main = \"Temperatures by month and season\"\n)\n\n\n\n\n\n\n\n# Users can override the default square window arrangement by passing `nrow`\n# or `ncol` to the helper facet.args argument. Note that we can also reduce\n# axis label repetition across facets by turning the plot frame off.\n\ntinyplot(\n  Temp ~ Day | Summer,\n  facet = ~Month, facet.args = list(nrow = 1),\n  data = aq,\n  type = \"area\",\n  palette = \"dark2\",\n  frame = FALSE,\n  main = \"Temperatures by month and season\"\n)\n\n\n\n\n\n\n\n# Use a two-sided formula to arrange the facet windows in a fixed grid.\n# LHS -&gt; facet rows; RHS -&gt; facet columns\n\naq$hot = ifelse(aq$Temp &gt;= 75, \"hot\", \"cold\")\naq$windy = ifelse(aq$Wind &gt;= 15, \"windy\", \"calm\")\ntinyplot(\n  Temp ~ Day,\n  facet = windy ~ hot,\n  data = aq\n)\n\n\n\n\n\n\n\n# To add common elements to each facet, use the `draw` argument\n\ntinyplot(\n  Temp ~ Day,\n  facet = windy ~ hot,\n  data = aq,\n  draw = abline(h = 75, lty = 2, col = \"hotpink\")\n)\n\n\n\n\n\n\n\n# The (automatic) legend position and look can be customized using\n# appropriate arguments. Note the trailing \"!\" in the `legend` position\n# argument below. This tells `tinyplot` to place the legend _outside_ the plot\n# area.\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\",\n  legend = legend(\"bottom!\", title = \"Month of the year\", bty = \"o\")\n)\n\n\n\n\n\n\n\n# The default group colours are inherited from either the \"R4\" or \"Viridis\"\n# palettes, depending on the number of groups. However, all palettes listed\n# by `palette.pals()` and `hcl.pals()` are supported as convenience strings,\n# or users can supply a valid palette-generating function for finer control\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\",\n  palette = \"tableau\"\n)\n\n\n\n\n\n\n\n# It's possible to customize the look of your plots by setting graphical\n# parameters (e.g., via `(t)par`)... But a more convenient way is to just use\n# built-in themes (see `?tinytheme`).\n\ntinytheme(\"clean2\")\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"b\",\n  alpha = 0.5,\n  main = \"Daily temperatures by month\",\n  sub = \"Brought to you by tinyplot\"\n)\n\n\n\n\n\n\n\n# reset the theme\ntinytheme()\n\n# For more examples and a detailed walkthrough, please see the introductory\n# tinyplot tutorial available online:\n# https://grantmcdermott.com/tinyplot/vignettes/introduction.html",
    "crumbs": [
      "Reference",
      "Main functions",
      "tinyplot"
    ]
  },
  {
    "objectID": "man/tinyplot.html#lightweight-extension-of-the-base-r-plotting-function",
    "href": "man/tinyplot.html#lightweight-extension-of-the-base-r-plotting-function",
    "title": "tinyplot",
    "section": "",
    "text": "Enhances the base plot function. Supported features include automatic legends and facets for grouped data, additional plot types, theme customization, and so on. Users can call either tinyplot(), or its shorthand alias plt().\n\n\n\ntinyplot(x, ...)\n\n## Default S3 method:\ntinyplot(\n  x = NULL,\n  y = NULL,\n  xmin = NULL,\n  xmax = NULL,\n  ymin = NULL,\n  ymax = NULL,\n  by = NULL,\n  facet = NULL,\n  facet.args = NULL,\n  data = NULL,\n  type = NULL,\n  legend = NULL,\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  xlim = NULL,\n  ylim = NULL,\n  axes = TRUE,\n  xaxt = NULL,\n  yaxt = NULL,\n  xaxs = NULL,\n  yaxs = NULL,\n  xaxb = NULL,\n  yaxb = NULL,\n  xaxl = NULL,\n  yaxl = NULL,\n  log = \"\",\n  flip = FALSE,\n  frame.plot = NULL,\n  grid = NULL,\n  palette = NULL,\n  pch = NULL,\n  lty = NULL,\n  lwd = NULL,\n  col = NULL,\n  bg = NULL,\n  fill = NULL,\n  alpha = NULL,\n  cex = NULL,\n  add = FALSE,\n  draw = NULL,\n  empty = FALSE,\n  restore.par = FALSE,\n  file = NULL,\n  width = NULL,\n  height = NULL,\n  asp = NA,\n  ...\n)\n\n## S3 method for class 'formula'\ntinyplot(\n  x = NULL,\n  data = parent.frame(),\n  facet = NULL,\n  facet.args = NULL,\n  type = NULL,\n  xmin = NULL,\n  xmax = NULL,\n  ymin = NULL,\n  ymax = NULL,\n  xlim = NULL,\n  ylim = NULL,\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = NULL,\n  asp = NA,\n  grid = NULL,\n  pch = NULL,\n  col = NULL,\n  lty = NULL,\n  lwd = NULL,\n  restore.par = FALSE,\n  formula = NULL,\n  subset = NULL,\n  na.action = NULL,\n  drop.unused.levels = TRUE,\n  ...\n)\n\n## S3 method for class 'density'\ntinyplot(x = NULL, type = c(\"l\", \"area\"), ...)\n\nplt(x, ...)\n\n\n\n\n\n\n\nx, y\n\n\nthe x and y arguments provide the x and y coordinates for the plot. Any reasonable way of defining the coordinates is acceptable; most likely the names of existing vectors or columns of data frames. See the ‘Examples’ section below, or the function xy.coords for details. If supplied separately, x and y must be of the same length.\n\n\n\n\n…\n\n\nother graphical parameters. If type is a character specification (such as “hist”) then any argument names that match those from the corresponding type_*() function (such as type_hist) are passed on to that. All remaining arguments from … can be further graphical parameters, see par).\n\n\n\n\nxmin, xmax, ymin, ymax\n\n\nminimum and maximum coordinates of relevant area or interval plot types. Only used when the type argument is one of “rect” or “segments” (where all four min-max coordinates are required), or “pointrange”, “errorbar”, or “ribbon” (where only ymin and ymax required alongside x). In the formula method the arguments can be specified as ymin = var if var is a variable in data.\n\n\n\n\nby\n\n\ngrouping variable(s). The default behaviour is for groups to be represented in the form of distinct colours, which will also trigger an automatic legend. (See legend below for customization options.) However, groups can also be presented through other plot parameters (e.g., pch, lty, or cex) by passing an appropriate “by” keyword; see Examples. Note that continuous (i.e., gradient) colour legends are also supported if the user passes a numeric or integer to by. To group by multiple variables, wrap them with interaction.\n\n\n\n\nfacet\n\n\nthe faceting variable(s) that you want arrange separate plot windows by. Can be specified in various ways:\n\n\nIn \"atomic\" form, e.g. facet = fvar. To facet by multiple variables in atomic form, simply interact them, e.g. interaction(fvar1, fvar2) or factor(fvar1):factor(fvar2).\n\n\nAs a one-sided formula, e.g. facet = ~fvar. Multiple variables can be specified in the formula RHS, e.g. ~fvar1 + fvar2 or ~fvar1:fvar2. Note that these multi-variable cases are all treated equivalently and converted to interaction(fvar1, fvar2, …) internally. (No distinction is made between different types of binary operators, for example, and so f1+f2 is treated the same as f1:f2, is treated the same as f1*f2, etc.)\n\n\nAs a two-side formula, e.g. facet = fvar1 ~ fvar2. In this case, the facet windows are arranged in a fixed grid layout, with the formula LHS defining the facet rows and the RHS defining the facet columns. At present only single variables on each side of the formula are well supported. (We don’t recommend trying to use multiple variables on either the LHS or RHS of the two-sided formula case.)\n\n\nAs a special “by” convenience keyword, in which case facets will match the grouping variable(s) passed to by above.\n\n\n\n\n\n\nfacet.args\n\n\nan optional list of arguments for controlling faceting behaviour. (Ignored if facet is NULL.) Supported arguments are as follows:\n\n\nnrow, ncol for overriding the default \"square\" facet window arrangement. Only one of these should be specified, but nrow will take precedence if both are specified together. Ignored if a two-sided formula is passed to the main facet argument, since the layout is arranged in a fixed grid.\n\n\nfree a logical value indicating whether the axis limits (scales) for each individual facet should adjust independently to match the range of the data within that facet. Default is FALSE. Separate free scaling of the x- or y-axis (i.e., whilst holding the other axis fixed) is not currently supported.\n\n\nfmar a vector of form c(b,l,t,r) for controlling the base margin between facets in terms of lines. Defaults to the value of tpar(“fmar”), which should be c(1,1,1,1), i.e. a single line of padding around each individual facet, assuming it hasn’t been overridden by the user as part their global tpar settings. Note some automatic adjustments are made for certain layouts, and depending on whether the plot is framed or not, to reduce excess whitespace. See tpar for more details.\n\n\ncex, font, col, bg, border for adjusting the facet title text and background. Default values for these arguments are inherited from tpar (where they take a \"facet.\" prefix, e.g. tpar(“facet.cex”)). The latter function can also be used to set these features globally for all tinyplot plots.\n\n\n\n\n\n\ndata\n\n\na data.frame (or list) from which the variables in formula should be taken. A matrix is converted to a data frame.\n\n\n\n\ntype\n\n\ncharacter string or call to a type_*() function giving the type of plot desired.\n\n\nNULL (default): Choose a sensible type for the type of x and y inputs (i.e., usually “p”).\n\n\n1-character values supported by plot:\n\n\n“p” Points\n\n\n“l” Lines\n\n\n“b” Both points and lines\n\n\n“c” Empty points joined by lines\n\n\n“o” Overplotted points and lines\n\n\n“s” Stair steps\n\n\n“S” Stair steps\n\n\n“h” Histogram-like vertical lines\n\n\n“n” Empty plot over the extent of the data\n\n\n\n\ntinyplot-specific types. These fall into several categories:\n\n\nShapes:\n\n\n“area” / type_area(): Plots the area under the curve from y = 0 to y = f(x).\n\n\n“errorbar” / type_errorbar(): Adds error bars to points; requires ymin and ymax.\n\n\n“pointrange” / type_pointrange(): Combines points with error bars.\n\n\n“polygon” / type_polygon(): Draws polygons.\n\n\n“polypath” / type_polypath(): Draws a path whose vertices are given in x and y.\n\n\n“rect” / type_rect(): Draws rectangles; requires xmin, xmax, ymin, and ymax.\n\n\n“ribbon” / type_ribbon(): Creates a filled area between ymin and ymax.\n\n\n“segments” / type_segments(): Draws line segments between pairs of points.\n\n\n“text” / type_text(): Add text annotations.\n\n\n\n\nVisualizations:\n\n\n“barplot” / type_barplot(): Creates a bar plot.\n\n\n“boxplot” / type_boxplot(): Creates a box-and-whisker plot.\n\n\n“density” / type_density(): Plots the density estimate of a variable.\n\n\n“histogram” / type_histogram(): Creates a histogram of a single variable.\n\n\n“jitter” / type_jitter(): Jittered points.\n\n\n“qq” / type_qq(): Creates a quantile-quantile plot.\n\n\n“ridge” / type_ridge(): Creates a ridgeline (aka joy) plot.\n\n\n“rug” / type_rug(): Adds a rug to an existing plot.\n\n\n“spineplot” / type_spineplot(): Creates a spineplot or spinogram.\n\n\n“violin” / type_violin(): Creates a violin plot.\n\n\n\n\nModels:\n\n\n“loess” / type_loess(): Local regression curve.\n\n\n“lm” / type_lm(): Linear regression line.\n\n\n“glm” / type_glm(): Generalized linear model fit.\n\n\n“spline” / type_spline(): Cubic (or Hermite) spline interpolation.\n\n\n\n\nFunctions:\n\n\ntype_abline(): line(s) with intercept and slope.\n\n\ntype_hline(): horizontal line(s).\n\n\ntype_vline(): vertical line(s).\n\n\ntype_function(): arbitrary function.\n\n\ntype_summary(): summarize y by unique values of x.\n\n\n\n\n\n\n\n\n\n\nlegend\n\n\none of the following options:\n\n\nNULL (default), in which case the legend will be determined by the grouping variable. If there is no group variable (i.e., by is NULL) then no legend is drawn. If a grouping variable is detected, then an automatic legend is drawn to the outer right of the plotting area. Note that the legend title and categories will automatically be inferred from the by argument and underlying data.\n\n\nA convenience string indicating the legend position. The string should correspond to one of the position keywords supported by the base legend function, e.g. \"right\", \"topleft\", \"bottom\", etc. In addition, tinyplot supports adding a trailing exclamation point to these keywords, e.g. \"right!\", \"topleft!\", or \"bottom!\". This will place the legend outside the plotting area and adjust the margins of the plot accordingly. Finally, users can also turn off any legend printing by specifying \"none\".\n\n\nLogical value, where TRUE corresponds to the default case above (same effect as specifying NULL) and FALSE turns the legend off (same effect as specifying \"none\").\n\n\nA list or, equivalently, a dedicated legend() function with supported legend arguments, e.g. \"bty\", \"horiz\", and so forth.\n\n\n\n\n\n\nmain\n\n\na main title for the plot, see also title.\n\n\n\n\nsub\n\n\na subtitle for the plot.\n\n\n\n\nxlab\n\n\na label for the x axis, defaults to a description of x.\n\n\n\n\nylab\n\n\na label for the y axis, defaults to a description of y.\n\n\n\n\nann\n\n\na logical value indicating whether the default annotation (title and x and y axis labels) should appear on the plot.\n\n\n\n\nxlim\n\n\nthe x limits (x1, x2) of the plot. Note that x1 &gt; x2 is allowed and leads to a ‘reversed axis’. The default value, NULL, indicates that the range of the finite values to be plotted should be used.\n\n\n\n\nylim\n\n\nthe y limits of the plot.\n\n\n\n\naxes\n\n\nlogical or character. Should axes be drawn (TRUE or FALSE)? Or alternatively what type of axes should be drawn: “standard” (with axis, ticks, and labels; equivalent to TRUE), “none” (no axes; equivalent to FALSE), “ticks” (only ticks and labels without axis line), “labels” (only labels without ticks and axis line), “axis” (only axis line and labels but no ticks). To control this separately for the two axes, use the character specifications for xaxt and/or yaxt.\n\n\n\n\nxaxt, yaxt\n\n\ncharacter specifying the type of x-axis and y-axis, respectively. See axes for the possible values.\n\n\n\n\nxaxs, yaxs\n\n\ncharacter specifying the style of the interval calculation used for the x-axis and y-axis, respectively. See par for the possible values.\n\n\n\n\nxaxb, yaxb\n\n\nnumeric vector (or character vector, if appropriate) giving the break points at which the axis tick-marks are to be drawn. Break points outside the range of the data will be ignored if the associated axis variable is categorical, or an explicit x/ylim range is given.\n\n\n\n\nxaxl, yaxl\n\n\na function or a character keyword specifying the format of the x- or y-axis tick labels. Note that this is a post-processing step that affects the appearance of the tick labels only; use in conjunction with x/yaxb if you would like to adjust the position of the tick marks too. In addition to user-supplied formatting functions (e.g., format, toupper, abs, or other custom function), several convenience keywords (or their symbol equivalents) are available for common formatting transformations: “percent” (“%”), “comma” (“,”), “log” (“l”), “dollar” (“$”), “euro” (“€”), or “sterling” (“£”). See the tinylabel documentation for examples.\n\n\n\n\nlog\n\n\na character string which contains “x” if the x axis is to be logarithmic, “y” if the y axis is to be logarithmic and “xy” or “yx” if both axes are to be logarithmic.\n\n\n\n\nflip\n\n\nlogical. Should the plot orientation be flipped, so that the y-axis is on the horizontal plane and the x-axis is on the vertical plane? Default is FALSE.\n\n\n\n\nframe.plot\n\n\na logical indicating whether a box should be drawn around the plot. Can also use frame as an acceptable argument alias. The default is to draw a frame if both axis types (set via axes, xaxt, or yaxt) include axis lines.\n\n\n\n\ngrid\n\n\nargument for plotting a background panel grid, one of either:\n\n\na logical (i.e., TRUE to draw the grid), or\n\n\na panel grid plotting function like grid(). Note that this argument replaces the panel.first and panel.last arguments from base plot() and tries to make the process more seamless with better default behaviour. The default behaviour is determined by (and can be set globally through) the value of tpar(“grid”).\n\n\n\n\n\n\npalette\n\n\none of the following options:\n\n\nNULL (default), in which case the palette will be chosen according to the class and cardinality of the \"by\" grouping variable. For non-ordered factors or strings with a reasonable number of groups, this will inherit directly from the user’s default palette (e.g., \"R4\"). In other cases, including ordered factors and high cardinality, the \"Viridis\" palette will be used instead. Note that a slightly restricted version of the \"Viridis\" palette—where extreme color values have been trimmed to improve visual perception—will be used for ordered factors and continuous variables. In the latter case of a continuous grouping variable, we also generate a gradient legend swatch.\n\n\nA convenience string corresponding to one of the many palettes listed by either palette.pals() or hcl.pals(). Note that the string can be case-insensitive (e.g., \"Okabe-Ito\" and \"okabe-ito\" are both valid).\n\n\nA palette-generating function. This can be \"bare\" (e.g., palette.colors) or \"closed\" with a set of named arguments (e.g., palette.colors(palette = “Okabe-Ito”, alpha = 0.5)). Note that any unnamed arguments will be ignored and the key n argument, denoting the number of colours, will automatically be spliced in as the number of groups.\n\n\nA vector or list of colours, e.g. c(“darkorange”, “purple”, “cyan4”). If too few colours are provided for a discrete (qualitative) set of groups, then the colours will be recycled with a warning. For continuous (sequential) groups, a gradient palette will be interpolated.\n\n\n\n\n\n\npch\n\n\nplotting \"character\", i.e., symbol to use. Character, integer, or vector of length equal to the number of categories in the by variable. See pch. In addition, users can supply a special pch = “by” convenience argument, in which case the characters will automatically loop over the number groups. This automatic looping will begin at the global character value (i.e., par(“pch”)) and recycle as necessary.\n\n\n\n\nlty\n\n\nline type. Character, integer, or vector of length equal to the number of categories in the by variable. See lty. In addition, users can supply a special lty = “by” convenience argument, in which case the line type will automatically loop over the number groups. This automatic looping will begin at the global line type value (i.e., par(“lty”)) and recycle as necessary.\n\n\n\n\nlwd\n\n\nline width. Numeric scalar or vector of length equal to the number of categories in the by variable. See lwd. In addition, users can supply a special lwd = “by” convenience argument, in which case the line width will automatically loop over the number of groups. This automatic looping will be centered at the global line width value (i.e., par(“lwd”)) and pad on either side of that.\n\n\n\n\ncol\n\n\nplotting color. Character, integer, or vector of length equal to the number of categories in the by variable. See col. Note that the default behaviour in tinyplot is to vary group colors along any variables declared in the by argument. Thus, specifying colors manually should not be necessary unless users wish to override the automatic colors produced by this grouping process. Typically, this would only be done if grouping features are deferred to some other graphical parameter (i.e., passing the \"by\" keyword to one of pch, lty, lwd, or bg; see below.)\n\n\n\n\nbg\n\n\nbackground fill color for the open plot symbols 21:25 (see points.default), as well as ribbon and area plot types. Users can also supply either one of two special convenience arguments that will cause the background fill to inherit the automatic grouped coloring behaviour of col:\n\n\nbg = “by” will insert a background fill that inherits the main color mappings from col.\n\n\nby = &lt;numeric[0,1]&gt; (i.e., a numeric in the range [0,1]) will insert a background fill that inherits the main color mapping(s) from col, but with added alpha-transparency.\n\n\nFor both of these convenience arguments, note that the (grouped) bg mappings will persist even if the (grouped) col defaults are themselves overridden. This can be useful if you want to preserve the grouped palette mappings by background fill but not boundary color, e.g. filled points. See examples.\n\n\n\n\nfill\n\n\nalias for bg. If non-NULL values for both bg and fill are provided, then the latter will be ignored in favour of the former.\n\n\n\n\nalpha\n\n\na numeric in the range [0,1] for adjusting the alpha channel of the color palette, where 0 means transparent and 1 means opaque. Use fractional values, e.g. 0.5 for semi-transparency.\n\n\n\n\ncex\n\n\ncharacter expansion. A numerical vector (can be a single value) giving the amount by which plotting characters and symbols should be scaled relative to the default. Note that NULL is equivalent to 1.0, while NA renders the characters invisible. There are two additional considerations, specifically for points-alike plot types (e.g. “p”):\n\n\nusers can also supply a special cex = “by” convenience argument, in which case the character expansion will automatically adjust by group too. The range of this character expansion is controlled by the clim argument in the respective types; see type_points() for example.\n\n\npassing a cex vector of equal length to the main x and y variables (e.g., another column in the same dataset) will yield a \"bubble\"plot with its own dedicated legend. This can provide a useful way to visualize an extra dimension of the data; see Examples.\n\n\n\n\n\n\nadd\n\n\nlogical. If TRUE, then elements are added to the current plot rather than drawing a new plot window. Note that the automatic legend for the added elements will be turned off. See also tinyplot_add, which provides a convenient wrapper around this functionality for layering on top of an existing plot without having to repeat arguments.\n\n\n\n\ndraw\n\n\na function that draws directly on the plot canvas (before x and y are plotted). The draw argument is primarily useful for adding common elements to each facet of a faceted plot, e.g. abline or text. Note that this argument is somewhat experimental and that no internal checking is done for correctness; the provided argument is simply captured and evaluated as-is. See Examples.\n\n\n\n\nempty\n\n\nlogical indicating whether the interior plot region should be left empty. The default is FALSE. Setting to TRUE has a similar effect to invoking type = “n” above, except that any legend artifacts owing to a particular plot type (e.g., lines for type = “l” or squares for type = “area”) will still be drawn correctly alongside the empty plot. In contrast,type = “n” implicitly assumes a scatterplot and so any legend will only depict points.\n\n\n\n\nrestore.par\n\n\na logical value indicating whether the par settings prior to calling tinyplot should be restored on exit. Defaults to FALSE, which makes it possible to add elements to the plot after it has been drawn. However, note the the outer margins of the graphics device may have been altered to make space for the tinyplot legend. Users can opt out of this persistent behaviour by setting to TRUE instead. See also get_saved_par for another option to recover the original par settings, as well as longer discussion about the trade-offs involved.\n\n\n\n\nfile\n\n\ncharacter string giving the file path for writing a plot to disk. If specified, the plot will not be displayed interactively, but rather sent to the appropriate external graphics device (i.e., png, jpeg, pdf, or svg). As a point of convenience, note that any global parameters held in (t)par are automatically carried over to the external device and don’t need to be reset (in contrast to the conventional base R approach that requires manually opening and closing the device). The device type is determined by the file extension at the end of the provided path, and must be one of \".png\", \".jpg\" (\".jpeg\"), \".pdf\", or \".svg\". (Other file types may be supported in the future.) The file dimensions can be controlled by the corresponding width and height arguments below, otherwise will fall back to the “file.width” and “file.height” values held in tpar (i.e., both defaulting to 7 inches, and where the default resolution for bitmap files is also specified as 300 DPI).\n\n\n\n\nwidth\n\n\nnumeric giving the plot width in inches. Together with height, typically used in conjunction with the file argument above, overriding the default values held in tpar(“file.width”, “file.height”). If either width or height is specified, but a corresponding file argument is not provided as well, then a new interactive graphics device dimensions will be opened along the given dimensions. Note that this interactive resizing may not work consistently from within an IDE like RStudio that has an integrated graphics windows.\n\n\n\n\nheight\n\n\nnumeric giving the plot height in inches. Same considerations as width (above) apply, e.g. will default to tpar(“file.height”) if not specified.\n\n\n\n\nasp\n\n\nthe y/xy/x aspect ratio, see plot.window.\n\n\n\n\nformula\n\n\na formula that optionally includes grouping variable(s) after a vertical bar, e.g. y ~ x | z. One-sided formulae are also permitted, e.g. ~ y | z. Only a single y and x variable (if any) must be specified but multiple grouping variables can be included in different ways, e.g. y ~ x | z1:z2 or y ~ x | z1 + z2. (These two representations are treated as equivalent; both are parsed as interaction(z1, z2) internally.) If arithmetic operators are used for transforming variables, they should be wrapped in I(), e.g., I(y1/y2) ~ x. Note that the formula and x arguments should not be specified in the same call.\n\n\n\n\nsubset, na.action, drop.unused.levels\n\n\narguments passed to model.frame when extracting the data from formula and data.\n\n\n\n\n\n\nDisregarding the enhancements that it supports, tinyplot tries as far as possible to mimic the behaviour and syntax logic of the original base plot function. Users should therefore be able to swap out existing plot calls for tinyplot (or its shorthand alias plt), without causing unexpected changes to the output.\n\n\n\nNo return value, called for side effect of producing a plot.\n\n\n\n\nlibrary(\"tinyplot\")\n\naq = transform(\n  airquality,\n  Month = factor(Month, labels = month.abb[unique(Month)])\n)\n\n# In most cases, `tinyplot` should be a drop-in replacement for regular\n# `plot` calls. For example:\n\nop = tpar(mfrow = c(1, 2))\nplot(0:10, main = \"plot\")\ntinyplot(0:10, main = \"tinyplot\")\n\n\n\n\n\n\n\ntpar(op) # restore original layout\n\n# Aside: `tinyplot::tpar()` is a (near) drop-in replacement for `par()`\n\n# Unlike vanilla plot, however, tinyplot allows you to characterize groups\n# using either the `by` argument or equivalent `|` formula syntax.\n\nwith(aq, tinyplot(Day, Temp, by = Month)) ## atomic method\n\n\n\n\n\n\n\ntinyplot(Temp ~ Day | Month, data = aq) ## formula method\n\n\n\n\n\n\n\n# (Notice that we also get an automatic legend.)\n\n# You can also use the equivalent shorthand `plt()` alias if you'd like to\n# save on a few keystrokes\n\nplt(Temp ~ Day | Month, data = aq) ## shorthand alias\n\n\n\n\n\n\n\n# Use standard base plotting arguments to adjust features of your plot.\n# For example, change `pch` (plot character) to get filled points and `cex`\n# (character expansion) to increase their size.\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 16,\n  cex = 2\n)\n\n\n\n\n\n\n\n# Use the special \"by\" convenience keyword if you would like to map these\n# aesthetic features over groups too (i.e., in addition to the default\n# colour grouping)\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = \"by\",\n  cex = \"by\"\n)\n\n\n\n\n\n\n\n# We can add alpha transparency for overlapping points\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 16,\n  cex = 2,\n  alpha = 0.3\n)\n\n\n\n\n\n\n\n# To get filled points with a common solid background color, use an\n# appropriate plotting character (21:25) and combine with one of the special\n# `bg`/`fill` convenience arguments.\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 21, # use filled circles\n  cex = 2,\n  bg = 0.3, # numeric in [0,1] adds a grouped background fill with transparency\n  col = \"black\" # override default color mapping; give all points a black border\n)\n\n\n\n\n\n\n\n# Aside: For \"bubble\" plots, pass an appropriate vector to the `cex` arg.\n# This can be useful for depicting an additional dimension of the data (here:\n# Wind).\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 21,\n  cex = aq$Wind, # map character size to another feature in the data\n  bg = 0.3,\n  col = \"black\"\n)\n\n\n\n\n\n\n\n# Converting to a grouped line plot is a simple matter of adjusting the\n# `type` argument.\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\"\n)\n\n\n\n\n\n\n\n# Similarly for other plot types, including some additional ones provided\n# directly by tinyplot, e.g. density plots or internal plots (ribbons,\n# pointranges, etc.)\n\ntinyplot(\n  ~ Temp | Month,\n  data = aq,\n  type = \"density\",\n  fill = \"by\"\n)\n\n\n\n\n\n\n\n# Facet plots are supported too. Facets can be drawn on their own...\n\ntinyplot(\n  Temp ~ Day,\n  facet = ~Month,\n  data = aq,\n  type = \"area\",\n  main = \"Temperatures by month\"\n)\n\n\n\n\n\n\n\n# ... or combined/contrasted with the by (colour) grouping.\n\naq = transform(aq, Summer = Month %in% c(\"Jun\", \"Jul\", \"Aug\"))\ntinyplot(\n  Temp ~ Day | Summer,\n  facet = ~Month,\n  data = aq,\n  type = \"area\",\n  palette = \"dark2\",\n  main = \"Temperatures by month and season\"\n)\n\n\n\n\n\n\n\n# Users can override the default square window arrangement by passing `nrow`\n# or `ncol` to the helper facet.args argument. Note that we can also reduce\n# axis label repetition across facets by turning the plot frame off.\n\ntinyplot(\n  Temp ~ Day | Summer,\n  facet = ~Month, facet.args = list(nrow = 1),\n  data = aq,\n  type = \"area\",\n  palette = \"dark2\",\n  frame = FALSE,\n  main = \"Temperatures by month and season\"\n)\n\n\n\n\n\n\n\n# Use a two-sided formula to arrange the facet windows in a fixed grid.\n# LHS -&gt; facet rows; RHS -&gt; facet columns\n\naq$hot = ifelse(aq$Temp &gt;= 75, \"hot\", \"cold\")\naq$windy = ifelse(aq$Wind &gt;= 15, \"windy\", \"calm\")\ntinyplot(\n  Temp ~ Day,\n  facet = windy ~ hot,\n  data = aq\n)\n\n\n\n\n\n\n\n# To add common elements to each facet, use the `draw` argument\n\ntinyplot(\n  Temp ~ Day,\n  facet = windy ~ hot,\n  data = aq,\n  draw = abline(h = 75, lty = 2, col = \"hotpink\")\n)\n\n\n\n\n\n\n\n# The (automatic) legend position and look can be customized using\n# appropriate arguments. Note the trailing \"!\" in the `legend` position\n# argument below. This tells `tinyplot` to place the legend _outside_ the plot\n# area.\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\",\n  legend = legend(\"bottom!\", title = \"Month of the year\", bty = \"o\")\n)\n\n\n\n\n\n\n\n# The default group colours are inherited from either the \"R4\" or \"Viridis\"\n# palettes, depending on the number of groups. However, all palettes listed\n# by `palette.pals()` and `hcl.pals()` are supported as convenience strings,\n# or users can supply a valid palette-generating function for finer control\n\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\",\n  palette = \"tableau\"\n)\n\n\n\n\n\n\n\n# It's possible to customize the look of your plots by setting graphical\n# parameters (e.g., via `(t)par`)... But a more convenient way is to just use\n# built-in themes (see `?tinytheme`).\n\ntinytheme(\"clean2\")\ntinyplot(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"b\",\n  alpha = 0.5,\n  main = \"Daily temperatures by month\",\n  sub = \"Brought to you by tinyplot\"\n)\n\n\n\n\n\n\n\n# reset the theme\ntinytheme()\n\n# For more examples and a detailed walkthrough, please see the introductory\n# tinyplot tutorial available online:\n# https://grantmcdermott.com/tinyplot/vignettes/introduction.html",
    "crumbs": [
      "Reference",
      "Main functions",
      "tinyplot"
    ]
  },
  {
    "objectID": "man/type_density.html",
    "href": "man/type_density.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for density plots.\n\n\n\ntype_density(\n  bw = \"nrd0\",\n  joint.bw = c(\"mean\", \"full\", \"none\"),\n  adjust = 1,\n  kernel = c(\"gaussian\", \"epanechnikov\", \"rectangular\", \"triangular\", \"biweight\",\n    \"cosine\", \"optcosine\"),\n  n = 512,\n  alpha = NULL\n)\n\n\n\n\n\n\n\nbw\n\n\nthe smoothing bandwidth to be used. The kernels are scaled such that this is the standard deviation of the smoothing kernel. (Note this differs from the reference books cited below.)\nbw can also be a character string giving a rule to choose the bandwidth. See bw.nrd.  The default, “nrd0”, has remained the default for historical and compatibility reasons, rather than as a general recommendation, where e.g., “SJ” would rather fit, see also Venables and Ripley (2002).\nThe specified (or computed) value of bw is multiplied by adjust.\n\n\n\n\njoint.bw\n\n\ncharacter string indicating whether (and how) the smoothing bandwidth should be computed from the joint data distribution when there are multiple subgroups. The options are “mean” (the default), “full”, and “none”. Also accepts a logical argument, where TRUE maps to “mean” and FALSE maps to “none”. See the \"Bandwidth selection\" section below for a discussion of practical considerations.\n\n\n\n\nadjust\n\n\nthe bandwidth used is actually adjust*bw. This makes it easy to specify values like ‘half the default’ bandwidth.\n\n\n\n\nkernel\n\n\na character string giving the smoothing kernel to be used. This must partially match one of “gaussian”, “rectangular”, “triangular”, “epanechnikov”, “biweight”, “cosine” or “optcosine”, with default “gaussian”, and may be abbreviated to a unique prefix (single letter).\n“cosine” is smoother than “optcosine”, which is the usual ‘cosine’ kernel in the literature and almost MSE-efficient. However, “cosine” is the version used by S.\n\n\n\n\nn\n\n\nthe number of equally spaced points at which the density is to be estimated. When n &gt; 512, it is rounded up to a power of 2 during the calculations (as fft is used) and the final result is interpolated by approx. So it almost always makes sense to specify n as a power of two.\n\n\n\n\nalpha\n\n\nnumeric value between 0 and 1 specifying the opacity of ribbon shading If no alpha value is provided, then will default to tpar(“ribbon.alpha”) (i.e., probably 0.2 unless this has been overridden by the user in their global settings.)\n\n\n\n\n\n\nThe algorithm used in density.default disperses the mass of the empirical distribution function over a regular grid of at least 512 points and then uses the fast Fourier transform to convolve this approximation with a discretized version of the kernel and then uses linear approximation to evaluate the density at the specified points.\nThe statistical properties of a kernel are determined by \\(\\sigma^2_K = \\int t^2 K(t) dt\\) which is always \\(= 1\\) for our kernels (and hence the bandwidth bw is the standard deviation of the kernel) and \\(R(K) = \\int K^2(t) dt\\). MSE-equivalent bandwidths (for different kernels) are proportional to \\(\\sigma_K R(K)\\) which is scale invariant and for our kernels equal to \\(R(K)\\). This value is returned when give.Rkern = TRUE. See the examples for using exact equivalent bandwidths.\nInfinite values in x are assumed to correspond to a point mass at +/-Inf and the density estimate is of the sub-density on (-Inf, +Inf).\n\n\n\nWhile the choice of smoothing bandwidth will always stand to affect a density visualization, it gains an added importance when multiple densities are drawn simultaneously (e.g., for subgroups with respect to by or facet). Allowing each subgroup to compute its own separate bandwidth independently offers greater flexibility in capturing the unique characteristics of each subgroup, particularly when distributions differ substantially in location and/or scale. However, this approach may overemphasize small random variations and make it harder to visually compare densities across subgroups. Hence, it is often useful to employ the same (\"joint\") bandwidth across all subgroups. The following strategies are available via the joint.bw argument:\n\n\nThe default joint.bw = “mean” first computes the individual bandwidths for each group but then computes their mean, weighted by the number of observations in each group. This will work well when all groups have similar amounts of scatter (similar variances), even when they have potentially rather different locations. The weighted averaging stabilizes potential fluctuations in the individual bandwidths, especially when some subgroups are rather small.\n\n\nAlternatively, joint.bw = “full” can be used to compute the joint bandwidth from the full joint distribution (merging all groups). This will yield an even more robust bandwidth, especially when the groups overlap substantially (i.e., have similar locations and scales). However, it may lead to too large bandwidths and thus too much smoothing, especially when the locations of the groups differ substantially.\n\n\nFinally, joint.bw = “none” disables the joint bandwidth so that each group just employs its individual bandwidth. This is often the best choice if the amounts of scatter differ substantially between the groups, thus necessitating different amounts of smoothing.\n\n\n\n\n\nThis tinyplot method for density plots differs from the base plot.density function in its treatment of titles. The x-axis title displays only the variable name, omitting details about the number of observations and smoothing bandwidth. Additionally, the main title is left blank by default for a cleaner appearance.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"density\" type convenience string\ntinyplot(~Sepal.Length, data = iris, type = \"density\")\n\n\n\n\n\n\n\n# grouped density example\ntinyplot(~Sepal.Length | Species, data = iris, type = \"density\")\n\n\n\n\n\n\n\n# use `bg = \"by\"` (or, equivalent `fill = \"by\"`) to get filled densities\ntinyplot(~Sepal.Length | Species, data = iris, type = \"density\", fill = \"by\")\n\n\n\n\n\n\n\n# use `type_density()` to pass extra arguments for customization\ntinyplot(\n  ~Sepal.Length | Species, data = iris,\n  type = type_density(bw = \"SJ\"),\n  main = \"Bandwidth computed using Sheather & Jones (1991)\"\n)\n\n\n\n\n\n\n\n# The default for grouped density plots is to use the mean of the\n# individual subgroup bandwidths (weighted by group size) as the\n# joint bandwidth. Alternatively, the bandwidth from the \"full\"\n# data or separate individual bandwidths (\"none\") can be used.\ntinyplot(~Sepal.Length | Species, data = iris,\n    ylim = c(0, 1.25), type = \"density\")        # mean (default)\ntinyplot_add(joint.bw = \"full\", lty = 2)        # full data\ntinyplot_add(joint.bw = \"none\", lty = 3)        # none (individual)\nlegend(\"topright\", c(\"Mean\", \"Full\", \"None\"), lty = 1:3, bty = \"n\", title = \"Joint BW\")",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_density"
    ]
  },
  {
    "objectID": "man/type_density.html#density-plot-type",
    "href": "man/type_density.html#density-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for density plots.\n\n\n\ntype_density(\n  bw = \"nrd0\",\n  joint.bw = c(\"mean\", \"full\", \"none\"),\n  adjust = 1,\n  kernel = c(\"gaussian\", \"epanechnikov\", \"rectangular\", \"triangular\", \"biweight\",\n    \"cosine\", \"optcosine\"),\n  n = 512,\n  alpha = NULL\n)\n\n\n\n\n\n\n\nbw\n\n\nthe smoothing bandwidth to be used. The kernels are scaled such that this is the standard deviation of the smoothing kernel. (Note this differs from the reference books cited below.)\nbw can also be a character string giving a rule to choose the bandwidth. See bw.nrd.  The default, “nrd0”, has remained the default for historical and compatibility reasons, rather than as a general recommendation, where e.g., “SJ” would rather fit, see also Venables and Ripley (2002).\nThe specified (or computed) value of bw is multiplied by adjust.\n\n\n\n\njoint.bw\n\n\ncharacter string indicating whether (and how) the smoothing bandwidth should be computed from the joint data distribution when there are multiple subgroups. The options are “mean” (the default), “full”, and “none”. Also accepts a logical argument, where TRUE maps to “mean” and FALSE maps to “none”. See the \"Bandwidth selection\" section below for a discussion of practical considerations.\n\n\n\n\nadjust\n\n\nthe bandwidth used is actually adjust*bw. This makes it easy to specify values like ‘half the default’ bandwidth.\n\n\n\n\nkernel\n\n\na character string giving the smoothing kernel to be used. This must partially match one of “gaussian”, “rectangular”, “triangular”, “epanechnikov”, “biweight”, “cosine” or “optcosine”, with default “gaussian”, and may be abbreviated to a unique prefix (single letter).\n“cosine” is smoother than “optcosine”, which is the usual ‘cosine’ kernel in the literature and almost MSE-efficient. However, “cosine” is the version used by S.\n\n\n\n\nn\n\n\nthe number of equally spaced points at which the density is to be estimated. When n &gt; 512, it is rounded up to a power of 2 during the calculations (as fft is used) and the final result is interpolated by approx. So it almost always makes sense to specify n as a power of two.\n\n\n\n\nalpha\n\n\nnumeric value between 0 and 1 specifying the opacity of ribbon shading If no alpha value is provided, then will default to tpar(“ribbon.alpha”) (i.e., probably 0.2 unless this has been overridden by the user in their global settings.)\n\n\n\n\n\n\nThe algorithm used in density.default disperses the mass of the empirical distribution function over a regular grid of at least 512 points and then uses the fast Fourier transform to convolve this approximation with a discretized version of the kernel and then uses linear approximation to evaluate the density at the specified points.\nThe statistical properties of a kernel are determined by \\(\\sigma^2_K = \\int t^2 K(t) dt\\) which is always \\(= 1\\) for our kernels (and hence the bandwidth bw is the standard deviation of the kernel) and \\(R(K) = \\int K^2(t) dt\\). MSE-equivalent bandwidths (for different kernels) are proportional to \\(\\sigma_K R(K)\\) which is scale invariant and for our kernels equal to \\(R(K)\\). This value is returned when give.Rkern = TRUE. See the examples for using exact equivalent bandwidths.\nInfinite values in x are assumed to correspond to a point mass at +/-Inf and the density estimate is of the sub-density on (-Inf, +Inf).\n\n\n\nWhile the choice of smoothing bandwidth will always stand to affect a density visualization, it gains an added importance when multiple densities are drawn simultaneously (e.g., for subgroups with respect to by or facet). Allowing each subgroup to compute its own separate bandwidth independently offers greater flexibility in capturing the unique characteristics of each subgroup, particularly when distributions differ substantially in location and/or scale. However, this approach may overemphasize small random variations and make it harder to visually compare densities across subgroups. Hence, it is often useful to employ the same (\"joint\") bandwidth across all subgroups. The following strategies are available via the joint.bw argument:\n\n\nThe default joint.bw = “mean” first computes the individual bandwidths for each group but then computes their mean, weighted by the number of observations in each group. This will work well when all groups have similar amounts of scatter (similar variances), even when they have potentially rather different locations. The weighted averaging stabilizes potential fluctuations in the individual bandwidths, especially when some subgroups are rather small.\n\n\nAlternatively, joint.bw = “full” can be used to compute the joint bandwidth from the full joint distribution (merging all groups). This will yield an even more robust bandwidth, especially when the groups overlap substantially (i.e., have similar locations and scales). However, it may lead to too large bandwidths and thus too much smoothing, especially when the locations of the groups differ substantially.\n\n\nFinally, joint.bw = “none” disables the joint bandwidth so that each group just employs its individual bandwidth. This is often the best choice if the amounts of scatter differ substantially between the groups, thus necessitating different amounts of smoothing.\n\n\n\n\n\nThis tinyplot method for density plots differs from the base plot.density function in its treatment of titles. The x-axis title displays only the variable name, omitting details about the number of observations and smoothing bandwidth. Additionally, the main title is left blank by default for a cleaner appearance.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"density\" type convenience string\ntinyplot(~Sepal.Length, data = iris, type = \"density\")\n\n\n\n\n\n\n\n# grouped density example\ntinyplot(~Sepal.Length | Species, data = iris, type = \"density\")\n\n\n\n\n\n\n\n# use `bg = \"by\"` (or, equivalent `fill = \"by\"`) to get filled densities\ntinyplot(~Sepal.Length | Species, data = iris, type = \"density\", fill = \"by\")\n\n\n\n\n\n\n\n# use `type_density()` to pass extra arguments for customization\ntinyplot(\n  ~Sepal.Length | Species, data = iris,\n  type = type_density(bw = \"SJ\"),\n  main = \"Bandwidth computed using Sheather & Jones (1991)\"\n)\n\n\n\n\n\n\n\n# The default for grouped density plots is to use the mean of the\n# individual subgroup bandwidths (weighted by group size) as the\n# joint bandwidth. Alternatively, the bandwidth from the \"full\"\n# data or separate individual bandwidths (\"none\") can be used.\ntinyplot(~Sepal.Length | Species, data = iris,\n    ylim = c(0, 1.25), type = \"density\")        # mean (default)\ntinyplot_add(joint.bw = \"full\", lty = 2)        # full data\ntinyplot_add(joint.bw = \"none\", lty = 3)        # none (individual)\nlegend(\"topright\", c(\"Mean\", \"Full\", \"None\"), lty = 1:3, bty = \"n\", title = \"Joint BW\")",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_density"
    ]
  },
  {
    "objectID": "man/type_qq.html",
    "href": "man/type_qq.html",
    "title": "tinyplot",
    "section": "",
    "text": "Plots the theoretical quantiles of x on the horizontal axis against observed values of x on the vertical axis.\n\n\n\ntype_qq(distribution = qnorm)\n\n\n\n\n\n\n\ndistribution\n\n\nDistribution function to use.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\ntinyplot(~mpg, data = mtcars, type = type_qq())\n\n\n\n\n\n\n\n# suppress the line\ntinyplot(~mpg, data = mtcars, lty = 0, type = type_qq())",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_qq"
    ]
  },
  {
    "objectID": "man/type_qq.html#quantile-quantile-plot-qq",
    "href": "man/type_qq.html#quantile-quantile-plot-qq",
    "title": "tinyplot",
    "section": "",
    "text": "Plots the theoretical quantiles of x on the horizontal axis against observed values of x on the vertical axis.\n\n\n\ntype_qq(distribution = qnorm)\n\n\n\n\n\n\n\ndistribution\n\n\nDistribution function to use.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\ntinyplot(~mpg, data = mtcars, type = type_qq())\n\n\n\n\n\n\n\n# suppress the line\ntinyplot(~mpg, data = mtcars, lty = 0, type = type_qq())",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_qq"
    ]
  },
  {
    "objectID": "man/tpar.html",
    "href": "man/tpar.html",
    "title": "tinyplot",
    "section": "",
    "text": "Extends par, serving as a (near) drop-in replacement for setting or querying graphical parameters. The key differences is that, beyond supporting the standard group of R graphical parameters in par, tpar also supports additional graphical parameters that are provided by tinyplot. Similar to par, parameters are set by passing appropriate key = value argument pairs, and multiple parameters can be set or queried at the same time.\n\n\n\ntpar(..., hook = FALSE)\n\n\n\n\n\n\n\n…\n\n\narguments of the form key = value. This includes all of the parameters typically supported by par, as well as the tinyplot-specific ones described in the ‘Graphical Parameters’ section below.\n\n\n\n\nhook\n\n\nLogical. If TRUE, base graphical parameters persist across plots via a hook applied before each new plot (see ?setHook).\n\n\n\n\n\n\nThe tinyplot-specific parameters are saved in an internal environment called .tpar for performance and safety reasons. However, they can also be set at package load time via options, which may prove convenient for users that want to enable different default behaviour at startup (e.g., through an .Rprofile file). These options all take a tinyplot_* prefix, e.g. options(tinyplot_grid = TRUE, tinyplot_facet.bg = “grey90”).\nFor their part, any \"base\" graphical parameters are caught dynamically and passed on to par as appropriate. Technically, only parameters that satisfy par(…, no.readonly = TRUE) are evaluated.\nHowever, note the important distinction: tpar only evaluates parameters from par if they are passed explicitly by the user. This means that tpar should not be used to capture the (invisible) state of a user’s entire set of graphics parameters, i.e. tpar() != par(). If you want to capture the all existing graphics settings, then you should rather use par() instead.\n\n\n\nWhen parameters are set, their previous values are returned in an invisible named list. Such a list can be passed as an argument to tpar to restore the parameter values.\nWhen just one parameter is queried, the value of that parameter is returned as (atomic) vector. When two or more parameters are queried, their values are returned in a list, with the list names giving the parameters.\nNote the inconsistency: setting one parameter returns a list, but querying one parameter returns a vector.\n\n\n\n\n\nadj.xlab: Numeric value between 0 and 1 controlling the alignment of the x-axis label.\n\n\nadj.ylab: Numeric value between 0 and 1 controlling the alignment of the y-axis label.\n\n\ncairo: Logical indicating whether cairo_pdf should be used when writing plots to PDF. If FALSE, then pdf will be used instead, with implications for embedding (non-standard) fonts. Only used if tinyplot(…, file = “&lt;filename&gt;.pdf”) is called. Defaults to the value of capabilities(“cairo”).\n\n\ndynmar: Logical indicating whether tinyplot should attempt dynamic adjustment of margins to reduce whitespace and/or account for spacing of text elements (e.g., long horizontal y-axis labels). Note that this parameter is tightly coupled to internal tinythemes() logic and should not be adjusted manually unless you really know what you are doing or don’t mind risking unintended consequences to your plot.\n\n\nfacet.bg: Character or integer specifying the facet background colour. If an integer, will correspond to the user’s default colour palette (see palette). Passed to rect. Defaults to NULL (none).\n\n\nfacet.border: Character or integer specifying the facet border colour. If an integer, will correspond to the user’s default colour palette (see palette). Passed to rect. Defaults to NA (none).\n\n\nfacet.cex: Expansion factor for facet titles. Defaults to 1.\n\n\nfacet.col: Character or integer specifying the facet text colour. If an integer, will correspond to the user’s default global colour palette (see palette). Defaults to NULL, which is equivalent to \"black\".\n\n\nfacet.font: An integer corresponding to the desired font face for facet titles. For most font families and graphics devices, one of four possible values: 1 (regular), 2 (bold), 3 (italic), or 4 (bold italic). Defaults to NULL, which is equivalent to 1 (i.e., regular).\n\n\nfile.height: Numeric specifying the height (in inches) of any plot that is written to disk using the tinyplot(…, file = X) argument. Defaults to 7.\n\n\nfile.res: Numeric specifying the resolution (in dots per square inch) of any plot that is written to disk in bitmap format (i.e., PNG or JPEG) using the tinyplot(…, file = X) argument. Defaults to 300.\n\n\nfile.width: Numeric specifying the width (in inches) of any plot that is written to disk using the tinyplot(…, file = X) argument. Defaults to 7.\n\n\nfmar: A numeric vector of form c(b,l,t,r) for controlling the (base) margin padding, in terms of lines, between the individual facets in a faceted plot. Defaults to c(1,1,1,1). If more than three facets are detected, the fmar parameter is scaled by 0.75 to reduce excess whitespace. For 2x2 plots, the padding better matches the cex expansion logic of base graphics.\n\n\ngrid.col: Character or (integer) numeric that specifies the color of the panel grid lines. Defaults to “lightgray”.\n\n\ngrid.lty: Character or (integer) numeric that specifies the line type of the panel grid lines. Defaults to “dotted”.\n\n\ngrid.lwd: Non-negative numeric giving the line width of the panel grid lines. Defaults to 1.\n\n\ngrid: Logical indicating whether a background panel grid should be added to plots automatically. Defaults to NULL, which is equivalent to FALSE.\n\n\nlmar: A numeric vector of form c(inner, outer) that gives the margin padding, in terms of lines, around the automatic tinyplot legend. Defaults to c(1.0, 0.1). The inner margin is the gap between the legend and the plot region, and the outer margin is the gap between the legend and the edge of the graphics device.\n\n\npalette.qualitative: Palette for qualitative colors. See the palette argument in ?tinyplot.\n\n\npalette.sequential: Palette for sequential colors. See the palette argument in ?tinyplot.\n\n\nribbon.alpha: Numeric factor in the range [0,1] for modifying the opacity alpha of \"ribbon\" and \"area\" type plots. Default value is 0.2.\n\n\n\n\n\ngraphics::par which tpar builds on top of. get_saved_par is a convenience function for retrieving graphical parameters at different stages of a tinyplot call (and used for internal accounting purposes). tinytheme allows users to easily set a group of graphics parameters in a single function call, according to a variety of predefined themes.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# Return a list of existing base and tinyplot graphic params\ntpar(\"las\", \"pch\", \"facet.bg\", \"facet.cex\", \"grid\")\n\n$las\n[1] 0\n\n$pch\n[1] 1\n\n$facet.bg\nNULL\n\n$facet.cex\n[1] 1\n\n$grid\n[1] FALSE\n\n# Simple facet plot with these default values\ntinyplot(mpg ~ wt, data = mtcars, facet = ~am)\n\n\n\n\n\n\n\n# Set params to something new. Similar to graphics::par(), note that we save\n# the existing values at the same time by assigning to an object.\nop = tpar(\n  las       = 1,\n  pch       = 2,\n  facet.bg  = \"grey90\",\n  facet.cex = 2,\n  grid      = TRUE\n)\n\n# Re-plot with these new params\ntinyplot(mpg ~ wt, data = mtcars, facet = ~am)\n\n\n\n\n\n\n\n# Reset back to original values\ntpar(op)\n\n# Important: tpar() only evalutes parameters that have been passed explicitly\n#   by the user. So it it should not be used to query and set (restore)\n#   parameters that weren't explicitly requested, i.e. tpar() != par().\n\n# Note: The tinyplot-specific parameters can also be be set via `options`\n#   with a `tinyplot_*` prefix, which can be convenient for enabling\n#   different default behaviour at startup time (e.g., via an .Rprofile\n#   file). Example:\n# options(tinyplot_grid = TRUE, tinyplot_facet.bg = \"grey90\")",
    "crumbs": [
      "Reference",
      "Options",
      "tpar"
    ]
  },
  {
    "objectID": "man/tpar.html#set-or-query-graphical-parameters",
    "href": "man/tpar.html#set-or-query-graphical-parameters",
    "title": "tinyplot",
    "section": "",
    "text": "Extends par, serving as a (near) drop-in replacement for setting or querying graphical parameters. The key differences is that, beyond supporting the standard group of R graphical parameters in par, tpar also supports additional graphical parameters that are provided by tinyplot. Similar to par, parameters are set by passing appropriate key = value argument pairs, and multiple parameters can be set or queried at the same time.\n\n\n\ntpar(..., hook = FALSE)\n\n\n\n\n\n\n\n…\n\n\narguments of the form key = value. This includes all of the parameters typically supported by par, as well as the tinyplot-specific ones described in the ‘Graphical Parameters’ section below.\n\n\n\n\nhook\n\n\nLogical. If TRUE, base graphical parameters persist across plots via a hook applied before each new plot (see ?setHook).\n\n\n\n\n\n\nThe tinyplot-specific parameters are saved in an internal environment called .tpar for performance and safety reasons. However, they can also be set at package load time via options, which may prove convenient for users that want to enable different default behaviour at startup (e.g., through an .Rprofile file). These options all take a tinyplot_* prefix, e.g. options(tinyplot_grid = TRUE, tinyplot_facet.bg = “grey90”).\nFor their part, any \"base\" graphical parameters are caught dynamically and passed on to par as appropriate. Technically, only parameters that satisfy par(…, no.readonly = TRUE) are evaluated.\nHowever, note the important distinction: tpar only evaluates parameters from par if they are passed explicitly by the user. This means that tpar should not be used to capture the (invisible) state of a user’s entire set of graphics parameters, i.e. tpar() != par(). If you want to capture the all existing graphics settings, then you should rather use par() instead.\n\n\n\nWhen parameters are set, their previous values are returned in an invisible named list. Such a list can be passed as an argument to tpar to restore the parameter values.\nWhen just one parameter is queried, the value of that parameter is returned as (atomic) vector. When two or more parameters are queried, their values are returned in a list, with the list names giving the parameters.\nNote the inconsistency: setting one parameter returns a list, but querying one parameter returns a vector.\n\n\n\n\n\nadj.xlab: Numeric value between 0 and 1 controlling the alignment of the x-axis label.\n\n\nadj.ylab: Numeric value between 0 and 1 controlling the alignment of the y-axis label.\n\n\ncairo: Logical indicating whether cairo_pdf should be used when writing plots to PDF. If FALSE, then pdf will be used instead, with implications for embedding (non-standard) fonts. Only used if tinyplot(…, file = “&lt;filename&gt;.pdf”) is called. Defaults to the value of capabilities(“cairo”).\n\n\ndynmar: Logical indicating whether tinyplot should attempt dynamic adjustment of margins to reduce whitespace and/or account for spacing of text elements (e.g., long horizontal y-axis labels). Note that this parameter is tightly coupled to internal tinythemes() logic and should not be adjusted manually unless you really know what you are doing or don’t mind risking unintended consequences to your plot.\n\n\nfacet.bg: Character or integer specifying the facet background colour. If an integer, will correspond to the user’s default colour palette (see palette). Passed to rect. Defaults to NULL (none).\n\n\nfacet.border: Character or integer specifying the facet border colour. If an integer, will correspond to the user’s default colour palette (see palette). Passed to rect. Defaults to NA (none).\n\n\nfacet.cex: Expansion factor for facet titles. Defaults to 1.\n\n\nfacet.col: Character or integer specifying the facet text colour. If an integer, will correspond to the user’s default global colour palette (see palette). Defaults to NULL, which is equivalent to \"black\".\n\n\nfacet.font: An integer corresponding to the desired font face for facet titles. For most font families and graphics devices, one of four possible values: 1 (regular), 2 (bold), 3 (italic), or 4 (bold italic). Defaults to NULL, which is equivalent to 1 (i.e., regular).\n\n\nfile.height: Numeric specifying the height (in inches) of any plot that is written to disk using the tinyplot(…, file = X) argument. Defaults to 7.\n\n\nfile.res: Numeric specifying the resolution (in dots per square inch) of any plot that is written to disk in bitmap format (i.e., PNG or JPEG) using the tinyplot(…, file = X) argument. Defaults to 300.\n\n\nfile.width: Numeric specifying the width (in inches) of any plot that is written to disk using the tinyplot(…, file = X) argument. Defaults to 7.\n\n\nfmar: A numeric vector of form c(b,l,t,r) for controlling the (base) margin padding, in terms of lines, between the individual facets in a faceted plot. Defaults to c(1,1,1,1). If more than three facets are detected, the fmar parameter is scaled by 0.75 to reduce excess whitespace. For 2x2 plots, the padding better matches the cex expansion logic of base graphics.\n\n\ngrid.col: Character or (integer) numeric that specifies the color of the panel grid lines. Defaults to “lightgray”.\n\n\ngrid.lty: Character or (integer) numeric that specifies the line type of the panel grid lines. Defaults to “dotted”.\n\n\ngrid.lwd: Non-negative numeric giving the line width of the panel grid lines. Defaults to 1.\n\n\ngrid: Logical indicating whether a background panel grid should be added to plots automatically. Defaults to NULL, which is equivalent to FALSE.\n\n\nlmar: A numeric vector of form c(inner, outer) that gives the margin padding, in terms of lines, around the automatic tinyplot legend. Defaults to c(1.0, 0.1). The inner margin is the gap between the legend and the plot region, and the outer margin is the gap between the legend and the edge of the graphics device.\n\n\npalette.qualitative: Palette for qualitative colors. See the palette argument in ?tinyplot.\n\n\npalette.sequential: Palette for sequential colors. See the palette argument in ?tinyplot.\n\n\nribbon.alpha: Numeric factor in the range [0,1] for modifying the opacity alpha of \"ribbon\" and \"area\" type plots. Default value is 0.2.\n\n\n\n\n\ngraphics::par which tpar builds on top of. get_saved_par is a convenience function for retrieving graphical parameters at different stages of a tinyplot call (and used for internal accounting purposes). tinytheme allows users to easily set a group of graphics parameters in a single function call, according to a variety of predefined themes.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# Return a list of existing base and tinyplot graphic params\ntpar(\"las\", \"pch\", \"facet.bg\", \"facet.cex\", \"grid\")\n\n$las\n[1] 0\n\n$pch\n[1] 1\n\n$facet.bg\nNULL\n\n$facet.cex\n[1] 1\n\n$grid\n[1] FALSE\n\n# Simple facet plot with these default values\ntinyplot(mpg ~ wt, data = mtcars, facet = ~am)\n\n\n\n\n\n\n\n# Set params to something new. Similar to graphics::par(), note that we save\n# the existing values at the same time by assigning to an object.\nop = tpar(\n  las       = 1,\n  pch       = 2,\n  facet.bg  = \"grey90\",\n  facet.cex = 2,\n  grid      = TRUE\n)\n\n# Re-plot with these new params\ntinyplot(mpg ~ wt, data = mtcars, facet = ~am)\n\n\n\n\n\n\n\n# Reset back to original values\ntpar(op)\n\n# Important: tpar() only evalutes parameters that have been passed explicitly\n#   by the user. So it it should not be used to query and set (restore)\n#   parameters that weren't explicitly requested, i.e. tpar() != par().\n\n# Note: The tinyplot-specific parameters can also be be set via `options`\n#   with a `tinyplot_*` prefix, which can be convenient for enabling\n#   different default behaviour at startup time (e.g., via an .Rprofile\n#   file). Example:\n# options(tinyplot_grid = TRUE, tinyplot_facet.bg = \"grey90\")",
    "crumbs": [
      "Reference",
      "Options",
      "tpar"
    ]
  },
  {
    "objectID": "man/type_polypath.html",
    "href": "man/type_polypath.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting polygons. Arguments are passed to polypath.\n\n\n\ntype_polypath(rule = \"winding\")\n\n\n\n\n\n\n\nrule\n\n\ncharacter value specifying the path fill mode: either “winding” or “evenodd”.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"polypath\" type convenience character string\ntinyplot(\n    c(.1, .1, .6, .6, NA, .4, .4, .9, .9),\n    c(.1, .6, .6, .1, NA, .4, .9, .9, .4),\n    type = \"polypath\", fill = \"grey\"\n)\n\n\n\n\n\n\n\n# Use `type_polypath()` to pass extra arguments for customization\ntinyplot(\n    c(.1, .1, .6, .6, NA, .4, .4, .9, .9),\n    c(.1, .6, .6, .1, NA, .4, .9, .9, .4),\n    type = type_polypath(rule = \"evenodd\"), fill = \"grey\"\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_polypath"
    ]
  },
  {
    "objectID": "man/type_polypath.html#polypath-polygon-type",
    "href": "man/type_polypath.html#polypath-polygon-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting polygons. Arguments are passed to polypath.\n\n\n\ntype_polypath(rule = \"winding\")\n\n\n\n\n\n\n\nrule\n\n\ncharacter value specifying the path fill mode: either “winding” or “evenodd”.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"polypath\" type convenience character string\ntinyplot(\n    c(.1, .1, .6, .6, NA, .4, .4, .9, .9),\n    c(.1, .6, .6, .1, NA, .4, .9, .9, .4),\n    type = \"polypath\", fill = \"grey\"\n)\n\n\n\n\n\n\n\n# Use `type_polypath()` to pass extra arguments for customization\ntinyplot(\n    c(.1, .1, .6, .6, NA, .4, .4, .9, .9),\n    c(.1, .6, .6, .1, NA, .4, .9, .9, .4),\n    type = type_polypath(rule = \"evenodd\"), fill = \"grey\"\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_polypath"
    ]
  },
  {
    "objectID": "man/type_points.html",
    "href": "man/type_points.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting points, i.e. a scatter plot.\n\n\n\ntype_points(clim = c(0.5, 2.5))\n\n\n\n\n\n\n\nclim\n\n\nNumeric giving the lower and upper limits of the character expansion (cex) normalization for bubble charts.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"p\" type convenience character string\ntinyplot(Sepal.Length ~ Petal.Length, data = iris, type = \"p\")\n\n\n\n\n\n\n\n# Same result with type_points()\ntinyplot(Sepal.Length ~ Petal.Length, data = iris, type = type_points())\n\n# Note: Specifying the type here is redundant. Like base plot, tinyplot\n# automatically produces a scatter plot if x and y are numeric\ntinyplot(Sepal.Length ~ Petal.Length, data = iris)\n\n# Grouped scatter plot example\ntinyplot(Sepal.Length ~ Petal.Length | Species, data = iris)\n\n\n\n\n\n\n\n# Continuous grouping (with gradient legend)\ntinyplot(Sepal.Length ~ Petal.Length | Sepal.Width, data = iris, pch = 19)\n\n\n\n\n\n\n\n# Bubble chart version\ntinyplot(Sepal.Length ~ Petal.Length, data = iris, cex = iris$Sepal.Width)\n\n\n\n\n\n\n\n# Fancier version with dual legends and extra customization\ntinyplot(Sepal.Length ~ Petal.Length | Species,\n         data = iris,\n         cex = iris$Sepal.Width, clim = c(1, 5),\n         pch = 21, fill = 0.3)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_points"
    ]
  },
  {
    "objectID": "man/type_points.html#points-plot-type",
    "href": "man/type_points.html#points-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting points, i.e. a scatter plot.\n\n\n\ntype_points(clim = c(0.5, 2.5))\n\n\n\n\n\n\n\nclim\n\n\nNumeric giving the lower and upper limits of the character expansion (cex) normalization for bubble charts.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"p\" type convenience character string\ntinyplot(Sepal.Length ~ Petal.Length, data = iris, type = \"p\")\n\n\n\n\n\n\n\n# Same result with type_points()\ntinyplot(Sepal.Length ~ Petal.Length, data = iris, type = type_points())\n\n# Note: Specifying the type here is redundant. Like base plot, tinyplot\n# automatically produces a scatter plot if x and y are numeric\ntinyplot(Sepal.Length ~ Petal.Length, data = iris)\n\n# Grouped scatter plot example\ntinyplot(Sepal.Length ~ Petal.Length | Species, data = iris)\n\n\n\n\n\n\n\n# Continuous grouping (with gradient legend)\ntinyplot(Sepal.Length ~ Petal.Length | Sepal.Width, data = iris, pch = 19)\n\n\n\n\n\n\n\n# Bubble chart version\ntinyplot(Sepal.Length ~ Petal.Length, data = iris, cex = iris$Sepal.Width)\n\n\n\n\n\n\n\n# Fancier version with dual legends and extra customization\ntinyplot(Sepal.Length ~ Petal.Length | Species,\n         data = iris,\n         cex = iris$Sepal.Width, clim = c(1, 5),\n         pch = 21, fill = 0.3)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_points"
    ]
  },
  {
    "objectID": "man/type_lm.html",
    "href": "man/type_lm.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting a linear model fit. Arguments are passed to lm.\n\n\n\ntype_lm(se = TRUE, level = 0.95)\n\n\n\n\n\n\n\nse\n\n\nlogical. If TRUE, confidence intervals are drawn.\n\n\n\n\nlevel\n\n\nthe confidence level required.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"lm\" type convenience string\ntinyplot(Sepal.Width ~ Petal.Width, data = iris, type = \"lm\")\n\n\n\n\n\n\n\n# Grouped model fits (here: illustrating an example of Simpson's paradox)\ntinyplot(Sepal.Width ~ Petal.Width | Species, data = iris, type = \"lm\")\ntinyplot_add(type = \"p\")\n\n\n\n\n\n\n\n# Use `type_lm()` to pass extra arguments for customization\ntinyplot(Sepal.Width ~ Petal.Width, data = iris, type = type_lm(level = 0.8))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Models",
      "type_lm"
    ]
  },
  {
    "objectID": "man/type_lm.html#linear-model-plot-type",
    "href": "man/type_lm.html#linear-model-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting a linear model fit. Arguments are passed to lm.\n\n\n\ntype_lm(se = TRUE, level = 0.95)\n\n\n\n\n\n\n\nse\n\n\nlogical. If TRUE, confidence intervals are drawn.\n\n\n\n\nlevel\n\n\nthe confidence level required.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"lm\" type convenience string\ntinyplot(Sepal.Width ~ Petal.Width, data = iris, type = \"lm\")\n\n\n\n\n\n\n\n# Grouped model fits (here: illustrating an example of Simpson's paradox)\ntinyplot(Sepal.Width ~ Petal.Width | Species, data = iris, type = \"lm\")\ntinyplot_add(type = \"p\")\n\n\n\n\n\n\n\n# Use `type_lm()` to pass extra arguments for customization\ntinyplot(Sepal.Width ~ Petal.Width, data = iris, type = type_lm(level = 0.8))",
    "crumbs": [
      "Reference",
      "Plot types",
      "Models",
      "type_lm"
    ]
  },
  {
    "objectID": "man/tinytheme.html",
    "href": "man/tinytheme.html",
    "title": "tinyplot",
    "section": "",
    "text": "The tinytheme function sets or resets the theme for plots created with tinyplot. Themes control the appearance of plots, such as text alignment, font styles, axis labels, and even dynamic margin adjustment to reduce whitespace.\n\n\n\ntinytheme(\n  theme = c(\"default\", \"basic\", \"clean\", \"clean2\", \"bw\", \"classic\", \"minimal\", \"ipsum\",\n    \"dark\", \"ridge\", \"ridge2\", \"tufte\", \"void\"),\n  ...\n)\n\n\n\n\n\n\n\ntheme\n\n\nA character string specifying the name of the theme to apply. Themes are arranged in an approximate hierarchy, adding or subtracting elements in the order presented below. Note that several themes are dynamic, in the sense that they attempt to reduce whitespace in a way that is responsive to the length of axes labels, tick marks, etc. These dynamic plots are marked with an asterisk (*) below.\n\n\n“default”: inherits the user’s default base graphics settings.\n\n\n“basic”: light modification of “default”, only adding filled points, a panel background grid, and light gray background to facet titles.\n\n\n“clean” (*): builds on “basic” by moving the subtitle above the plotting area, adding horizontal axis labels, employing tighter default plot margins and title gaps to reduce whitespace, and setting different default palettes (\"Tableau 10\" for discrete colors and \"agSunset\" for gradient colors). The first of our dynamic themes and the foundation for several derivative themes that follow below.\n\n\n“clean2” (*): removes the plot frame (box) from “clean”.\n\n\n“classic” (*): connects the axes in a L-shape, but removes the other top and right-hand edges of the plot frame (box). Also sets the \"Okabe-Ito\" palette as a default for discrete colors. Inspired by the ggplot2 theme of the same name.\n\n\n“bw” (*): similar to “clean”, except uses thinner lines for the plot frame (box), solid grid lines, and sets the \"Okabe-Ito\" palette as a default for discrete colors. Inspired by the ggplot2 theme of the same name.\n\n\n“minimal” (*): removes the plot frame (box) from “bw”, as well as the background for facet titles. Inspired by the ggplot2 theme of the same name.\n\n\n“ipsum” (*): similar to “minimal”, except subtitle is italicised and axes titles are aligned to the far edges. Inspired by the hrbrthemes theme of the same name for ggplot2.\n\n\n“dark” (*): similar to “minimal”, but set against a dark background with foreground and a palette colours lightened for appropriate contrast.\n\n\n“ridge” (*): a specialized theme for ridge plots (see type_ridge()). Builds off of “clean”, but adds ridge-specific tweaks (e.g. default \"Zissou 1\" palette for discrete colors, solid horizontal grid lines, and minor adjustments to y-axis labels). Not recommended for non-ridge plots.\n\n\n“ridge2” (*): removes the plot frame (box) from “ridge”, but retains the x-axis line. Again, not recommended for non-ridge plots.\n\n\n“tufte”: floating axes and minimalist plot artifacts in the style of Edward Tufte.\n\n\n“void”: switches off all axes, titles, legends, etc.\n\n\n\n\n\n\n…\n\n\nNamed arguments to override specific theme settings. These arguments are passed to tpar() and take precedence over the predefined settings in the selected theme.\n\n\n\n\n\n\nSets a list of graphical parameters using tpar()\nTo reset the theme to default settings (no customization), call tinytheme() without arguments.\nCaveat emptor: Themes are a somewhat experimental feature of tinyplot. While we feel confident that themes should work as expected for most \"standard\" cases, there may be some sharp edges. Please report any unexpected behaviour to our GitHub repo: https://github.com/grantmcdermott/tinyplot/issues\nKnown current limitations include:\n\n\nThemes do not work well when legend = “top!”.\n\n\nDynamic margin spacing does not account for multi-line strings (e.g., axes or main titles that contain \"\").\n\n\n\n\n\nThe function returns nothing. It is called for its side effects.\n\n\n\ntpar which does the heavy lifting under the hood.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# Reusable plot function\np = function() tinyplot(\n  lat ~ long | depth, data = quakes,\n  main = \"Earthquakes off Fiji\",\n  sub = \"Data courtesy of the Harvard PRIM-H project\"\n)\np()\n\n\n\n\n\n\n\n# Set a theme\ntinytheme(\"bw\")\np()\n\n\n\n\n\n\n\n# Try a different theme\ntinytheme(\"dark\")\np()\n\n\n\n\n\n\n\n# Customize the theme by overriding default settings\ntinytheme(\"bw\", fg = \"green\", font.main = 2, font.sub = 3, family = \"Palatino\")\np()\n\n\n\n\n\n\n\n# Another custom theme example\ntinytheme(\"bw\", font.main = 2, col.axis = \"darkcyan\", family = \"HersheyScript\")\np()\n\n\n\n\n\n\n\n# Aside: One or two specialized themes are only meant for certain plot types\ntinytheme(\"ridge2\")\ntinyplot(I(cut(lat, 10)) ~ depth, data = quakes, type = \"ridge\")\n\n\n\n\n\n\n\n# Reset the theme\ntinytheme()\np()\n\n\n\n\n\n\n\n# Themes showcase\n## We'll use a slightly more intricate plot (long y-axis labs and facets)\n## to demonstrate dynamic margin adjustment etc.\n\nthms = eval(formals(tinytheme)$theme)\n\nfor (thm in thms) {\n  tinytheme(thm)\n  tinyplot(\n    I(Sepal.Length*1e4) ~ Petal.Length | Species, facet = \"by\", data = iris,\n    main = \"Demonstration of tinyplot themes\",\n    sub = paste0('tinytheme(\"', thm, '\")')\n  )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Reset\ntinytheme()",
    "crumbs": [
      "Reference",
      "Main functions",
      "tinytheme"
    ]
  },
  {
    "objectID": "man/tinytheme.html#set-or-reset-plot-themes-for-tinyplot",
    "href": "man/tinytheme.html#set-or-reset-plot-themes-for-tinyplot",
    "title": "tinyplot",
    "section": "",
    "text": "The tinytheme function sets or resets the theme for plots created with tinyplot. Themes control the appearance of plots, such as text alignment, font styles, axis labels, and even dynamic margin adjustment to reduce whitespace.\n\n\n\ntinytheme(\n  theme = c(\"default\", \"basic\", \"clean\", \"clean2\", \"bw\", \"classic\", \"minimal\", \"ipsum\",\n    \"dark\", \"ridge\", \"ridge2\", \"tufte\", \"void\"),\n  ...\n)\n\n\n\n\n\n\n\ntheme\n\n\nA character string specifying the name of the theme to apply. Themes are arranged in an approximate hierarchy, adding or subtracting elements in the order presented below. Note that several themes are dynamic, in the sense that they attempt to reduce whitespace in a way that is responsive to the length of axes labels, tick marks, etc. These dynamic plots are marked with an asterisk (*) below.\n\n\n“default”: inherits the user’s default base graphics settings.\n\n\n“basic”: light modification of “default”, only adding filled points, a panel background grid, and light gray background to facet titles.\n\n\n“clean” (*): builds on “basic” by moving the subtitle above the plotting area, adding horizontal axis labels, employing tighter default plot margins and title gaps to reduce whitespace, and setting different default palettes (\"Tableau 10\" for discrete colors and \"agSunset\" for gradient colors). The first of our dynamic themes and the foundation for several derivative themes that follow below.\n\n\n“clean2” (*): removes the plot frame (box) from “clean”.\n\n\n“classic” (*): connects the axes in a L-shape, but removes the other top and right-hand edges of the plot frame (box). Also sets the \"Okabe-Ito\" palette as a default for discrete colors. Inspired by the ggplot2 theme of the same name.\n\n\n“bw” (*): similar to “clean”, except uses thinner lines for the plot frame (box), solid grid lines, and sets the \"Okabe-Ito\" palette as a default for discrete colors. Inspired by the ggplot2 theme of the same name.\n\n\n“minimal” (*): removes the plot frame (box) from “bw”, as well as the background for facet titles. Inspired by the ggplot2 theme of the same name.\n\n\n“ipsum” (*): similar to “minimal”, except subtitle is italicised and axes titles are aligned to the far edges. Inspired by the hrbrthemes theme of the same name for ggplot2.\n\n\n“dark” (*): similar to “minimal”, but set against a dark background with foreground and a palette colours lightened for appropriate contrast.\n\n\n“ridge” (*): a specialized theme for ridge plots (see type_ridge()). Builds off of “clean”, but adds ridge-specific tweaks (e.g. default \"Zissou 1\" palette for discrete colors, solid horizontal grid lines, and minor adjustments to y-axis labels). Not recommended for non-ridge plots.\n\n\n“ridge2” (*): removes the plot frame (box) from “ridge”, but retains the x-axis line. Again, not recommended for non-ridge plots.\n\n\n“tufte”: floating axes and minimalist plot artifacts in the style of Edward Tufte.\n\n\n“void”: switches off all axes, titles, legends, etc.\n\n\n\n\n\n\n…\n\n\nNamed arguments to override specific theme settings. These arguments are passed to tpar() and take precedence over the predefined settings in the selected theme.\n\n\n\n\n\n\nSets a list of graphical parameters using tpar()\nTo reset the theme to default settings (no customization), call tinytheme() without arguments.\nCaveat emptor: Themes are a somewhat experimental feature of tinyplot. While we feel confident that themes should work as expected for most \"standard\" cases, there may be some sharp edges. Please report any unexpected behaviour to our GitHub repo: https://github.com/grantmcdermott/tinyplot/issues\nKnown current limitations include:\n\n\nThemes do not work well when legend = “top!”.\n\n\nDynamic margin spacing does not account for multi-line strings (e.g., axes or main titles that contain \"\").\n\n\n\n\n\nThe function returns nothing. It is called for its side effects.\n\n\n\ntpar which does the heavy lifting under the hood.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# Reusable plot function\np = function() tinyplot(\n  lat ~ long | depth, data = quakes,\n  main = \"Earthquakes off Fiji\",\n  sub = \"Data courtesy of the Harvard PRIM-H project\"\n)\np()\n\n\n\n\n\n\n\n# Set a theme\ntinytheme(\"bw\")\np()\n\n\n\n\n\n\n\n# Try a different theme\ntinytheme(\"dark\")\np()\n\n\n\n\n\n\n\n# Customize the theme by overriding default settings\ntinytheme(\"bw\", fg = \"green\", font.main = 2, font.sub = 3, family = \"Palatino\")\np()\n\n\n\n\n\n\n\n# Another custom theme example\ntinytheme(\"bw\", font.main = 2, col.axis = \"darkcyan\", family = \"HersheyScript\")\np()\n\n\n\n\n\n\n\n# Aside: One or two specialized themes are only meant for certain plot types\ntinytheme(\"ridge2\")\ntinyplot(I(cut(lat, 10)) ~ depth, data = quakes, type = \"ridge\")\n\n\n\n\n\n\n\n# Reset the theme\ntinytheme()\np()\n\n\n\n\n\n\n\n# Themes showcase\n## We'll use a slightly more intricate plot (long y-axis labs and facets)\n## to demonstrate dynamic margin adjustment etc.\n\nthms = eval(formals(tinytheme)$theme)\n\nfor (thm in thms) {\n  tinytheme(thm)\n  tinyplot(\n    I(Sepal.Length*1e4) ~ Petal.Length | Species, facet = \"by\", data = iris,\n    main = \"Demonstration of tinyplot themes\",\n    sub = paste0('tinytheme(\"', thm, '\")')\n  )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Reset\ntinytheme()",
    "crumbs": [
      "Reference",
      "Main functions",
      "tinytheme"
    ]
  },
  {
    "objectID": "man/type_rug.html",
    "href": "man/type_rug.html",
    "title": "tinyplot",
    "section": "",
    "text": "Adds a rug representation (1-d plot) of the data to the plot.\n\n\n\ntype_rug(\n  ticksize = 0.03,\n  side = 1,\n  quiet = getOption(\"warn\") &lt; 0,\n  jitter = FALSE,\n  amount = NULL\n)\n\n\n\n\n\n\n\nticksize\n\n\nThe length of the ticks making up the ‘rug’. Positive lengths give inwards ticks.\n\n\n\n\nside\n\n\nOn which side of the plot box the rug will be plotted. Normally 1 (bottom) or 3 (top).\n\n\n\n\nquiet\n\n\nlogical indicating if there should be a warning about clipped values.\n\n\n\n\njitter\n\n\nLogical. Add jittering to separate ties? Default is FALSE.\n\n\n\n\namount\n\n\nNumeric. Amount of jittering (see jitter). Only used if jitter is TRUE.\n\n\n\n\n\n\nThis function should only be used as part of tinyplot_add(), i.e. adding to an existing plot.\nIn most cases, determining which variable receives the rug representation will be based on the side argument (i.e., x-variable if side is 1 or 3, and y-variable if side is 2 or 4). An exception is if the preceding plot type was either “density” or “histogram”; for these latter cases, the x-variable will always be used. See Examples.\n\n\n\n\nlibrary(\"tinyplot\")\n\ntinyplot(~wt | am, data = mtcars, type = \"density\", facet = \"by\", fill = \"by\")\ntinyplot_add(type = \"rug\")\n# use type_rug() to pass extra options\ntinyplot_add(type = type_rug(side = 3, ticksize = 0.05))\n\n\n\n\n\n\n\n# For ties, use jittering\ntinyplot(eruptions ~ waiting, data = faithful, type = \"lm\")\ntinyplot_add(type = type_rug(jitter = TRUE, amount = 0.3))\ntinyplot_add(type = type_rug(jitter = TRUE, amount = 0.1, side = 2))\n# Add original points just for reference\ntinyplot_add(type = \"p\")",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_rug"
    ]
  },
  {
    "objectID": "man/type_rug.html#add-a-rug-to-a-plot",
    "href": "man/type_rug.html#add-a-rug-to-a-plot",
    "title": "tinyplot",
    "section": "",
    "text": "Adds a rug representation (1-d plot) of the data to the plot.\n\n\n\ntype_rug(\n  ticksize = 0.03,\n  side = 1,\n  quiet = getOption(\"warn\") &lt; 0,\n  jitter = FALSE,\n  amount = NULL\n)\n\n\n\n\n\n\n\nticksize\n\n\nThe length of the ticks making up the ‘rug’. Positive lengths give inwards ticks.\n\n\n\n\nside\n\n\nOn which side of the plot box the rug will be plotted. Normally 1 (bottom) or 3 (top).\n\n\n\n\nquiet\n\n\nlogical indicating if there should be a warning about clipped values.\n\n\n\n\njitter\n\n\nLogical. Add jittering to separate ties? Default is FALSE.\n\n\n\n\namount\n\n\nNumeric. Amount of jittering (see jitter). Only used if jitter is TRUE.\n\n\n\n\n\n\nThis function should only be used as part of tinyplot_add(), i.e. adding to an existing plot.\nIn most cases, determining which variable receives the rug representation will be based on the side argument (i.e., x-variable if side is 1 or 3, and y-variable if side is 2 or 4). An exception is if the preceding plot type was either “density” or “histogram”; for these latter cases, the x-variable will always be used. See Examples.\n\n\n\n\nlibrary(\"tinyplot\")\n\ntinyplot(~wt | am, data = mtcars, type = \"density\", facet = \"by\", fill = \"by\")\ntinyplot_add(type = \"rug\")\n# use type_rug() to pass extra options\ntinyplot_add(type = type_rug(side = 3, ticksize = 0.05))\n\n\n\n\n\n\n\n# For ties, use jittering\ntinyplot(eruptions ~ waiting, data = faithful, type = \"lm\")\ntinyplot_add(type = type_rug(jitter = TRUE, amount = 0.3))\ntinyplot_add(type = type_rug(jitter = TRUE, amount = 0.1, side = 2))\n# Add original points just for reference\ntinyplot_add(type = \"p\")",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_rug"
    ]
  },
  {
    "objectID": "man/type_boxplot.html",
    "href": "man/type_boxplot.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for producing box-and-whisker plots. Arguments are passed to boxplot, although tinyplot scaffolding allows added functionality such as grouping and faceting. Box-and-whisker plots are the default plot type if x is a factor and y is numeric.\n\n\n\ntype_boxplot(\n  range = 1.5,\n  width = NULL,\n  varwidth = FALSE,\n  notch = FALSE,\n  outline = TRUE,\n  boxwex = 0.8,\n  staplewex = 0.5,\n  outwex = 0.5\n)\n\n\n\n\n\n\n\nrange\n\n\nthis determines how far the plot whiskers extend out from the box. If range is positive, the whiskers extend to the most extreme data point which is no more than range times the interquartile range from the box. A value of zero causes the whiskers to extend to the data extremes.\n\n\n\n\nwidth\n\n\na vector giving the relative widths of the boxes making up the plot.\n\n\n\n\nvarwidth\n\n\nif varwidth is TRUE, the boxes are drawn with widths proportional to the square-roots of the number of observations in the groups.\n\n\n\n\nnotch\n\n\nif notch is TRUE, a notch is drawn in each side of the boxes. If the notches of two plots do not overlap this is ‘strong evidence’ that the two medians differ (Chambers et al., 1983, p. 62). See boxplot.stats for the calculations used.\n\n\n\n\noutline\n\n\nif outline is not true, the outliers are not drawn (as points whereas S+ uses lines).\n\n\n\n\nboxwex\n\n\na scale factor to be applied to all boxes. When there are only a few groups, the appearance of the plot can be improved by making the boxes narrower.\n\n\n\n\nstaplewex\n\n\nstaple line width expansion, proportional to box width.\n\n\n\n\noutwex\n\n\noutlier line width expansion, proportional to box width.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"boxplot\" type convenience string\ntinyplot(count ~ spray, data = InsectSprays, type = \"boxplot\")\n\n\n\n\n\n\n\n# Note: Specifying the type here is redundant. Like base plot, tinyplot\n# automatically produces a boxplot if x is a factor and y is numeric\ntinyplot(count ~ spray, data = InsectSprays)\n\n# Grouped boxplot example\ntinyplot(len ~ dose | supp, data = ToothGrowth, type = \"boxplot\")\n\n\n\n\n\n\n\n# Use `type_boxplot()` to pass extra arguments for customization\ntinyplot(\n  len ~ dose | supp, data = ToothGrowth, lty = 1,\n  type = type_boxplot(boxwex = 0.3, staplewex = 0, outline = FALSE)\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_boxplot"
    ]
  },
  {
    "objectID": "man/type_boxplot.html#boxplot-type",
    "href": "man/type_boxplot.html#boxplot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for producing box-and-whisker plots. Arguments are passed to boxplot, although tinyplot scaffolding allows added functionality such as grouping and faceting. Box-and-whisker plots are the default plot type if x is a factor and y is numeric.\n\n\n\ntype_boxplot(\n  range = 1.5,\n  width = NULL,\n  varwidth = FALSE,\n  notch = FALSE,\n  outline = TRUE,\n  boxwex = 0.8,\n  staplewex = 0.5,\n  outwex = 0.5\n)\n\n\n\n\n\n\n\nrange\n\n\nthis determines how far the plot whiskers extend out from the box. If range is positive, the whiskers extend to the most extreme data point which is no more than range times the interquartile range from the box. A value of zero causes the whiskers to extend to the data extremes.\n\n\n\n\nwidth\n\n\na vector giving the relative widths of the boxes making up the plot.\n\n\n\n\nvarwidth\n\n\nif varwidth is TRUE, the boxes are drawn with widths proportional to the square-roots of the number of observations in the groups.\n\n\n\n\nnotch\n\n\nif notch is TRUE, a notch is drawn in each side of the boxes. If the notches of two plots do not overlap this is ‘strong evidence’ that the two medians differ (Chambers et al., 1983, p. 62). See boxplot.stats for the calculations used.\n\n\n\n\noutline\n\n\nif outline is not true, the outliers are not drawn (as points whereas S+ uses lines).\n\n\n\n\nboxwex\n\n\na scale factor to be applied to all boxes. When there are only a few groups, the appearance of the plot can be improved by making the boxes narrower.\n\n\n\n\nstaplewex\n\n\nstaple line width expansion, proportional to box width.\n\n\n\n\noutwex\n\n\noutlier line width expansion, proportional to box width.\n\n\n\n\n\n\n\nlibrary(\"tinyplot\")\n\n# \"boxplot\" type convenience string\ntinyplot(count ~ spray, data = InsectSprays, type = \"boxplot\")\n\n\n\n\n\n\n\n# Note: Specifying the type here is redundant. Like base plot, tinyplot\n# automatically produces a boxplot if x is a factor and y is numeric\ntinyplot(count ~ spray, data = InsectSprays)\n\n# Grouped boxplot example\ntinyplot(len ~ dose | supp, data = ToothGrowth, type = \"boxplot\")\n\n\n\n\n\n\n\n# Use `type_boxplot()` to pass extra arguments for customization\ntinyplot(\n  len ~ dose | supp, data = ToothGrowth, lty = 1,\n  type = type_boxplot(boxwex = 0.3, staplewex = 0, outline = FALSE)\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_boxplot"
    ]
  },
  {
    "objectID": "man/type_ridge.html",
    "href": "man/type_ridge.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for producing ridge plots (also known as joy plots), which display density distributions for multiple groups with vertical offsets. This function uses tinyplot scaffolding, which enables added functionality such as grouping and faceting.\nThe line color is controlled by the col argument in the tinyplot() call. The fill color is controlled by the bg argument in the tinyplot() call.\n\n\n\ntype_ridge(\n  scale = 1.5,\n  joint.max = c(\"all\", \"facet\", \"by\"),\n  breaks = NULL,\n  probs = NULL,\n  ylevels = NULL,\n  bw = \"nrd0\",\n  joint.bw = c(\"mean\", \"full\", \"none\"),\n  adjust = 1,\n  kernel = c(\"gaussian\", \"epanechnikov\", \"rectangular\", \"triangular\", \"biweight\",\n    \"cosine\", \"optcosine\"),\n  n = 512,\n  gradient = FALSE,\n  raster = FALSE,\n  col = NULL,\n  alpha = NULL\n)\n\n\n\n\n\n\n\nscale\n\n\nNumeric. Controls the scaling factor of each plot. Values greater than 1 means that plots overlap.\n\n\n\n\njoint.max\n\n\ncharacter indicating how to scale the maximum of the densities: The default “all” indicates that all densities are scaled jointly relative to the same maximum so that the areas of all densities are comparable. Alternatively, “facet” indicates that the maximum is computed within each facet so that the areas of the densities are comparable within each facet but not necessarily across facets. Finally, “by” indicates that each row (in each facet) is scaled separately, so that the areas of the densities for by groups in the same row are comparable but not necessarily across rows.\n\n\n\n\nbreaks\n\n\nNumeric. If a color gradient is used for shading, the breaks between the colors can be modified. The default is to use equidistant breaks spanning the range of the x variable.\n\n\n\n\nprobs\n\n\nNumeric. Instead of specifying the same breaks on the x-axis for all groups, it is possible to specify group-specific quantiles at the specified probs. The quantiles are computed based on the density (rather than the raw original variable). Only one of breaks or probs must be specified.\n\n\n\n\nylevels\n\n\na character or numeric vector specifying in which order the levels of the y-variable should be plotted.\n\n\n\n\nbw\n\n\nthe smoothing bandwidth to be used. The kernels are scaled such that this is the standard deviation of the smoothing kernel. (Note this differs from the reference books cited below.)\nbw can also be a character string giving a rule to choose the bandwidth. See bw.nrd.  The default, “nrd0”, has remained the default for historical and compatibility reasons, rather than as a general recommendation, where e.g., “SJ” would rather fit, see also Venables and Ripley (2002).\nThe specified (or computed) value of bw is multiplied by adjust.\n\n\n\n\njoint.bw\n\n\ncharacter string indicating whether (and how) the smoothing bandwidth should be computed from the joint data distribution. The default of “mean” will compute the joint bandwidth as the mean of the individual subgroup bandwidths (weighted by their number of observations). Choosing “full” will result in a joint bandwidth computed from the full distribution (merging all subgroups). For “none” the individual bandwidth will be computed independently for each subgroup. Also accepts a logical argument, where TRUE maps to “mean” and FALSE maps to “none”. See type_density for some discussion of practical considerations.\n\n\n\n\nadjust\n\n\nthe bandwidth used is actually adjust*bw. This makes it easy to specify values like ‘half the default’ bandwidth.\n\n\n\n\nkernel\n\n\na character string giving the smoothing kernel to be used. This must partially match one of “gaussian”, “rectangular”, “triangular”, “epanechnikov”, “biweight”, “cosine” or “optcosine”, with default “gaussian”, and may be abbreviated to a unique prefix (single letter).\n“cosine” is smoother than “optcosine”, which is the usual ‘cosine’ kernel in the literature and almost MSE-efficient. However, “cosine” is the version used by S.\n\n\n\n\nn\n\n\nthe number of equally spaced points at which the density is to be estimated. When n &gt; 512, it is rounded up to a power of 2 during the calculations (as fft is used) and the final result is interpolated by approx. So it almost always makes sense to specify n as a power of two.\n\n\n\n\ngradient\n\n\nLogical or character. Should a gradient fill be used to shade the area under the density? If a character specification is used, then it can either be of length 1 and specify the palette to be used with gradient = TRUE corresponding to gradient = “viridis”. If a character vector of length greater than 1 is used, then it should specify the colors in the palette, e.g., gradient = hcl.colors(512).\n\n\n\n\nraster\n\n\nLogical. Should the gradient fill be drawn using rasterImage? Defaults to FALSE, in which case the gradient fill will instead be drawn using polygon. See the Technical note on gradient fills section below.\n\n\n\n\ncol\n\n\nCharacter string denoting the outline (border) color for all of the ridge densities. Note that a singular value is expected; if multiple colors are provided then only the first will be used. This argument is mostly useful for the aesthetic effect of drawing a common outline color in combination with gradient fills. See Examples.\n\n\n\n\nalpha\n\n\nNumeric in the range [0,1] for adjusting the alpha transparency of the density fills. In most cases, will default to a value of 1, i.e. fully opaque. But for some by grouped plots (excepting the special cases where by==y or by==x), will default to 0.6.\n\n\n\n\n\n\ntinyplot uses two basic approaches for drawing gradient fills in ridge line plots, e.g., if type_ridge(gradient = TRUE).\nThe first (and default) polygon-based approach involves dividing up the main density region into many smaller polygons along the x-axis. Each of these smaller polygons inherits a different color \"segment\" from the underlying palette swatch, which in turn creates the effect of a continuous gradient when they are all plotted together. Internally, this polygon-based approach is vectorized (i.e., all of the sub-polygons are plotted simultaneously). It is thus efficient from a plotting perspective and generally also performs well from an aesthetic perspective. However, it can occasionally produce undesirable plotting artifacts on some graphics devices—e.g., thin but visible vertical lines—if alpha transparency is being used at the same time.\nFor this reason, we also offer an alternative raster-based approach for gradient fills that users can invoke via type_ridge(gradient = TRUE, raster = TRUE). The essential idea is that we coerce the density polygon into a raster representation (using rasterImage) and achieve the gradient effect via color interpolation. The trade-off this time is potential smoothness artifacts around the top of the ridge densities at high resolutions, since we have converted a vector object into a raster object.\nAgain, we expect that the choice between these two approaches will only matter for ridge plots that combine gradient fills with alpha transparency (and on certain graphics devices). We recommend that users experiment to determine which approach is optimal for their device.\n\n\n\n\nlibrary(\"tinyplot\")\n\naq = transform(\n  airquality,\n  Month = factor(month.abb[Month], levels = month.abb[5:9]),\n  Month2 = factor(month.name[Month], levels = month.name[5:9]),\n  Late = ifelse(Day &gt; 15, \"Late\", \"Early\")\n  )\n\n# default ridge plot (using the \"ridge\" convenience string)\ntinyplot(Month ~ Temp, data = aq, type = \"ridge\")\n\n\n\n\n\n\n\n# for ridge plots, we recommend pairing with the dedicated theme(s), which\n# facilitate nicer y-axis labels, grid lines, etc.\n\ntinytheme(\"ridge\")\ntinyplot(Month ~ Temp, data = aq, type = \"ridge\")\n\n\n\n\n\n\n\ntinytheme(\"ridge2\") # removes the plot frame (but keeps x-axis line)\ntinyplot(Month ~ Temp, data = aq, type = \"ridge\")\n\n\n\n\n\n\n\n# the \"ridge(2)\" themes are especially helpful for long y labels, due to\n# dyanmic plot adjustment\ntinyplot(Month2 ~ Temp, data = aq, type = \"ridge\")\n\n\n\n\n\n\n\n# pass customization arguments through type_ridge()... for example, use\n# the scale argument to change/avoid overlap of densities (more on scaling\n# further below)\n\ntinyplot(Month ~ Temp, data = aq, type = type_ridge(scale = 1))\n\n\n\n\n\n\n\n## by grouping is also supported. two special cases of interest:\n\n# 1) by == y (color by y groups)\ntinyplot(Month ~ Temp | Month, data = aq, type = \"ridge\")\n\n\n\n\n\n\n\n# 2) by == x (gradient coloring along x)\ntinyplot(Month ~ Temp | Temp, data = aq, type = \"ridge\")\n\n\n\n\n\n\n\n# aside: pass explicit `type_ridge(col = &lt;col&gt;)` arg to set a different\n# border color\ntinyplot(Month ~ Temp | Temp, data = aq, type = type_ridge(col = \"white\"))\n\n\n\n\n\n\n\n# gradient coloring along the x-axis can also be invoked manually without\n# a legend (the next two tinyplot calls are equivalent)\n\n# tinyplot(Month ~ Temp, data = aq, type = type_ridge(gradient = \"agsunset\"))\ntinyplot(Month ~ Temp, data = aq, type = type_ridge(gradient = TRUE))\n\n\n\n\n\n\n\n# aside: when combining gradient fill with alpha transparency, it may be\n# better to use the raster-based approach (test on your graphics device)\n\ntinyplot(Month ~ Temp, data = aq,\n  type = type_ridge(gradient = TRUE, alpha = 0.5),\n  main = \"polygon fill (default)\")\n\n\n\n\n\n\n\ntinyplot(Month ~ Temp, data = aq,\n  type = type_ridge(gradient = TRUE, alpha = 0.5, raster = TRUE),\n  main = \"raster fill\")\n\n\n\n\n\n\n\n# highlighting only the center 50% of the density (i.e., 25%-75% quantiles)\ntinyplot(Month ~ Temp, data = aq, type = type_ridge(\n  gradient = hcl.colors(3, \"Dark Mint\")[c(2, 1, 2)],\n  probs = c(0.25, 0.75), col = \"white\"))\n\n\n\n\n\n\n\n# highlighting the probability distribution by color gradient\n# (darkest point = median)\ntinyplot(Month ~ Temp, data = aq, type = type_ridge(\n  gradient = hcl.colors(250, \"Dark Mint\")[c(250:1, 1:250)],\n  probs = 0:500/500))\n\n\n\n\n\n\n\n# faceting also works, although we recommend switching (back) to the \"ridge\"\n# theme for faceted ridge plots\n\ntinytheme(\"ridge\")\ntinyplot(Month ~ Ozone, facet = ~ Late, data = aq,\n  type = type_ridge(gradient = TRUE))\n\n\n\n\n\n\n\n## use the joint.max argument to vary the maximum density used for\n## determining relative scaling...\n\n# jointly across all densities (default) vs. per facet\ntinyplot(Month ~ Temp, facet = ~ Late, data = aq,\n  type = type_ridge(scale = 1))\n\n\n\n\n\n\n\ntinyplot(Month ~ Temp, facet = ~ Late, data = aq,\n  type = type_ridge(scale = 1, joint.max = \"facet\"))\n\n\n\n\n\n\n\n# jointly across all densities (default) vs. per by row\ntinyplot(Month ~ Temp | Late, data = aq,\n  type = type_ridge(scale = 1))\n\n\n\n\n\n\n\ntinyplot(Month ~ Temp | Late, data = aq,\n  type = type_ridge(scale = 1, joint.max = \"by\"))\n\n\n\n\n\n\n\n# restore the default theme\ntinytheme()",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_ridge"
    ]
  },
  {
    "objectID": "man/type_ridge.html#ridge-plot-type",
    "href": "man/type_ridge.html#ridge-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for producing ridge plots (also known as joy plots), which display density distributions for multiple groups with vertical offsets. This function uses tinyplot scaffolding, which enables added functionality such as grouping and faceting.\nThe line color is controlled by the col argument in the tinyplot() call. The fill color is controlled by the bg argument in the tinyplot() call.\n\n\n\ntype_ridge(\n  scale = 1.5,\n  joint.max = c(\"all\", \"facet\", \"by\"),\n  breaks = NULL,\n  probs = NULL,\n  ylevels = NULL,\n  bw = \"nrd0\",\n  joint.bw = c(\"mean\", \"full\", \"none\"),\n  adjust = 1,\n  kernel = c(\"gaussian\", \"epanechnikov\", \"rectangular\", \"triangular\", \"biweight\",\n    \"cosine\", \"optcosine\"),\n  n = 512,\n  gradient = FALSE,\n  raster = FALSE,\n  col = NULL,\n  alpha = NULL\n)\n\n\n\n\n\n\n\nscale\n\n\nNumeric. Controls the scaling factor of each plot. Values greater than 1 means that plots overlap.\n\n\n\n\njoint.max\n\n\ncharacter indicating how to scale the maximum of the densities: The default “all” indicates that all densities are scaled jointly relative to the same maximum so that the areas of all densities are comparable. Alternatively, “facet” indicates that the maximum is computed within each facet so that the areas of the densities are comparable within each facet but not necessarily across facets. Finally, “by” indicates that each row (in each facet) is scaled separately, so that the areas of the densities for by groups in the same row are comparable but not necessarily across rows.\n\n\n\n\nbreaks\n\n\nNumeric. If a color gradient is used for shading, the breaks between the colors can be modified. The default is to use equidistant breaks spanning the range of the x variable.\n\n\n\n\nprobs\n\n\nNumeric. Instead of specifying the same breaks on the x-axis for all groups, it is possible to specify group-specific quantiles at the specified probs. The quantiles are computed based on the density (rather than the raw original variable). Only one of breaks or probs must be specified.\n\n\n\n\nylevels\n\n\na character or numeric vector specifying in which order the levels of the y-variable should be plotted.\n\n\n\n\nbw\n\n\nthe smoothing bandwidth to be used. The kernels are scaled such that this is the standard deviation of the smoothing kernel. (Note this differs from the reference books cited below.)\nbw can also be a character string giving a rule to choose the bandwidth. See bw.nrd.  The default, “nrd0”, has remained the default for historical and compatibility reasons, rather than as a general recommendation, where e.g., “SJ” would rather fit, see also Venables and Ripley (2002).\nThe specified (or computed) value of bw is multiplied by adjust.\n\n\n\n\njoint.bw\n\n\ncharacter string indicating whether (and how) the smoothing bandwidth should be computed from the joint data distribution. The default of “mean” will compute the joint bandwidth as the mean of the individual subgroup bandwidths (weighted by their number of observations). Choosing “full” will result in a joint bandwidth computed from the full distribution (merging all subgroups). For “none” the individual bandwidth will be computed independently for each subgroup. Also accepts a logical argument, where TRUE maps to “mean” and FALSE maps to “none”. See type_density for some discussion of practical considerations.\n\n\n\n\nadjust\n\n\nthe bandwidth used is actually adjust*bw. This makes it easy to specify values like ‘half the default’ bandwidth.\n\n\n\n\nkernel\n\n\na character string giving the smoothing kernel to be used. This must partially match one of “gaussian”, “rectangular”, “triangular”, “epanechnikov”, “biweight”, “cosine” or “optcosine”, with default “gaussian”, and may be abbreviated to a unique prefix (single letter).\n“cosine” is smoother than “optcosine”, which is the usual ‘cosine’ kernel in the literature and almost MSE-efficient. However, “cosine” is the version used by S.\n\n\n\n\nn\n\n\nthe number of equally spaced points at which the density is to be estimated. When n &gt; 512, it is rounded up to a power of 2 during the calculations (as fft is used) and the final result is interpolated by approx. So it almost always makes sense to specify n as a power of two.\n\n\n\n\ngradient\n\n\nLogical or character. Should a gradient fill be used to shade the area under the density? If a character specification is used, then it can either be of length 1 and specify the palette to be used with gradient = TRUE corresponding to gradient = “viridis”. If a character vector of length greater than 1 is used, then it should specify the colors in the palette, e.g., gradient = hcl.colors(512).\n\n\n\n\nraster\n\n\nLogical. Should the gradient fill be drawn using rasterImage? Defaults to FALSE, in which case the gradient fill will instead be drawn using polygon. See the Technical note on gradient fills section below.\n\n\n\n\ncol\n\n\nCharacter string denoting the outline (border) color for all of the ridge densities. Note that a singular value is expected; if multiple colors are provided then only the first will be used. This argument is mostly useful for the aesthetic effect of drawing a common outline color in combination with gradient fills. See Examples.\n\n\n\n\nalpha\n\n\nNumeric in the range [0,1] for adjusting the alpha transparency of the density fills. In most cases, will default to a value of 1, i.e. fully opaque. But for some by grouped plots (excepting the special cases where by==y or by==x), will default to 0.6.\n\n\n\n\n\n\ntinyplot uses two basic approaches for drawing gradient fills in ridge line plots, e.g., if type_ridge(gradient = TRUE).\nThe first (and default) polygon-based approach involves dividing up the main density region into many smaller polygons along the x-axis. Each of these smaller polygons inherits a different color \"segment\" from the underlying palette swatch, which in turn creates the effect of a continuous gradient when they are all plotted together. Internally, this polygon-based approach is vectorized (i.e., all of the sub-polygons are plotted simultaneously). It is thus efficient from a plotting perspective and generally also performs well from an aesthetic perspective. However, it can occasionally produce undesirable plotting artifacts on some graphics devices—e.g., thin but visible vertical lines—if alpha transparency is being used at the same time.\nFor this reason, we also offer an alternative raster-based approach for gradient fills that users can invoke via type_ridge(gradient = TRUE, raster = TRUE). The essential idea is that we coerce the density polygon into a raster representation (using rasterImage) and achieve the gradient effect via color interpolation. The trade-off this time is potential smoothness artifacts around the top of the ridge densities at high resolutions, since we have converted a vector object into a raster object.\nAgain, we expect that the choice between these two approaches will only matter for ridge plots that combine gradient fills with alpha transparency (and on certain graphics devices). We recommend that users experiment to determine which approach is optimal for their device.\n\n\n\n\nlibrary(\"tinyplot\")\n\naq = transform(\n  airquality,\n  Month = factor(month.abb[Month], levels = month.abb[5:9]),\n  Month2 = factor(month.name[Month], levels = month.name[5:9]),\n  Late = ifelse(Day &gt; 15, \"Late\", \"Early\")\n  )\n\n# default ridge plot (using the \"ridge\" convenience string)\ntinyplot(Month ~ Temp, data = aq, type = \"ridge\")\n\n\n\n\n\n\n\n# for ridge plots, we recommend pairing with the dedicated theme(s), which\n# facilitate nicer y-axis labels, grid lines, etc.\n\ntinytheme(\"ridge\")\ntinyplot(Month ~ Temp, data = aq, type = \"ridge\")\n\n\n\n\n\n\n\ntinytheme(\"ridge2\") # removes the plot frame (but keeps x-axis line)\ntinyplot(Month ~ Temp, data = aq, type = \"ridge\")\n\n\n\n\n\n\n\n# the \"ridge(2)\" themes are especially helpful for long y labels, due to\n# dyanmic plot adjustment\ntinyplot(Month2 ~ Temp, data = aq, type = \"ridge\")\n\n\n\n\n\n\n\n# pass customization arguments through type_ridge()... for example, use\n# the scale argument to change/avoid overlap of densities (more on scaling\n# further below)\n\ntinyplot(Month ~ Temp, data = aq, type = type_ridge(scale = 1))\n\n\n\n\n\n\n\n## by grouping is also supported. two special cases of interest:\n\n# 1) by == y (color by y groups)\ntinyplot(Month ~ Temp | Month, data = aq, type = \"ridge\")\n\n\n\n\n\n\n\n# 2) by == x (gradient coloring along x)\ntinyplot(Month ~ Temp | Temp, data = aq, type = \"ridge\")\n\n\n\n\n\n\n\n# aside: pass explicit `type_ridge(col = &lt;col&gt;)` arg to set a different\n# border color\ntinyplot(Month ~ Temp | Temp, data = aq, type = type_ridge(col = \"white\"))\n\n\n\n\n\n\n\n# gradient coloring along the x-axis can also be invoked manually without\n# a legend (the next two tinyplot calls are equivalent)\n\n# tinyplot(Month ~ Temp, data = aq, type = type_ridge(gradient = \"agsunset\"))\ntinyplot(Month ~ Temp, data = aq, type = type_ridge(gradient = TRUE))\n\n\n\n\n\n\n\n# aside: when combining gradient fill with alpha transparency, it may be\n# better to use the raster-based approach (test on your graphics device)\n\ntinyplot(Month ~ Temp, data = aq,\n  type = type_ridge(gradient = TRUE, alpha = 0.5),\n  main = \"polygon fill (default)\")\n\n\n\n\n\n\n\ntinyplot(Month ~ Temp, data = aq,\n  type = type_ridge(gradient = TRUE, alpha = 0.5, raster = TRUE),\n  main = \"raster fill\")\n\n\n\n\n\n\n\n# highlighting only the center 50% of the density (i.e., 25%-75% quantiles)\ntinyplot(Month ~ Temp, data = aq, type = type_ridge(\n  gradient = hcl.colors(3, \"Dark Mint\")[c(2, 1, 2)],\n  probs = c(0.25, 0.75), col = \"white\"))\n\n\n\n\n\n\n\n# highlighting the probability distribution by color gradient\n# (darkest point = median)\ntinyplot(Month ~ Temp, data = aq, type = type_ridge(\n  gradient = hcl.colors(250, \"Dark Mint\")[c(250:1, 1:250)],\n  probs = 0:500/500))\n\n\n\n\n\n\n\n# faceting also works, although we recommend switching (back) to the \"ridge\"\n# theme for faceted ridge plots\n\ntinytheme(\"ridge\")\ntinyplot(Month ~ Ozone, facet = ~ Late, data = aq,\n  type = type_ridge(gradient = TRUE))\n\n\n\n\n\n\n\n## use the joint.max argument to vary the maximum density used for\n## determining relative scaling...\n\n# jointly across all densities (default) vs. per facet\ntinyplot(Month ~ Temp, facet = ~ Late, data = aq,\n  type = type_ridge(scale = 1))\n\n\n\n\n\n\n\ntinyplot(Month ~ Temp, facet = ~ Late, data = aq,\n  type = type_ridge(scale = 1, joint.max = \"facet\"))\n\n\n\n\n\n\n\n# jointly across all densities (default) vs. per by row\ntinyplot(Month ~ Temp | Late, data = aq,\n  type = type_ridge(scale = 1))\n\n\n\n\n\n\n\ntinyplot(Month ~ Temp | Late, data = aq,\n  type = type_ridge(scale = 1, joint.max = \"by\"))\n\n\n\n\n\n\n\n# restore the default theme\ntinytheme()",
    "crumbs": [
      "Reference",
      "Plot types",
      "Visualizations",
      "type_ridge"
    ]
  },
  {
    "objectID": "man/type_rect.html",
    "href": "man/type_rect.html",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting rectangles.\n\n\n\ntype_rect()\n\n\n\n\nContrary to base rect, rectangles in tinyplot must be specified using the xmin, ymin,xmax, and ymax arguments.\n\n\n\n\nlibrary(\"tinyplot\")\n\ni = 4*(0:10)\n\n# \"rect\" type convenience character string\ntinyplot(\n  xmin = 100+i, ymin = 300+i, xmax = 150+i, ymax = 380+i,\n  by = i, fill = 0.2,\n  type = \"rect\"\n)\n\n\n\n\n\n\n\n# Same result with type_rect()\ntinyplot(\n  xmin = 100+i, ymin = 300+i, xmax = 150+i, ymax = 380+i,\n  by = i, fill = 0.2,\n  type = type_rect()\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_rect"
    ]
  },
  {
    "objectID": "man/type_rect.html#rectangle-plot-type",
    "href": "man/type_rect.html#rectangle-plot-type",
    "title": "tinyplot",
    "section": "",
    "text": "Type function for plotting rectangles.\n\n\n\ntype_rect()\n\n\n\n\nContrary to base rect, rectangles in tinyplot must be specified using the xmin, ymin,xmax, and ymax arguments.\n\n\n\n\nlibrary(\"tinyplot\")\n\ni = 4*(0:10)\n\n# \"rect\" type convenience character string\ntinyplot(\n  xmin = 100+i, ymin = 300+i, xmax = 150+i, ymax = 380+i,\n  by = i, fill = 0.2,\n  type = \"rect\"\n)\n\n\n\n\n\n\n\n# Same result with type_rect()\ntinyplot(\n  xmin = 100+i, ymin = 300+i, xmax = 150+i, ymax = 380+i,\n  by = i, fill = 0.2,\n  type = type_rect()\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Shapes",
      "type_rect"
    ]
  },
  {
    "objectID": "man/type_summary.html",
    "href": "man/type_summary.html",
    "title": "tinyplot",
    "section": "",
    "text": "Applies a summary function to y along unique values of x. For example, plot the mean y value for each x value. Internally, type_summary() applies a thin wrapper around ave and then passes the result to type_lines for drawing.\n\n\n\ntype_summary(fun = mean, ...)\n\n\n\n\n\n\n\nfun\n\n\nsummarizing function. Should be compatible with ave. Defaults to mean.\n\n\n\n\n…\n\n\nAdditional arguments are passed to the lines() function, ex: type=“p”, col=“pink”.\n\n\n\n\n\n\nave which performs the summarizing (averaging) behind the scenes.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# Plot the mean chick weight over time\ntinyplot(weight ~ Time, data = ChickWeight, type = \"summary\")\n\n\n\n\n\n\n\n# Note: \"mean\" is the default function, so these are also equivalent:\n# tinyplot(weight ~ Time, data = ChickWeight, type = type_summary())\n# tinyplot(weight ~ Time, data = ChickWeight, type = type_summary(mean))\n\n# Plot the median instead\ntinyplot(weight ~ Time, data = ChickWeight, type = type_summary(median))\n\n\n\n\n\n\n\n# Works with groups and/or facets too\ntinyplot(weight ~ Time | Diet, facet = \"by\", data = ChickWeight, type = \"summary\")\n\n\n\n\n\n\n\n# Custom/complex function example\ntinyplot(\n  weight ~ Time | Diet, facet = \"by\", data = ChickWeight,\n  type = type_summary(function(y) quantile(y, probs = 0.9)/max(y))\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Functions",
      "type_summary"
    ]
  },
  {
    "objectID": "man/type_summary.html#plot-summary-values-of-y-at-unique-values-of-x",
    "href": "man/type_summary.html#plot-summary-values-of-y-at-unique-values-of-x",
    "title": "tinyplot",
    "section": "",
    "text": "Applies a summary function to y along unique values of x. For example, plot the mean y value for each x value. Internally, type_summary() applies a thin wrapper around ave and then passes the result to type_lines for drawing.\n\n\n\ntype_summary(fun = mean, ...)\n\n\n\n\n\n\n\nfun\n\n\nsummarizing function. Should be compatible with ave. Defaults to mean.\n\n\n\n\n…\n\n\nAdditional arguments are passed to the lines() function, ex: type=“p”, col=“pink”.\n\n\n\n\n\n\nave which performs the summarizing (averaging) behind the scenes.\n\n\n\n\nlibrary(\"tinyplot\")\n\n# Plot the mean chick weight over time\ntinyplot(weight ~ Time, data = ChickWeight, type = \"summary\")\n\n\n\n\n\n\n\n# Note: \"mean\" is the default function, so these are also equivalent:\n# tinyplot(weight ~ Time, data = ChickWeight, type = type_summary())\n# tinyplot(weight ~ Time, data = ChickWeight, type = type_summary(mean))\n\n# Plot the median instead\ntinyplot(weight ~ Time, data = ChickWeight, type = type_summary(median))\n\n\n\n\n\n\n\n# Works with groups and/or facets too\ntinyplot(weight ~ Time | Diet, facet = \"by\", data = ChickWeight, type = \"summary\")\n\n\n\n\n\n\n\n# Custom/complex function example\ntinyplot(\n  weight ~ Time | Diet, facet = \"by\", data = ChickWeight,\n  type = type_summary(function(y) quantile(y, probs = 0.9)/max(y))\n)",
    "crumbs": [
      "Reference",
      "Plot types",
      "Functions",
      "type_summary"
    ]
  }
]